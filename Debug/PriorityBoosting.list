
PriorityBoosting.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004948  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000120  08004ae8  08004ae8  00014ae8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c08  08004c08  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08004c08  08004c08  00014c08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004c10  08004c10  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004c10  08004c10  00014c10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004c14  08004c14  00014c14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08004c18  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004090  20000010  08004c28  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200040a0  08004c28  000240a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001673d  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f18  00000000  00000000  0003677d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001198  00000000  00000000  00039698  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001080  00000000  00000000  0003a830  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017e05  00000000  00000000  0003b8b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000134af  00000000  00000000  000536b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000961e0  00000000  00000000  00066b64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000fcd44  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004940  00000000  00000000  000fcd98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000010 	.word	0x20000010
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004ad0 	.word	0x08004ad0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000014 	.word	0x20000014
 80001dc:	08004ad0 	.word	0x08004ad0

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000200:	f04f 30ff 	movne.w	r0, #4294967295
 8000204:	f000 b96e 	b.w	80004e4 <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	9d08      	ldr	r5, [sp, #32]
 8000226:	4604      	mov	r4, r0
 8000228:	468c      	mov	ip, r1
 800022a:	2b00      	cmp	r3, #0
 800022c:	f040 8083 	bne.w	8000336 <__udivmoddi4+0x116>
 8000230:	428a      	cmp	r2, r1
 8000232:	4617      	mov	r7, r2
 8000234:	d947      	bls.n	80002c6 <__udivmoddi4+0xa6>
 8000236:	fab2 f282 	clz	r2, r2
 800023a:	b142      	cbz	r2, 800024e <__udivmoddi4+0x2e>
 800023c:	f1c2 0020 	rsb	r0, r2, #32
 8000240:	fa24 f000 	lsr.w	r0, r4, r0
 8000244:	4091      	lsls	r1, r2
 8000246:	4097      	lsls	r7, r2
 8000248:	ea40 0c01 	orr.w	ip, r0, r1
 800024c:	4094      	lsls	r4, r2
 800024e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000252:	0c23      	lsrs	r3, r4, #16
 8000254:	fbbc f6f8 	udiv	r6, ip, r8
 8000258:	fa1f fe87 	uxth.w	lr, r7
 800025c:	fb08 c116 	mls	r1, r8, r6, ip
 8000260:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000264:	fb06 f10e 	mul.w	r1, r6, lr
 8000268:	4299      	cmp	r1, r3
 800026a:	d909      	bls.n	8000280 <__udivmoddi4+0x60>
 800026c:	18fb      	adds	r3, r7, r3
 800026e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000272:	f080 8119 	bcs.w	80004a8 <__udivmoddi4+0x288>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 8116 	bls.w	80004a8 <__udivmoddi4+0x288>
 800027c:	3e02      	subs	r6, #2
 800027e:	443b      	add	r3, r7
 8000280:	1a5b      	subs	r3, r3, r1
 8000282:	b2a4      	uxth	r4, r4
 8000284:	fbb3 f0f8 	udiv	r0, r3, r8
 8000288:	fb08 3310 	mls	r3, r8, r0, r3
 800028c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000290:	fb00 fe0e 	mul.w	lr, r0, lr
 8000294:	45a6      	cmp	lr, r4
 8000296:	d909      	bls.n	80002ac <__udivmoddi4+0x8c>
 8000298:	193c      	adds	r4, r7, r4
 800029a:	f100 33ff 	add.w	r3, r0, #4294967295
 800029e:	f080 8105 	bcs.w	80004ac <__udivmoddi4+0x28c>
 80002a2:	45a6      	cmp	lr, r4
 80002a4:	f240 8102 	bls.w	80004ac <__udivmoddi4+0x28c>
 80002a8:	3802      	subs	r0, #2
 80002aa:	443c      	add	r4, r7
 80002ac:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002b0:	eba4 040e 	sub.w	r4, r4, lr
 80002b4:	2600      	movs	r6, #0
 80002b6:	b11d      	cbz	r5, 80002c0 <__udivmoddi4+0xa0>
 80002b8:	40d4      	lsrs	r4, r2
 80002ba:	2300      	movs	r3, #0
 80002bc:	e9c5 4300 	strd	r4, r3, [r5]
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	b902      	cbnz	r2, 80002ca <__udivmoddi4+0xaa>
 80002c8:	deff      	udf	#255	; 0xff
 80002ca:	fab2 f282 	clz	r2, r2
 80002ce:	2a00      	cmp	r2, #0
 80002d0:	d150      	bne.n	8000374 <__udivmoddi4+0x154>
 80002d2:	1bcb      	subs	r3, r1, r7
 80002d4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d8:	fa1f f887 	uxth.w	r8, r7
 80002dc:	2601      	movs	r6, #1
 80002de:	fbb3 fcfe 	udiv	ip, r3, lr
 80002e2:	0c21      	lsrs	r1, r4, #16
 80002e4:	fb0e 331c 	mls	r3, lr, ip, r3
 80002e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002ec:	fb08 f30c 	mul.w	r3, r8, ip
 80002f0:	428b      	cmp	r3, r1
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0xe4>
 80002f4:	1879      	adds	r1, r7, r1
 80002f6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0xe2>
 80002fc:	428b      	cmp	r3, r1
 80002fe:	f200 80e9 	bhi.w	80004d4 <__udivmoddi4+0x2b4>
 8000302:	4684      	mov	ip, r0
 8000304:	1ac9      	subs	r1, r1, r3
 8000306:	b2a3      	uxth	r3, r4
 8000308:	fbb1 f0fe 	udiv	r0, r1, lr
 800030c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000310:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000314:	fb08 f800 	mul.w	r8, r8, r0
 8000318:	45a0      	cmp	r8, r4
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x10c>
 800031c:	193c      	adds	r4, r7, r4
 800031e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x10a>
 8000324:	45a0      	cmp	r8, r4
 8000326:	f200 80d9 	bhi.w	80004dc <__udivmoddi4+0x2bc>
 800032a:	4618      	mov	r0, r3
 800032c:	eba4 0408 	sub.w	r4, r4, r8
 8000330:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000334:	e7bf      	b.n	80002b6 <__udivmoddi4+0x96>
 8000336:	428b      	cmp	r3, r1
 8000338:	d909      	bls.n	800034e <__udivmoddi4+0x12e>
 800033a:	2d00      	cmp	r5, #0
 800033c:	f000 80b1 	beq.w	80004a2 <__udivmoddi4+0x282>
 8000340:	2600      	movs	r6, #0
 8000342:	e9c5 0100 	strd	r0, r1, [r5]
 8000346:	4630      	mov	r0, r6
 8000348:	4631      	mov	r1, r6
 800034a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034e:	fab3 f683 	clz	r6, r3
 8000352:	2e00      	cmp	r6, #0
 8000354:	d14a      	bne.n	80003ec <__udivmoddi4+0x1cc>
 8000356:	428b      	cmp	r3, r1
 8000358:	d302      	bcc.n	8000360 <__udivmoddi4+0x140>
 800035a:	4282      	cmp	r2, r0
 800035c:	f200 80b8 	bhi.w	80004d0 <__udivmoddi4+0x2b0>
 8000360:	1a84      	subs	r4, r0, r2
 8000362:	eb61 0103 	sbc.w	r1, r1, r3
 8000366:	2001      	movs	r0, #1
 8000368:	468c      	mov	ip, r1
 800036a:	2d00      	cmp	r5, #0
 800036c:	d0a8      	beq.n	80002c0 <__udivmoddi4+0xa0>
 800036e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000372:	e7a5      	b.n	80002c0 <__udivmoddi4+0xa0>
 8000374:	f1c2 0320 	rsb	r3, r2, #32
 8000378:	fa20 f603 	lsr.w	r6, r0, r3
 800037c:	4097      	lsls	r7, r2
 800037e:	fa01 f002 	lsl.w	r0, r1, r2
 8000382:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000386:	40d9      	lsrs	r1, r3
 8000388:	4330      	orrs	r0, r6
 800038a:	0c03      	lsrs	r3, r0, #16
 800038c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000390:	fa1f f887 	uxth.w	r8, r7
 8000394:	fb0e 1116 	mls	r1, lr, r6, r1
 8000398:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800039c:	fb06 f108 	mul.w	r1, r6, r8
 80003a0:	4299      	cmp	r1, r3
 80003a2:	fa04 f402 	lsl.w	r4, r4, r2
 80003a6:	d909      	bls.n	80003bc <__udivmoddi4+0x19c>
 80003a8:	18fb      	adds	r3, r7, r3
 80003aa:	f106 3cff 	add.w	ip, r6, #4294967295
 80003ae:	f080 808d 	bcs.w	80004cc <__udivmoddi4+0x2ac>
 80003b2:	4299      	cmp	r1, r3
 80003b4:	f240 808a 	bls.w	80004cc <__udivmoddi4+0x2ac>
 80003b8:	3e02      	subs	r6, #2
 80003ba:	443b      	add	r3, r7
 80003bc:	1a5b      	subs	r3, r3, r1
 80003be:	b281      	uxth	r1, r0
 80003c0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003c4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003cc:	fb00 f308 	mul.w	r3, r0, r8
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x1c4>
 80003d4:	1879      	adds	r1, r7, r1
 80003d6:	f100 3cff 	add.w	ip, r0, #4294967295
 80003da:	d273      	bcs.n	80004c4 <__udivmoddi4+0x2a4>
 80003dc:	428b      	cmp	r3, r1
 80003de:	d971      	bls.n	80004c4 <__udivmoddi4+0x2a4>
 80003e0:	3802      	subs	r0, #2
 80003e2:	4439      	add	r1, r7
 80003e4:	1acb      	subs	r3, r1, r3
 80003e6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003ea:	e778      	b.n	80002de <__udivmoddi4+0xbe>
 80003ec:	f1c6 0c20 	rsb	ip, r6, #32
 80003f0:	fa03 f406 	lsl.w	r4, r3, r6
 80003f4:	fa22 f30c 	lsr.w	r3, r2, ip
 80003f8:	431c      	orrs	r4, r3
 80003fa:	fa20 f70c 	lsr.w	r7, r0, ip
 80003fe:	fa01 f306 	lsl.w	r3, r1, r6
 8000402:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000406:	fa21 f10c 	lsr.w	r1, r1, ip
 800040a:	431f      	orrs	r7, r3
 800040c:	0c3b      	lsrs	r3, r7, #16
 800040e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000412:	fa1f f884 	uxth.w	r8, r4
 8000416:	fb0e 1119 	mls	r1, lr, r9, r1
 800041a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800041e:	fb09 fa08 	mul.w	sl, r9, r8
 8000422:	458a      	cmp	sl, r1
 8000424:	fa02 f206 	lsl.w	r2, r2, r6
 8000428:	fa00 f306 	lsl.w	r3, r0, r6
 800042c:	d908      	bls.n	8000440 <__udivmoddi4+0x220>
 800042e:	1861      	adds	r1, r4, r1
 8000430:	f109 30ff 	add.w	r0, r9, #4294967295
 8000434:	d248      	bcs.n	80004c8 <__udivmoddi4+0x2a8>
 8000436:	458a      	cmp	sl, r1
 8000438:	d946      	bls.n	80004c8 <__udivmoddi4+0x2a8>
 800043a:	f1a9 0902 	sub.w	r9, r9, #2
 800043e:	4421      	add	r1, r4
 8000440:	eba1 010a 	sub.w	r1, r1, sl
 8000444:	b2bf      	uxth	r7, r7
 8000446:	fbb1 f0fe 	udiv	r0, r1, lr
 800044a:	fb0e 1110 	mls	r1, lr, r0, r1
 800044e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000452:	fb00 f808 	mul.w	r8, r0, r8
 8000456:	45b8      	cmp	r8, r7
 8000458:	d907      	bls.n	800046a <__udivmoddi4+0x24a>
 800045a:	19e7      	adds	r7, r4, r7
 800045c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000460:	d22e      	bcs.n	80004c0 <__udivmoddi4+0x2a0>
 8000462:	45b8      	cmp	r8, r7
 8000464:	d92c      	bls.n	80004c0 <__udivmoddi4+0x2a0>
 8000466:	3802      	subs	r0, #2
 8000468:	4427      	add	r7, r4
 800046a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800046e:	eba7 0708 	sub.w	r7, r7, r8
 8000472:	fba0 8902 	umull	r8, r9, r0, r2
 8000476:	454f      	cmp	r7, r9
 8000478:	46c6      	mov	lr, r8
 800047a:	4649      	mov	r1, r9
 800047c:	d31a      	bcc.n	80004b4 <__udivmoddi4+0x294>
 800047e:	d017      	beq.n	80004b0 <__udivmoddi4+0x290>
 8000480:	b15d      	cbz	r5, 800049a <__udivmoddi4+0x27a>
 8000482:	ebb3 020e 	subs.w	r2, r3, lr
 8000486:	eb67 0701 	sbc.w	r7, r7, r1
 800048a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800048e:	40f2      	lsrs	r2, r6
 8000490:	ea4c 0202 	orr.w	r2, ip, r2
 8000494:	40f7      	lsrs	r7, r6
 8000496:	e9c5 2700 	strd	r2, r7, [r5]
 800049a:	2600      	movs	r6, #0
 800049c:	4631      	mov	r1, r6
 800049e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004a2:	462e      	mov	r6, r5
 80004a4:	4628      	mov	r0, r5
 80004a6:	e70b      	b.n	80002c0 <__udivmoddi4+0xa0>
 80004a8:	4606      	mov	r6, r0
 80004aa:	e6e9      	b.n	8000280 <__udivmoddi4+0x60>
 80004ac:	4618      	mov	r0, r3
 80004ae:	e6fd      	b.n	80002ac <__udivmoddi4+0x8c>
 80004b0:	4543      	cmp	r3, r8
 80004b2:	d2e5      	bcs.n	8000480 <__udivmoddi4+0x260>
 80004b4:	ebb8 0e02 	subs.w	lr, r8, r2
 80004b8:	eb69 0104 	sbc.w	r1, r9, r4
 80004bc:	3801      	subs	r0, #1
 80004be:	e7df      	b.n	8000480 <__udivmoddi4+0x260>
 80004c0:	4608      	mov	r0, r1
 80004c2:	e7d2      	b.n	800046a <__udivmoddi4+0x24a>
 80004c4:	4660      	mov	r0, ip
 80004c6:	e78d      	b.n	80003e4 <__udivmoddi4+0x1c4>
 80004c8:	4681      	mov	r9, r0
 80004ca:	e7b9      	b.n	8000440 <__udivmoddi4+0x220>
 80004cc:	4666      	mov	r6, ip
 80004ce:	e775      	b.n	80003bc <__udivmoddi4+0x19c>
 80004d0:	4630      	mov	r0, r6
 80004d2:	e74a      	b.n	800036a <__udivmoddi4+0x14a>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	4439      	add	r1, r7
 80004da:	e713      	b.n	8000304 <__udivmoddi4+0xe4>
 80004dc:	3802      	subs	r0, #2
 80004de:	443c      	add	r4, r7
 80004e0:	e724      	b.n	800032c <__udivmoddi4+0x10c>
 80004e2:	bf00      	nop

080004e4 <__aeabi_idiv0>:
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop

080004e8 <initqueue>:

#include <customqueue.h>



void initqueue(queueTaskHandle * queue){
 80004e8:	b480      	push	{r7}
 80004ea:	b083      	sub	sp, #12
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	6078      	str	r0, [r7, #4]
	queue->front = queue->rear = -1;
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	f04f 32ff 	mov.w	r2, #4294967295
 80004f6:	619a      	str	r2, [r3, #24]
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	699a      	ldr	r2, [r3, #24]
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	615a      	str	r2, [r3, #20]
}
 8000500:	bf00      	nop
 8000502:	370c      	adds	r7, #12
 8000504:	46bd      	mov	sp, r7
 8000506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050a:	4770      	bx	lr

0800050c <enqueue>:

queueStatus_t enqueue(queueTaskHandle * queue, TaskHandle_t task){
 800050c:	b480      	push	{r7}
 800050e:	b083      	sub	sp, #12
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
 8000514:	6039      	str	r1, [r7, #0]
	if((queue->rear == MAX-1 && queue->front == 0) || (queue->rear+1 == queue->front)){
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	699b      	ldr	r3, [r3, #24]
 800051a:	2b04      	cmp	r3, #4
 800051c:	d103      	bne.n	8000526 <enqueue+0x1a>
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	695b      	ldr	r3, [r3, #20]
 8000522:	2b00      	cmp	r3, #0
 8000524:	d006      	beq.n	8000534 <enqueue+0x28>
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	699b      	ldr	r3, [r3, #24]
 800052a:	1c5a      	adds	r2, r3, #1
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	695b      	ldr	r3, [r3, #20]
 8000530:	429a      	cmp	r2, r3
 8000532:	d101      	bne.n	8000538 <enqueue+0x2c>
		return ARRAY_IS_FULL;
 8000534:	2355      	movs	r3, #85	; 0x55
 8000536:	e01b      	b.n	8000570 <enqueue+0x64>
	}

	if(queue->rear == MAX-1){
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	699b      	ldr	r3, [r3, #24]
 800053c:	2b04      	cmp	r3, #4
 800053e:	d103      	bne.n	8000548 <enqueue+0x3c>
		queue->rear = 0;
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	2200      	movs	r2, #0
 8000544:	619a      	str	r2, [r3, #24]
 8000546:	e004      	b.n	8000552 <enqueue+0x46>
	}else{
	queue->rear = queue->rear+1;
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	699b      	ldr	r3, [r3, #24]
 800054c:	1c5a      	adds	r2, r3, #1
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	619a      	str	r2, [r3, #24]
	}
	queue->arr[queue->rear] = task;
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	699a      	ldr	r2, [r3, #24]
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	6839      	ldr	r1, [r7, #0]
 800055a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

	if(queue->front == -1){
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	695b      	ldr	r3, [r3, #20]
 8000562:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000566:	d102      	bne.n	800056e <enqueue+0x62>
		queue->front = 0;
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	2200      	movs	r2, #0
 800056c:	615a      	str	r2, [r3, #20]
	}
	return ARRAY_OPERATION_SUCCESSFUL;
 800056e:	2357      	movs	r3, #87	; 0x57
}
 8000570:	4618      	mov	r0, r3
 8000572:	370c      	adds	r7, #12
 8000574:	46bd      	mov	sp, r7
 8000576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057a:	4770      	bx	lr

0800057c <dequeue>:


queueStatus_t dequeue(queueTaskHandle *queue){
 800057c:	b580      	push	{r7, lr}
 800057e:	b082      	sub	sp, #8
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
	if(queue->front == -1){
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	695b      	ldr	r3, [r3, #20]
 8000588:	f1b3 3fff 	cmp.w	r3, #4294967295
 800058c:	d101      	bne.n	8000592 <dequeue+0x16>
		return ARRAY_IS_EMPTY;
 800058e:	2356      	movs	r3, #86	; 0x56
 8000590:	e01d      	b.n	80005ce <dequeue+0x52>
	}
	queue->arr[queue->front] = 0;
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	695a      	ldr	r2, [r3, #20]
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	2100      	movs	r1, #0
 800059a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	if(queue->front == queue->rear){
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	695a      	ldr	r2, [r3, #20]
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	699b      	ldr	r3, [r3, #24]
 80005a6:	429a      	cmp	r2, r3
 80005a8:	d103      	bne.n	80005b2 <dequeue+0x36>
		initqueue(queue);
 80005aa:	6878      	ldr	r0, [r7, #4]
 80005ac:	f7ff ff9c 	bl	80004e8 <initqueue>
 80005b0:	e00c      	b.n	80005cc <dequeue+0x50>
	}
	else{
		if(queue->front == MAX-1){
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	695b      	ldr	r3, [r3, #20]
 80005b6:	2b04      	cmp	r3, #4
 80005b8:	d103      	bne.n	80005c2 <dequeue+0x46>
			queue->front = 0;
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	2200      	movs	r2, #0
 80005be:	615a      	str	r2, [r3, #20]
 80005c0:	e004      	b.n	80005cc <dequeue+0x50>
		}else{
		(queue->front)++;
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	695b      	ldr	r3, [r3, #20]
 80005c6:	1c5a      	adds	r2, r3, #1
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	615a      	str	r2, [r3, #20]
		}
	}
	return ARRAY_OPERATION_SUCCESSFUL;
 80005cc:	2357      	movs	r3, #87	; 0x57
}
 80005ce:	4618      	mov	r0, r3
 80005d0:	3708      	adds	r7, #8
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bd80      	pop	{r7, pc}
	...

080005d8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005d8:	b480      	push	{r7}
 80005da:	b085      	sub	sp, #20
 80005dc:	af00      	add	r7, sp, #0
 80005de:	60f8      	str	r0, [r7, #12]
 80005e0:	60b9      	str	r1, [r7, #8]
 80005e2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005e4:	68fb      	ldr	r3, [r7, #12]
 80005e6:	4a07      	ldr	r2, [pc, #28]	; (8000604 <vApplicationGetIdleTaskMemory+0x2c>)
 80005e8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005ea:	68bb      	ldr	r3, [r7, #8]
 80005ec:	4a06      	ldr	r2, [pc, #24]	; (8000608 <vApplicationGetIdleTaskMemory+0x30>)
 80005ee:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	2280      	movs	r2, #128	; 0x80
 80005f4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005f6:	bf00      	nop
 80005f8:	3714      	adds	r7, #20
 80005fa:	46bd      	mov	sp, r7
 80005fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000600:	4770      	bx	lr
 8000602:	bf00      	nop
 8000604:	2000002c 	.word	0x2000002c
 8000608:	20000080 	.word	0x20000080

0800060c <mySemaphoreTake>:

UBaseType_t save_prio;
TaskHandle_t lasthandle;

/* USER CODE BEGIN 0 */
void mySemaphoreTake(SemaphoreHandle_t xSemaphore, TaskHandle_t taskHandle, queueTaskHandle *queue){
 800060c:	b580      	push	{r7, lr}
 800060e:	b084      	sub	sp, #16
 8000610:	af00      	add	r7, sp, #0
 8000612:	60f8      	str	r0, [r7, #12]
 8000614:	60b9      	str	r1, [r7, #8]
 8000616:	607a      	str	r2, [r7, #4]
	taskENTER_CRITICAL();
 8000618:	f003 ff54 	bl	80044c4 <vPortEnterCritical>
	while(taskHandle == NULL && queue == NULL){
 800061c:	68bb      	ldr	r3, [r7, #8]
 800061e:	2b00      	cmp	r3, #0
 8000620:	d102      	bne.n	8000628 <mySemaphoreTake+0x1c>
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	2b00      	cmp	r3, #0
 8000626:	d0f9      	beq.n	800061c <mySemaphoreTake+0x10>
	}

	//save_prio = uxTaskPriorityGet(taskHandle);
	lasthandle = xTaskGetCurrentTaskHandle();
 8000628:	f003 fbec 	bl	8003e04 <xTaskGetCurrentTaskHandle>
 800062c:	4603      	mov	r3, r0
 800062e:	4a0e      	ldr	r2, [pc, #56]	; (8000668 <mySemaphoreTake+0x5c>)
 8000630:	6013      	str	r3, [r2, #0]
	if(enqueue(queue, taskHandle) != ARRAY_IS_FULL){
 8000632:	68b9      	ldr	r1, [r7, #8]
 8000634:	6878      	ldr	r0, [r7, #4]
 8000636:	f7ff ff69 	bl	800050c <enqueue>
 800063a:	4603      	mov	r3, r0
 800063c:	2b55      	cmp	r3, #85	; 0x55
 800063e:	d00a      	beq.n	8000656 <mySemaphoreTake+0x4a>
		vTaskPrioritySet(queue->arr[queue->front], 4);
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	695a      	ldr	r2, [r3, #20]
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800064a:	2104      	movs	r1, #4
 800064c:	4618      	mov	r0, r3
 800064e:	f002 ff31 	bl	80034b4 <vTaskPrioritySet>
		taskEXIT_CRITICAL();
 8000652:	f003 ff67 	bl	8004524 <vPortExitCritical>
	}
	xSemaphoreTake(xSemaphore, portMAX_DELAY);
 8000656:	f04f 31ff 	mov.w	r1, #4294967295
 800065a:	68f8      	ldr	r0, [r7, #12]
 800065c:	f002 fb54 	bl	8002d08 <xQueueSemaphoreTake>

}
 8000660:	bf00      	nop
 8000662:	3710      	adds	r7, #16
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}
 8000668:	20003fe8 	.word	0x20003fe8

0800066c <mySemaphoreGive>:

void mySemaphoreGive(SemaphoreHandle_t xSemaphore,  queueTaskHandle* queue){
 800066c:	b580      	push	{r7, lr}
 800066e:	b084      	sub	sp, #16
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
 8000674:	6039      	str	r1, [r7, #0]
	taskENTER_CRITICAL();
 8000676:	f003 ff25 	bl	80044c4 <vPortEnterCritical>
	static uint32_t init = 0;
	if(init == 0){
 800067a:	4b1d      	ldr	r3, [pc, #116]	; (80006f0 <mySemaphoreGive+0x84>)
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	2b00      	cmp	r3, #0
 8000680:	d109      	bne.n	8000696 <mySemaphoreGive+0x2a>
		xSemaphoreGive(xSemaphore);
 8000682:	2300      	movs	r3, #0
 8000684:	2200      	movs	r2, #0
 8000686:	2100      	movs	r1, #0
 8000688:	6878      	ldr	r0, [r7, #4]
 800068a:	f002 fa3f 	bl	8002b0c <xQueueGenericSend>
		init = 1;
 800068e:	4b18      	ldr	r3, [pc, #96]	; (80006f0 <mySemaphoreGive+0x84>)
 8000690:	2201      	movs	r2, #1
 8000692:	601a      	str	r2, [r3, #0]
		return;
 8000694:	e029      	b.n	80006ea <mySemaphoreGive+0x7e>
	}
	if(lasthandle == xTaskGetCurrentTaskHandle()){
 8000696:	f003 fbb5 	bl	8003e04 <xTaskGetCurrentTaskHandle>
 800069a:	4602      	mov	r2, r0
 800069c:	4b15      	ldr	r3, [pc, #84]	; (80006f4 <mySemaphoreGive+0x88>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	429a      	cmp	r2, r3
 80006a2:	d122      	bne.n	80006ea <mySemaphoreGive+0x7e>
		uint32_t prio;
		if(dequeue(queue) != ARRAY_IS_EMPTY){
 80006a4:	6838      	ldr	r0, [r7, #0]
 80006a6:	f7ff ff69 	bl	800057c <dequeue>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b56      	cmp	r3, #86	; 0x56
 80006ae:	d014      	beq.n	80006da <mySemaphoreGive+0x6e>
			if(xTaskGetCurrentTaskHandle() == HPT_Handler) {
 80006b0:	f003 fba8 	bl	8003e04 <xTaskGetCurrentTaskHandle>
 80006b4:	4602      	mov	r2, r0
 80006b6:	4b10      	ldr	r3, [pc, #64]	; (80006f8 <mySemaphoreGive+0x8c>)
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	429a      	cmp	r2, r3
 80006bc:	d102      	bne.n	80006c4 <mySemaphoreGive+0x58>
				prio = 3;
 80006be:	2303      	movs	r3, #3
 80006c0:	60fb      	str	r3, [r7, #12]
 80006c2:	e001      	b.n	80006c8 <mySemaphoreGive+0x5c>
			}
			else prio = 1;
 80006c4:	2301      	movs	r3, #1
 80006c6:	60fb      	str	r3, [r7, #12]
			vTaskPrioritySet(queue->arr[queue->front], prio);
 80006c8:	683b      	ldr	r3, [r7, #0]
 80006ca:	695a      	ldr	r2, [r3, #20]
 80006cc:	683b      	ldr	r3, [r7, #0]
 80006ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80006d2:	68f9      	ldr	r1, [r7, #12]
 80006d4:	4618      	mov	r0, r3
 80006d6:	f002 feed 	bl	80034b4 <vTaskPrioritySet>
		}
		taskEXIT_CRITICAL();
 80006da:	f003 ff23 	bl	8004524 <vPortExitCritical>
		xSemaphoreGive(xSemaphore);
 80006de:	2300      	movs	r3, #0
 80006e0:	2200      	movs	r2, #0
 80006e2:	2100      	movs	r1, #0
 80006e4:	6878      	ldr	r0, [r7, #4]
 80006e6:	f002 fa11 	bl	8002b0c <xQueueGenericSend>
	}
}
 80006ea:	3710      	adds	r7, #16
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	20000280 	.word	0x20000280
 80006f4:	20003fe8 	.word	0x20003fe8
 80006f8:	20003fdc 	.word	0x20003fdc

080006fc <print_function>:


void print_function(char *str){
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b082      	sub	sp, #8
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]

	HAL_Delay(5000);
 8000704:	f241 3088 	movw	r0, #5000	; 0x1388
 8000708:	f000 fba2 	bl	8000e50 <HAL_Delay>
	HAL_UART_Transmit(&huart2, (uint8_t *) str, strlen (str), HAL_MAX_DELAY);
 800070c:	6878      	ldr	r0, [r7, #4]
 800070e:	f7ff fd67 	bl	80001e0 <strlen>
 8000712:	4603      	mov	r3, r0
 8000714:	b29a      	uxth	r2, r3
 8000716:	f04f 33ff 	mov.w	r3, #4294967295
 800071a:	6879      	ldr	r1, [r7, #4]
 800071c:	4803      	ldr	r0, [pc, #12]	; (800072c <print_function+0x30>)
 800071e:	f001 fdae 	bl	800227e <HAL_UART_Transmit>

}
 8000722:	bf00      	nop
 8000724:	3708      	adds	r7, #8
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	20003ff0 	.word	0x20003ff0

08000730 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b082      	sub	sp, #8
 8000734:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000736:	f000 fb49 	bl	8000dcc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800073a:	f000 f861 	bl	8000800 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */

  initqueue(&TaskHandleList);
 800073e:	4822      	ldr	r0, [pc, #136]	; (80007c8 <main+0x98>)
 8000740:	f7ff fed2 	bl	80004e8 <initqueue>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000744:	f000 f8f0 	bl	8000928 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000748:	f000 f8c4 	bl	80008d4 <MX_USART2_UART_Init>



  xTaskCreate(HPT_Task, "HPT", 128, (void *)&TaskHandleList, 3, &HPT_Handler);
 800074c:	4b1f      	ldr	r3, [pc, #124]	; (80007cc <main+0x9c>)
 800074e:	9301      	str	r3, [sp, #4]
 8000750:	2303      	movs	r3, #3
 8000752:	9300      	str	r3, [sp, #0]
 8000754:	4b1c      	ldr	r3, [pc, #112]	; (80007c8 <main+0x98>)
 8000756:	2280      	movs	r2, #128	; 0x80
 8000758:	491d      	ldr	r1, [pc, #116]	; (80007d0 <main+0xa0>)
 800075a:	481e      	ldr	r0, [pc, #120]	; (80007d4 <main+0xa4>)
 800075c:	f002 fd3f 	bl	80031de <xTaskCreate>
  xTaskCreate(MPT_Task, "MPT", 128, NULL, 2, &MPT_Handler);
 8000760:	4b1d      	ldr	r3, [pc, #116]	; (80007d8 <main+0xa8>)
 8000762:	9301      	str	r3, [sp, #4]
 8000764:	2302      	movs	r3, #2
 8000766:	9300      	str	r3, [sp, #0]
 8000768:	2300      	movs	r3, #0
 800076a:	2280      	movs	r2, #128	; 0x80
 800076c:	491b      	ldr	r1, [pc, #108]	; (80007dc <main+0xac>)
 800076e:	481c      	ldr	r0, [pc, #112]	; (80007e0 <main+0xb0>)
 8000770:	f002 fd35 	bl	80031de <xTaskCreate>
  xTaskCreate(LPT_Task, "LPT", 128, (void *)&TaskHandleList, 1, &LPT_Handler);
 8000774:	4b1b      	ldr	r3, [pc, #108]	; (80007e4 <main+0xb4>)
 8000776:	9301      	str	r3, [sp, #4]
 8000778:	2301      	movs	r3, #1
 800077a:	9300      	str	r3, [sp, #0]
 800077c:	4b12      	ldr	r3, [pc, #72]	; (80007c8 <main+0x98>)
 800077e:	2280      	movs	r2, #128	; 0x80
 8000780:	4919      	ldr	r1, [pc, #100]	; (80007e8 <main+0xb8>)
 8000782:	481a      	ldr	r0, [pc, #104]	; (80007ec <main+0xbc>)
 8000784:	f002 fd2b 	bl	80031de <xTaskCreate>


  BinSemaphore = xSemaphoreCreateBinary();
 8000788:	2203      	movs	r2, #3
 800078a:	2100      	movs	r1, #0
 800078c:	2001      	movs	r0, #1
 800078e:	f002 f963 	bl	8002a58 <xQueueGenericCreate>
 8000792:	4603      	mov	r3, r0
 8000794:	4a16      	ldr	r2, [pc, #88]	; (80007f0 <main+0xc0>)
 8000796:	6013      	str	r3, [r2, #0]
  if (BinSemaphore != NULL)
 8000798:	4b15      	ldr	r3, [pc, #84]	; (80007f0 <main+0xc0>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	2b00      	cmp	r3, #0
 800079e:	d006      	beq.n	80007ae <main+0x7e>
  {
	  HAL_UART_Transmit(&huart2,(uint8_t *) "Semaphore Created\n\n", 19, 1000);
 80007a0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007a4:	2213      	movs	r2, #19
 80007a6:	4913      	ldr	r1, [pc, #76]	; (80007f4 <main+0xc4>)
 80007a8:	4813      	ldr	r0, [pc, #76]	; (80007f8 <main+0xc8>)
 80007aa:	f001 fd68 	bl	800227e <HAL_UART_Transmit>
  }
  lasthandle = HPT_Handler;
 80007ae:	4b07      	ldr	r3, [pc, #28]	; (80007cc <main+0x9c>)
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	4a12      	ldr	r2, [pc, #72]	; (80007fc <main+0xcc>)
 80007b4:	6013      	str	r3, [r2, #0]
  mySemaphoreGive(BinSemaphore, &TaskHandleList);
 80007b6:	4b0e      	ldr	r3, [pc, #56]	; (80007f0 <main+0xc0>)
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	4903      	ldr	r1, [pc, #12]	; (80007c8 <main+0x98>)
 80007bc:	4618      	mov	r0, r3
 80007be:	f7ff ff55 	bl	800066c <mySemaphoreGive>
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80007c2:	f002 f825 	bl	8002810 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007c6:	e7fe      	b.n	80007c6 <main+0x96>
 80007c8:	20004034 	.word	0x20004034
 80007cc:	20003fdc 	.word	0x20003fdc
 80007d0:	08004ae8 	.word	0x08004ae8
 80007d4:	08000a05 	.word	0x08000a05
 80007d8:	20003fe4 	.word	0x20003fe4
 80007dc:	08004aec 	.word	0x08004aec
 80007e0:	08000a8d 	.word	0x08000a8d
 80007e4:	20003fd8 	.word	0x20003fd8
 80007e8:	08004af0 	.word	0x08004af0
 80007ec:	08000ac1 	.word	0x08000ac1
 80007f0:	20003fec 	.word	0x20003fec
 80007f4:	08004af4 	.word	0x08004af4
 80007f8:	20003ff0 	.word	0x20003ff0
 80007fc:	20003fe8 	.word	0x20003fe8

08000800 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b094      	sub	sp, #80	; 0x50
 8000804:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000806:	f107 0320 	add.w	r3, r7, #32
 800080a:	2230      	movs	r2, #48	; 0x30
 800080c:	2100      	movs	r1, #0
 800080e:	4618      	mov	r0, r3
 8000810:	f004 f956 	bl	8004ac0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000814:	f107 030c 	add.w	r3, r7, #12
 8000818:	2200      	movs	r2, #0
 800081a:	601a      	str	r2, [r3, #0]
 800081c:	605a      	str	r2, [r3, #4]
 800081e:	609a      	str	r2, [r3, #8]
 8000820:	60da      	str	r2, [r3, #12]
 8000822:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000824:	2300      	movs	r3, #0
 8000826:	60bb      	str	r3, [r7, #8]
 8000828:	4b28      	ldr	r3, [pc, #160]	; (80008cc <SystemClock_Config+0xcc>)
 800082a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800082c:	4a27      	ldr	r2, [pc, #156]	; (80008cc <SystemClock_Config+0xcc>)
 800082e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000832:	6413      	str	r3, [r2, #64]	; 0x40
 8000834:	4b25      	ldr	r3, [pc, #148]	; (80008cc <SystemClock_Config+0xcc>)
 8000836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000838:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800083c:	60bb      	str	r3, [r7, #8]
 800083e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000840:	2300      	movs	r3, #0
 8000842:	607b      	str	r3, [r7, #4]
 8000844:	4b22      	ldr	r3, [pc, #136]	; (80008d0 <SystemClock_Config+0xd0>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	4a21      	ldr	r2, [pc, #132]	; (80008d0 <SystemClock_Config+0xd0>)
 800084a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800084e:	6013      	str	r3, [r2, #0]
 8000850:	4b1f      	ldr	r3, [pc, #124]	; (80008d0 <SystemClock_Config+0xd0>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000858:	607b      	str	r3, [r7, #4]
 800085a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800085c:	2302      	movs	r3, #2
 800085e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000860:	2301      	movs	r3, #1
 8000862:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000864:	2310      	movs	r3, #16
 8000866:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000868:	2302      	movs	r3, #2
 800086a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800086c:	2300      	movs	r3, #0
 800086e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000870:	2310      	movs	r3, #16
 8000872:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000874:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000878:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800087a:	2304      	movs	r3, #4
 800087c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800087e:	2304      	movs	r3, #4
 8000880:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000882:	f107 0320 	add.w	r3, r7, #32
 8000886:	4618      	mov	r0, r3
 8000888:	f000 fd86 	bl	8001398 <HAL_RCC_OscConfig>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d001      	beq.n	8000896 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000892:	f000 f96b 	bl	8000b6c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000896:	230f      	movs	r3, #15
 8000898:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800089a:	2302      	movs	r3, #2
 800089c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800089e:	2300      	movs	r3, #0
 80008a0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008a6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008a8:	2300      	movs	r3, #0
 80008aa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80008ac:	f107 030c 	add.w	r3, r7, #12
 80008b0:	2102      	movs	r1, #2
 80008b2:	4618      	mov	r0, r3
 80008b4:	f000 ffe8 	bl	8001888 <HAL_RCC_ClockConfig>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d001      	beq.n	80008c2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80008be:	f000 f955 	bl	8000b6c <Error_Handler>
  }
}
 80008c2:	bf00      	nop
 80008c4:	3750      	adds	r7, #80	; 0x50
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	40023800 	.word	0x40023800
 80008d0:	40007000 	.word	0x40007000

080008d4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008d8:	4b11      	ldr	r3, [pc, #68]	; (8000920 <MX_USART2_UART_Init+0x4c>)
 80008da:	4a12      	ldr	r2, [pc, #72]	; (8000924 <MX_USART2_UART_Init+0x50>)
 80008dc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008de:	4b10      	ldr	r3, [pc, #64]	; (8000920 <MX_USART2_UART_Init+0x4c>)
 80008e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008e4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008e6:	4b0e      	ldr	r3, [pc, #56]	; (8000920 <MX_USART2_UART_Init+0x4c>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008ec:	4b0c      	ldr	r3, [pc, #48]	; (8000920 <MX_USART2_UART_Init+0x4c>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008f2:	4b0b      	ldr	r3, [pc, #44]	; (8000920 <MX_USART2_UART_Init+0x4c>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008f8:	4b09      	ldr	r3, [pc, #36]	; (8000920 <MX_USART2_UART_Init+0x4c>)
 80008fa:	220c      	movs	r2, #12
 80008fc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008fe:	4b08      	ldr	r3, [pc, #32]	; (8000920 <MX_USART2_UART_Init+0x4c>)
 8000900:	2200      	movs	r2, #0
 8000902:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000904:	4b06      	ldr	r3, [pc, #24]	; (8000920 <MX_USART2_UART_Init+0x4c>)
 8000906:	2200      	movs	r2, #0
 8000908:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800090a:	4805      	ldr	r0, [pc, #20]	; (8000920 <MX_USART2_UART_Init+0x4c>)
 800090c:	f001 fc6a 	bl	80021e4 <HAL_UART_Init>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d001      	beq.n	800091a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000916:	f000 f929 	bl	8000b6c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800091a:	bf00      	nop
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	20003ff0 	.word	0x20003ff0
 8000924:	40004400 	.word	0x40004400

08000928 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b08a      	sub	sp, #40	; 0x28
 800092c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800092e:	f107 0314 	add.w	r3, r7, #20
 8000932:	2200      	movs	r2, #0
 8000934:	601a      	str	r2, [r3, #0]
 8000936:	605a      	str	r2, [r3, #4]
 8000938:	609a      	str	r2, [r3, #8]
 800093a:	60da      	str	r2, [r3, #12]
 800093c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800093e:	2300      	movs	r3, #0
 8000940:	613b      	str	r3, [r7, #16]
 8000942:	4b2d      	ldr	r3, [pc, #180]	; (80009f8 <MX_GPIO_Init+0xd0>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000946:	4a2c      	ldr	r2, [pc, #176]	; (80009f8 <MX_GPIO_Init+0xd0>)
 8000948:	f043 0304 	orr.w	r3, r3, #4
 800094c:	6313      	str	r3, [r2, #48]	; 0x30
 800094e:	4b2a      	ldr	r3, [pc, #168]	; (80009f8 <MX_GPIO_Init+0xd0>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000952:	f003 0304 	and.w	r3, r3, #4
 8000956:	613b      	str	r3, [r7, #16]
 8000958:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800095a:	2300      	movs	r3, #0
 800095c:	60fb      	str	r3, [r7, #12]
 800095e:	4b26      	ldr	r3, [pc, #152]	; (80009f8 <MX_GPIO_Init+0xd0>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000962:	4a25      	ldr	r2, [pc, #148]	; (80009f8 <MX_GPIO_Init+0xd0>)
 8000964:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000968:	6313      	str	r3, [r2, #48]	; 0x30
 800096a:	4b23      	ldr	r3, [pc, #140]	; (80009f8 <MX_GPIO_Init+0xd0>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000972:	60fb      	str	r3, [r7, #12]
 8000974:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000976:	2300      	movs	r3, #0
 8000978:	60bb      	str	r3, [r7, #8]
 800097a:	4b1f      	ldr	r3, [pc, #124]	; (80009f8 <MX_GPIO_Init+0xd0>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097e:	4a1e      	ldr	r2, [pc, #120]	; (80009f8 <MX_GPIO_Init+0xd0>)
 8000980:	f043 0301 	orr.w	r3, r3, #1
 8000984:	6313      	str	r3, [r2, #48]	; 0x30
 8000986:	4b1c      	ldr	r3, [pc, #112]	; (80009f8 <MX_GPIO_Init+0xd0>)
 8000988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098a:	f003 0301 	and.w	r3, r3, #1
 800098e:	60bb      	str	r3, [r7, #8]
 8000990:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000992:	2300      	movs	r3, #0
 8000994:	607b      	str	r3, [r7, #4]
 8000996:	4b18      	ldr	r3, [pc, #96]	; (80009f8 <MX_GPIO_Init+0xd0>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099a:	4a17      	ldr	r2, [pc, #92]	; (80009f8 <MX_GPIO_Init+0xd0>)
 800099c:	f043 0302 	orr.w	r3, r3, #2
 80009a0:	6313      	str	r3, [r2, #48]	; 0x30
 80009a2:	4b15      	ldr	r3, [pc, #84]	; (80009f8 <MX_GPIO_Init+0xd0>)
 80009a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a6:	f003 0302 	and.w	r3, r3, #2
 80009aa:	607b      	str	r3, [r7, #4]
 80009ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80009ae:	2200      	movs	r2, #0
 80009b0:	2120      	movs	r1, #32
 80009b2:	4812      	ldr	r0, [pc, #72]	; (80009fc <MX_GPIO_Init+0xd4>)
 80009b4:	f000 fcd6 	bl	8001364 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80009be:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80009c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c4:	2300      	movs	r3, #0
 80009c6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009c8:	f107 0314 	add.w	r3, r7, #20
 80009cc:	4619      	mov	r1, r3
 80009ce:	480c      	ldr	r0, [pc, #48]	; (8000a00 <MX_GPIO_Init+0xd8>)
 80009d0:	f000 fb44 	bl	800105c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80009d4:	2320      	movs	r3, #32
 80009d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009d8:	2301      	movs	r3, #1
 80009da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009dc:	2300      	movs	r3, #0
 80009de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e0:	2300      	movs	r3, #0
 80009e2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80009e4:	f107 0314 	add.w	r3, r7, #20
 80009e8:	4619      	mov	r1, r3
 80009ea:	4804      	ldr	r0, [pc, #16]	; (80009fc <MX_GPIO_Init+0xd4>)
 80009ec:	f000 fb36 	bl	800105c <HAL_GPIO_Init>

}
 80009f0:	bf00      	nop
 80009f2:	3728      	adds	r7, #40	; 0x28
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	40023800 	.word	0x40023800
 80009fc:	40020000 	.word	0x40020000
 8000a00:	40020800 	.word	0x40020800

08000a04 <HPT_Task>:

/* USER CODE BEGIN 4 */
void HPT_Task (void *argument)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b086      	sub	sp, #24
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
	queueTaskHandle *queue = (queueTaskHandle *)argument;
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	617b      	str	r3, [r7, #20]
	char *strtosend = "IN HPT=====Semaphore released\r\n";
 8000a10:	4b18      	ldr	r3, [pc, #96]	; (8000a74 <HPT_Task+0x70>)
 8000a12:	613b      	str	r3, [r7, #16]
	while (1)
	{
		char *str = "Entered HPT and About to take Semaphore\r\n";
 8000a14:	4b18      	ldr	r3, [pc, #96]	; (8000a78 <HPT_Task+0x74>)
 8000a16:	60fb      	str	r3, [r7, #12]
		HAL_UART_Transmit(&huart2,(uint8_t *) str, strlen (str), HAL_MAX_DELAY);
 8000a18:	68f8      	ldr	r0, [r7, #12]
 8000a1a:	f7ff fbe1 	bl	80001e0 <strlen>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	b29a      	uxth	r2, r3
 8000a22:	f04f 33ff 	mov.w	r3, #4294967295
 8000a26:	68f9      	ldr	r1, [r7, #12]
 8000a28:	4814      	ldr	r0, [pc, #80]	; (8000a7c <HPT_Task+0x78>)
 8000a2a:	f001 fc28 	bl	800227e <HAL_UART_Transmit>

		mySemaphoreTake(BinSemaphore, HPT_Handler, queue);
 8000a2e:	4b14      	ldr	r3, [pc, #80]	; (8000a80 <HPT_Task+0x7c>)
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	4a14      	ldr	r2, [pc, #80]	; (8000a84 <HPT_Task+0x80>)
 8000a34:	6811      	ldr	r1, [r2, #0]
 8000a36:	697a      	ldr	r2, [r7, #20]
 8000a38:	4618      	mov	r0, r3
 8000a3a:	f7ff fde7 	bl	800060c <mySemaphoreTake>
		print_function(strtosend);
 8000a3e:	6938      	ldr	r0, [r7, #16]
 8000a40:	f7ff fe5c 	bl	80006fc <print_function>
		mySemaphoreGive(BinSemaphore, queue);
 8000a44:	4b0e      	ldr	r3, [pc, #56]	; (8000a80 <HPT_Task+0x7c>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	6979      	ldr	r1, [r7, #20]
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f7ff fe0e 	bl	800066c <mySemaphoreGive>

		char *str2 = "Leaving HPT\r\n\n";
 8000a50:	4b0d      	ldr	r3, [pc, #52]	; (8000a88 <HPT_Task+0x84>)
 8000a52:	60bb      	str	r3, [r7, #8]
		HAL_UART_Transmit(&huart2,(uint8_t *) str2, strlen (str2), HAL_MAX_DELAY);
 8000a54:	68b8      	ldr	r0, [r7, #8]
 8000a56:	f7ff fbc3 	bl	80001e0 <strlen>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	b29a      	uxth	r2, r3
 8000a5e:	f04f 33ff 	mov.w	r3, #4294967295
 8000a62:	68b9      	ldr	r1, [r7, #8]
 8000a64:	4805      	ldr	r0, [pc, #20]	; (8000a7c <HPT_Task+0x78>)
 8000a66:	f001 fc0a 	bl	800227e <HAL_UART_Transmit>

		vTaskDelay(750);
 8000a6a:	f240 20ee 	movw	r0, #750	; 0x2ee
 8000a6e:	f002 fced 	bl	800344c <vTaskDelay>
	{
 8000a72:	e7cf      	b.n	8000a14 <HPT_Task+0x10>
 8000a74:	08004b08 	.word	0x08004b08
 8000a78:	08004b28 	.word	0x08004b28
 8000a7c:	20003ff0 	.word	0x20003ff0
 8000a80:	20003fec 	.word	0x20003fec
 8000a84:	20003fdc 	.word	0x20003fdc
 8000a88:	08004b54 	.word	0x08004b54

08000a8c <MPT_Task>:
	}
}


void MPT_Task (void *argument)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b084      	sub	sp, #16
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
	while (1)
	{
		char *str = "IN MPT*********No Semaphore here\r\n\n";
 8000a94:	4b08      	ldr	r3, [pc, #32]	; (8000ab8 <MPT_Task+0x2c>)
 8000a96:	60fb      	str	r3, [r7, #12]
		HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen (str), HAL_MAX_DELAY);
 8000a98:	68f8      	ldr	r0, [r7, #12]
 8000a9a:	f7ff fba1 	bl	80001e0 <strlen>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	b29a      	uxth	r2, r3
 8000aa2:	f04f 33ff 	mov.w	r3, #4294967295
 8000aa6:	68f9      	ldr	r1, [r7, #12]
 8000aa8:	4804      	ldr	r0, [pc, #16]	; (8000abc <MPT_Task+0x30>)
 8000aaa:	f001 fbe8 	bl	800227e <HAL_UART_Transmit>
		vTaskDelay(2000);
 8000aae:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000ab2:	f002 fccb 	bl	800344c <vTaskDelay>
	{
 8000ab6:	e7ed      	b.n	8000a94 <MPT_Task+0x8>
 8000ab8:	08004b64 	.word	0x08004b64
 8000abc:	20003ff0 	.word	0x20003ff0

08000ac0 <LPT_Task>:
	}
}

void LPT_Task (void *argument)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b086      	sub	sp, #24
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
	queueTaskHandle *queue = (queueTaskHandle *)argument;
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	617b      	str	r3, [r7, #20]
	char *strtosend = "IN LPT.........Semaphore released\r\n";
 8000acc:	4b18      	ldr	r3, [pc, #96]	; (8000b30 <LPT_Task+0x70>)
 8000ace:	613b      	str	r3, [r7, #16]
	while (1)
	{
		char *str = "Entered LPT and About to take Semaphore\r\n";
 8000ad0:	4b18      	ldr	r3, [pc, #96]	; (8000b34 <LPT_Task+0x74>)
 8000ad2:	60fb      	str	r3, [r7, #12]
		HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen (str), HAL_MAX_DELAY);
 8000ad4:	68f8      	ldr	r0, [r7, #12]
 8000ad6:	f7ff fb83 	bl	80001e0 <strlen>
 8000ada:	4603      	mov	r3, r0
 8000adc:	b29a      	uxth	r2, r3
 8000ade:	f04f 33ff 	mov.w	r3, #4294967295
 8000ae2:	68f9      	ldr	r1, [r7, #12]
 8000ae4:	4814      	ldr	r0, [pc, #80]	; (8000b38 <LPT_Task+0x78>)
 8000ae6:	f001 fbca 	bl	800227e <HAL_UART_Transmit>

		mySemaphoreTake(BinSemaphore, LPT_Handler, queue);
 8000aea:	4b14      	ldr	r3, [pc, #80]	; (8000b3c <LPT_Task+0x7c>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	4a14      	ldr	r2, [pc, #80]	; (8000b40 <LPT_Task+0x80>)
 8000af0:	6811      	ldr	r1, [r2, #0]
 8000af2:	697a      	ldr	r2, [r7, #20]
 8000af4:	4618      	mov	r0, r3
 8000af6:	f7ff fd89 	bl	800060c <mySemaphoreTake>
		print_function(strtosend);
 8000afa:	6938      	ldr	r0, [r7, #16]
 8000afc:	f7ff fdfe 	bl	80006fc <print_function>
		mySemaphoreGive(BinSemaphore, queue);
 8000b00:	4b0e      	ldr	r3, [pc, #56]	; (8000b3c <LPT_Task+0x7c>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	6979      	ldr	r1, [r7, #20]
 8000b06:	4618      	mov	r0, r3
 8000b08:	f7ff fdb0 	bl	800066c <mySemaphoreGive>

		char *str2 = "Leaving LPT\r\n\n";
 8000b0c:	4b0d      	ldr	r3, [pc, #52]	; (8000b44 <LPT_Task+0x84>)
 8000b0e:	60bb      	str	r3, [r7, #8]
		HAL_UART_Transmit(&huart2, (uint8_t *)str2, strlen (str2), HAL_MAX_DELAY);
 8000b10:	68b8      	ldr	r0, [r7, #8]
 8000b12:	f7ff fb65 	bl	80001e0 <strlen>
 8000b16:	4603      	mov	r3, r0
 8000b18:	b29a      	uxth	r2, r3
 8000b1a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b1e:	68b9      	ldr	r1, [r7, #8]
 8000b20:	4805      	ldr	r0, [pc, #20]	; (8000b38 <LPT_Task+0x78>)
 8000b22:	f001 fbac 	bl	800227e <HAL_UART_Transmit>

		vTaskDelay(1000);
 8000b26:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b2a:	f002 fc8f 	bl	800344c <vTaskDelay>
	{
 8000b2e:	e7cf      	b.n	8000ad0 <LPT_Task+0x10>
 8000b30:	08004b88 	.word	0x08004b88
 8000b34:	08004bac 	.word	0x08004bac
 8000b38:	20003ff0 	.word	0x20003ff0
 8000b3c:	20003fec 	.word	0x20003fec
 8000b40:	20003fd8 	.word	0x20003fd8
 8000b44:	08004bd8 	.word	0x08004bd8

08000b48 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	4a04      	ldr	r2, [pc, #16]	; (8000b68 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b56:	4293      	cmp	r3, r2
 8000b58:	d101      	bne.n	8000b5e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b5a:	f000 f959 	bl	8000e10 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b5e:	bf00      	nop
 8000b60:	3708      	adds	r7, #8
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	40000800 	.word	0x40000800

08000b6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b70:	b672      	cpsid	i
}
 8000b72:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b74:	e7fe      	b.n	8000b74 <Error_Handler+0x8>
	...

08000b78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b082      	sub	sp, #8
 8000b7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b7e:	2300      	movs	r3, #0
 8000b80:	607b      	str	r3, [r7, #4]
 8000b82:	4b12      	ldr	r3, [pc, #72]	; (8000bcc <HAL_MspInit+0x54>)
 8000b84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b86:	4a11      	ldr	r2, [pc, #68]	; (8000bcc <HAL_MspInit+0x54>)
 8000b88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b8c:	6453      	str	r3, [r2, #68]	; 0x44
 8000b8e:	4b0f      	ldr	r3, [pc, #60]	; (8000bcc <HAL_MspInit+0x54>)
 8000b90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b96:	607b      	str	r3, [r7, #4]
 8000b98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	603b      	str	r3, [r7, #0]
 8000b9e:	4b0b      	ldr	r3, [pc, #44]	; (8000bcc <HAL_MspInit+0x54>)
 8000ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ba2:	4a0a      	ldr	r2, [pc, #40]	; (8000bcc <HAL_MspInit+0x54>)
 8000ba4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ba8:	6413      	str	r3, [r2, #64]	; 0x40
 8000baa:	4b08      	ldr	r3, [pc, #32]	; (8000bcc <HAL_MspInit+0x54>)
 8000bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bb2:	603b      	str	r3, [r7, #0]
 8000bb4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	210f      	movs	r1, #15
 8000bba:	f06f 0001 	mvn.w	r0, #1
 8000bbe:	f000 fa23 	bl	8001008 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bc2:	bf00      	nop
 8000bc4:	3708      	adds	r7, #8
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	40023800 	.word	0x40023800

08000bd0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b08a      	sub	sp, #40	; 0x28
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd8:	f107 0314 	add.w	r3, r7, #20
 8000bdc:	2200      	movs	r2, #0
 8000bde:	601a      	str	r2, [r3, #0]
 8000be0:	605a      	str	r2, [r3, #4]
 8000be2:	609a      	str	r2, [r3, #8]
 8000be4:	60da      	str	r2, [r3, #12]
 8000be6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	4a19      	ldr	r2, [pc, #100]	; (8000c54 <HAL_UART_MspInit+0x84>)
 8000bee:	4293      	cmp	r3, r2
 8000bf0:	d12b      	bne.n	8000c4a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	613b      	str	r3, [r7, #16]
 8000bf6:	4b18      	ldr	r3, [pc, #96]	; (8000c58 <HAL_UART_MspInit+0x88>)
 8000bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bfa:	4a17      	ldr	r2, [pc, #92]	; (8000c58 <HAL_UART_MspInit+0x88>)
 8000bfc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c00:	6413      	str	r3, [r2, #64]	; 0x40
 8000c02:	4b15      	ldr	r3, [pc, #84]	; (8000c58 <HAL_UART_MspInit+0x88>)
 8000c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c0a:	613b      	str	r3, [r7, #16]
 8000c0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c0e:	2300      	movs	r3, #0
 8000c10:	60fb      	str	r3, [r7, #12]
 8000c12:	4b11      	ldr	r3, [pc, #68]	; (8000c58 <HAL_UART_MspInit+0x88>)
 8000c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c16:	4a10      	ldr	r2, [pc, #64]	; (8000c58 <HAL_UART_MspInit+0x88>)
 8000c18:	f043 0301 	orr.w	r3, r3, #1
 8000c1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c1e:	4b0e      	ldr	r3, [pc, #56]	; (8000c58 <HAL_UART_MspInit+0x88>)
 8000c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c22:	f003 0301 	and.w	r3, r3, #1
 8000c26:	60fb      	str	r3, [r7, #12]
 8000c28:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000c2a:	230c      	movs	r3, #12
 8000c2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c2e:	2302      	movs	r3, #2
 8000c30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c32:	2300      	movs	r3, #0
 8000c34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c36:	2303      	movs	r3, #3
 8000c38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c3a:	2307      	movs	r3, #7
 8000c3c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c3e:	f107 0314 	add.w	r3, r7, #20
 8000c42:	4619      	mov	r1, r3
 8000c44:	4805      	ldr	r0, [pc, #20]	; (8000c5c <HAL_UART_MspInit+0x8c>)
 8000c46:	f000 fa09 	bl	800105c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c4a:	bf00      	nop
 8000c4c:	3728      	adds	r7, #40	; 0x28
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	40004400 	.word	0x40004400
 8000c58:	40023800 	.word	0x40023800
 8000c5c:	40020000 	.word	0x40020000

08000c60 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b08c      	sub	sp, #48	; 0x30
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 8000c70:	2200      	movs	r2, #0
 8000c72:	6879      	ldr	r1, [r7, #4]
 8000c74:	201e      	movs	r0, #30
 8000c76:	f000 f9c7 	bl	8001008 <HAL_NVIC_SetPriority>

  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000c7a:	201e      	movs	r0, #30
 8000c7c:	f000 f9e0 	bl	8001040 <HAL_NVIC_EnableIRQ>
  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8000c80:	2300      	movs	r3, #0
 8000c82:	60fb      	str	r3, [r7, #12]
 8000c84:	4b1f      	ldr	r3, [pc, #124]	; (8000d04 <HAL_InitTick+0xa4>)
 8000c86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c88:	4a1e      	ldr	r2, [pc, #120]	; (8000d04 <HAL_InitTick+0xa4>)
 8000c8a:	f043 0304 	orr.w	r3, r3, #4
 8000c8e:	6413      	str	r3, [r2, #64]	; 0x40
 8000c90:	4b1c      	ldr	r3, [pc, #112]	; (8000d04 <HAL_InitTick+0xa4>)
 8000c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c94:	f003 0304 	and.w	r3, r3, #4
 8000c98:	60fb      	str	r3, [r7, #12]
 8000c9a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c9c:	f107 0210 	add.w	r2, r7, #16
 8000ca0:	f107 0314 	add.w	r3, r7, #20
 8000ca4:	4611      	mov	r1, r2
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f000 ffea 	bl	8001c80 <HAL_RCC_GetClockConfig>

  /* Compute TIM4 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000cac:	f000 ffc0 	bl	8001c30 <HAL_RCC_GetPCLK1Freq>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	005b      	lsls	r3, r3, #1
 8000cb4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000cb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cb8:	4a13      	ldr	r2, [pc, #76]	; (8000d08 <HAL_InitTick+0xa8>)
 8000cba:	fba2 2303 	umull	r2, r3, r2, r3
 8000cbe:	0c9b      	lsrs	r3, r3, #18
 8000cc0:	3b01      	subs	r3, #1
 8000cc2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8000cc4:	4b11      	ldr	r3, [pc, #68]	; (8000d0c <HAL_InitTick+0xac>)
 8000cc6:	4a12      	ldr	r2, [pc, #72]	; (8000d10 <HAL_InitTick+0xb0>)
 8000cc8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8000cca:	4b10      	ldr	r3, [pc, #64]	; (8000d0c <HAL_InitTick+0xac>)
 8000ccc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000cd0:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8000cd2:	4a0e      	ldr	r2, [pc, #56]	; (8000d0c <HAL_InitTick+0xac>)
 8000cd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cd6:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8000cd8:	4b0c      	ldr	r3, [pc, #48]	; (8000d0c <HAL_InitTick+0xac>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cde:	4b0b      	ldr	r3, [pc, #44]	; (8000d0c <HAL_InitTick+0xac>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 8000ce4:	4809      	ldr	r0, [pc, #36]	; (8000d0c <HAL_InitTick+0xac>)
 8000ce6:	f000 fffd 	bl	8001ce4 <HAL_TIM_Base_Init>
 8000cea:	4603      	mov	r3, r0
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d104      	bne.n	8000cfa <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 8000cf0:	4806      	ldr	r0, [pc, #24]	; (8000d0c <HAL_InitTick+0xac>)
 8000cf2:	f001 f851 	bl	8001d98 <HAL_TIM_Base_Start_IT>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	e000      	b.n	8000cfc <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000cfa:	2301      	movs	r3, #1
}
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	3730      	adds	r7, #48	; 0x30
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	40023800 	.word	0x40023800
 8000d08:	431bde83 	.word	0x431bde83
 8000d0c:	20004054 	.word	0x20004054
 8000d10:	40000800 	.word	0x40000800

08000d14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d18:	e7fe      	b.n	8000d18 <NMI_Handler+0x4>

08000d1a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d1a:	b480      	push	{r7}
 8000d1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d1e:	e7fe      	b.n	8000d1e <HardFault_Handler+0x4>

08000d20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d24:	e7fe      	b.n	8000d24 <MemManage_Handler+0x4>

08000d26 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d26:	b480      	push	{r7}
 8000d28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d2a:	e7fe      	b.n	8000d2a <BusFault_Handler+0x4>

08000d2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d30:	e7fe      	b.n	8000d30 <UsageFault_Handler+0x4>

08000d32 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d32:	b480      	push	{r7}
 8000d34:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d36:	bf00      	nop
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3e:	4770      	bx	lr

08000d40 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000d44:	4802      	ldr	r0, [pc, #8]	; (8000d50 <TIM4_IRQHandler+0x10>)
 8000d46:	f001 f889 	bl	8001e5c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000d4a:	bf00      	nop
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	20004054 	.word	0x20004054

08000d54 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d58:	4b06      	ldr	r3, [pc, #24]	; (8000d74 <SystemInit+0x20>)
 8000d5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d5e:	4a05      	ldr	r2, [pc, #20]	; (8000d74 <SystemInit+0x20>)
 8000d60:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d64:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d68:	bf00      	nop
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr
 8000d72:	bf00      	nop
 8000d74:	e000ed00 	.word	0xe000ed00

08000d78 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000d78:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000db0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d7c:	480d      	ldr	r0, [pc, #52]	; (8000db4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d7e:	490e      	ldr	r1, [pc, #56]	; (8000db8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d80:	4a0e      	ldr	r2, [pc, #56]	; (8000dbc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d84:	e002      	b.n	8000d8c <LoopCopyDataInit>

08000d86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d8a:	3304      	adds	r3, #4

08000d8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d90:	d3f9      	bcc.n	8000d86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d92:	4a0b      	ldr	r2, [pc, #44]	; (8000dc0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d94:	4c0b      	ldr	r4, [pc, #44]	; (8000dc4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d98:	e001      	b.n	8000d9e <LoopFillZerobss>

08000d9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d9c:	3204      	adds	r2, #4

08000d9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000da0:	d3fb      	bcc.n	8000d9a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000da2:	f7ff ffd7 	bl	8000d54 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000da6:	f003 fe59 	bl	8004a5c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000daa:	f7ff fcc1 	bl	8000730 <main>
  bx  lr    
 8000dae:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000db0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000db4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000db8:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000dbc:	08004c18 	.word	0x08004c18
  ldr r2, =_sbss
 8000dc0:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000dc4:	200040a0 	.word	0x200040a0

08000dc8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000dc8:	e7fe      	b.n	8000dc8 <ADC_IRQHandler>
	...

08000dcc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000dd0:	4b0e      	ldr	r3, [pc, #56]	; (8000e0c <HAL_Init+0x40>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	4a0d      	ldr	r2, [pc, #52]	; (8000e0c <HAL_Init+0x40>)
 8000dd6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000dda:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ddc:	4b0b      	ldr	r3, [pc, #44]	; (8000e0c <HAL_Init+0x40>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	4a0a      	ldr	r2, [pc, #40]	; (8000e0c <HAL_Init+0x40>)
 8000de2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000de6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000de8:	4b08      	ldr	r3, [pc, #32]	; (8000e0c <HAL_Init+0x40>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	4a07      	ldr	r2, [pc, #28]	; (8000e0c <HAL_Init+0x40>)
 8000dee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000df2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000df4:	2003      	movs	r0, #3
 8000df6:	f000 f8fc 	bl	8000ff2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dfa:	2000      	movs	r0, #0
 8000dfc:	f7ff ff30 	bl	8000c60 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e00:	f7ff feba 	bl	8000b78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e04:	2300      	movs	r3, #0
}
 8000e06:	4618      	mov	r0, r3
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	40023c00 	.word	0x40023c00

08000e10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e14:	4b06      	ldr	r3, [pc, #24]	; (8000e30 <HAL_IncTick+0x20>)
 8000e16:	781b      	ldrb	r3, [r3, #0]
 8000e18:	461a      	mov	r2, r3
 8000e1a:	4b06      	ldr	r3, [pc, #24]	; (8000e34 <HAL_IncTick+0x24>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	4413      	add	r3, r2
 8000e20:	4a04      	ldr	r2, [pc, #16]	; (8000e34 <HAL_IncTick+0x24>)
 8000e22:	6013      	str	r3, [r2, #0]
}
 8000e24:	bf00      	nop
 8000e26:	46bd      	mov	sp, r7
 8000e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2c:	4770      	bx	lr
 8000e2e:	bf00      	nop
 8000e30:	20000008 	.word	0x20000008
 8000e34:	2000409c 	.word	0x2000409c

08000e38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e3c:	4b03      	ldr	r3, [pc, #12]	; (8000e4c <HAL_GetTick+0x14>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
}
 8000e40:	4618      	mov	r0, r3
 8000e42:	46bd      	mov	sp, r7
 8000e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e48:	4770      	bx	lr
 8000e4a:	bf00      	nop
 8000e4c:	2000409c 	.word	0x2000409c

08000e50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b084      	sub	sp, #16
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e58:	f7ff ffee 	bl	8000e38 <HAL_GetTick>
 8000e5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e68:	d005      	beq.n	8000e76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e6a:	4b0a      	ldr	r3, [pc, #40]	; (8000e94 <HAL_Delay+0x44>)
 8000e6c:	781b      	ldrb	r3, [r3, #0]
 8000e6e:	461a      	mov	r2, r3
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	4413      	add	r3, r2
 8000e74:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e76:	bf00      	nop
 8000e78:	f7ff ffde 	bl	8000e38 <HAL_GetTick>
 8000e7c:	4602      	mov	r2, r0
 8000e7e:	68bb      	ldr	r3, [r7, #8]
 8000e80:	1ad3      	subs	r3, r2, r3
 8000e82:	68fa      	ldr	r2, [r7, #12]
 8000e84:	429a      	cmp	r2, r3
 8000e86:	d8f7      	bhi.n	8000e78 <HAL_Delay+0x28>
  {
  }
}
 8000e88:	bf00      	nop
 8000e8a:	bf00      	nop
 8000e8c:	3710      	adds	r7, #16
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	20000008 	.word	0x20000008

08000e98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b085      	sub	sp, #20
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	f003 0307 	and.w	r3, r3, #7
 8000ea6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ea8:	4b0c      	ldr	r3, [pc, #48]	; (8000edc <__NVIC_SetPriorityGrouping+0x44>)
 8000eaa:	68db      	ldr	r3, [r3, #12]
 8000eac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000eae:	68ba      	ldr	r2, [r7, #8]
 8000eb0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000eb4:	4013      	ands	r3, r2
 8000eb6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ebc:	68bb      	ldr	r3, [r7, #8]
 8000ebe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ec0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ec4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ec8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000eca:	4a04      	ldr	r2, [pc, #16]	; (8000edc <__NVIC_SetPriorityGrouping+0x44>)
 8000ecc:	68bb      	ldr	r3, [r7, #8]
 8000ece:	60d3      	str	r3, [r2, #12]
}
 8000ed0:	bf00      	nop
 8000ed2:	3714      	adds	r7, #20
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eda:	4770      	bx	lr
 8000edc:	e000ed00 	.word	0xe000ed00

08000ee0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ee4:	4b04      	ldr	r3, [pc, #16]	; (8000ef8 <__NVIC_GetPriorityGrouping+0x18>)
 8000ee6:	68db      	ldr	r3, [r3, #12]
 8000ee8:	0a1b      	lsrs	r3, r3, #8
 8000eea:	f003 0307 	and.w	r3, r3, #7
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef6:	4770      	bx	lr
 8000ef8:	e000ed00 	.word	0xe000ed00

08000efc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000efc:	b480      	push	{r7}
 8000efe:	b083      	sub	sp, #12
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	4603      	mov	r3, r0
 8000f04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	db0b      	blt.n	8000f26 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f0e:	79fb      	ldrb	r3, [r7, #7]
 8000f10:	f003 021f 	and.w	r2, r3, #31
 8000f14:	4907      	ldr	r1, [pc, #28]	; (8000f34 <__NVIC_EnableIRQ+0x38>)
 8000f16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f1a:	095b      	lsrs	r3, r3, #5
 8000f1c:	2001      	movs	r0, #1
 8000f1e:	fa00 f202 	lsl.w	r2, r0, r2
 8000f22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f26:	bf00      	nop
 8000f28:	370c      	adds	r7, #12
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr
 8000f32:	bf00      	nop
 8000f34:	e000e100 	.word	0xe000e100

08000f38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b083      	sub	sp, #12
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	4603      	mov	r3, r0
 8000f40:	6039      	str	r1, [r7, #0]
 8000f42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	db0a      	blt.n	8000f62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	b2da      	uxtb	r2, r3
 8000f50:	490c      	ldr	r1, [pc, #48]	; (8000f84 <__NVIC_SetPriority+0x4c>)
 8000f52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f56:	0112      	lsls	r2, r2, #4
 8000f58:	b2d2      	uxtb	r2, r2
 8000f5a:	440b      	add	r3, r1
 8000f5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f60:	e00a      	b.n	8000f78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	b2da      	uxtb	r2, r3
 8000f66:	4908      	ldr	r1, [pc, #32]	; (8000f88 <__NVIC_SetPriority+0x50>)
 8000f68:	79fb      	ldrb	r3, [r7, #7]
 8000f6a:	f003 030f 	and.w	r3, r3, #15
 8000f6e:	3b04      	subs	r3, #4
 8000f70:	0112      	lsls	r2, r2, #4
 8000f72:	b2d2      	uxtb	r2, r2
 8000f74:	440b      	add	r3, r1
 8000f76:	761a      	strb	r2, [r3, #24]
}
 8000f78:	bf00      	nop
 8000f7a:	370c      	adds	r7, #12
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f82:	4770      	bx	lr
 8000f84:	e000e100 	.word	0xe000e100
 8000f88:	e000ed00 	.word	0xe000ed00

08000f8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b089      	sub	sp, #36	; 0x24
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	60f8      	str	r0, [r7, #12]
 8000f94:	60b9      	str	r1, [r7, #8]
 8000f96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	f003 0307 	and.w	r3, r3, #7
 8000f9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fa0:	69fb      	ldr	r3, [r7, #28]
 8000fa2:	f1c3 0307 	rsb	r3, r3, #7
 8000fa6:	2b04      	cmp	r3, #4
 8000fa8:	bf28      	it	cs
 8000faa:	2304      	movcs	r3, #4
 8000fac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fae:	69fb      	ldr	r3, [r7, #28]
 8000fb0:	3304      	adds	r3, #4
 8000fb2:	2b06      	cmp	r3, #6
 8000fb4:	d902      	bls.n	8000fbc <NVIC_EncodePriority+0x30>
 8000fb6:	69fb      	ldr	r3, [r7, #28]
 8000fb8:	3b03      	subs	r3, #3
 8000fba:	e000      	b.n	8000fbe <NVIC_EncodePriority+0x32>
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fc0:	f04f 32ff 	mov.w	r2, #4294967295
 8000fc4:	69bb      	ldr	r3, [r7, #24]
 8000fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fca:	43da      	mvns	r2, r3
 8000fcc:	68bb      	ldr	r3, [r7, #8]
 8000fce:	401a      	ands	r2, r3
 8000fd0:	697b      	ldr	r3, [r7, #20]
 8000fd2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fd4:	f04f 31ff 	mov.w	r1, #4294967295
 8000fd8:	697b      	ldr	r3, [r7, #20]
 8000fda:	fa01 f303 	lsl.w	r3, r1, r3
 8000fde:	43d9      	mvns	r1, r3
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fe4:	4313      	orrs	r3, r2
         );
}
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	3724      	adds	r7, #36	; 0x24
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr

08000ff2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ff2:	b580      	push	{r7, lr}
 8000ff4:	b082      	sub	sp, #8
 8000ff6:	af00      	add	r7, sp, #0
 8000ff8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ffa:	6878      	ldr	r0, [r7, #4]
 8000ffc:	f7ff ff4c 	bl	8000e98 <__NVIC_SetPriorityGrouping>
}
 8001000:	bf00      	nop
 8001002:	3708      	adds	r7, #8
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}

08001008 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001008:	b580      	push	{r7, lr}
 800100a:	b086      	sub	sp, #24
 800100c:	af00      	add	r7, sp, #0
 800100e:	4603      	mov	r3, r0
 8001010:	60b9      	str	r1, [r7, #8]
 8001012:	607a      	str	r2, [r7, #4]
 8001014:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001016:	2300      	movs	r3, #0
 8001018:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800101a:	f7ff ff61 	bl	8000ee0 <__NVIC_GetPriorityGrouping>
 800101e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001020:	687a      	ldr	r2, [r7, #4]
 8001022:	68b9      	ldr	r1, [r7, #8]
 8001024:	6978      	ldr	r0, [r7, #20]
 8001026:	f7ff ffb1 	bl	8000f8c <NVIC_EncodePriority>
 800102a:	4602      	mov	r2, r0
 800102c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001030:	4611      	mov	r1, r2
 8001032:	4618      	mov	r0, r3
 8001034:	f7ff ff80 	bl	8000f38 <__NVIC_SetPriority>
}
 8001038:	bf00      	nop
 800103a:	3718      	adds	r7, #24
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}

08001040 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0
 8001046:	4603      	mov	r3, r0
 8001048:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800104a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800104e:	4618      	mov	r0, r3
 8001050:	f7ff ff54 	bl	8000efc <__NVIC_EnableIRQ>
}
 8001054:	bf00      	nop
 8001056:	3708      	adds	r7, #8
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}

0800105c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800105c:	b480      	push	{r7}
 800105e:	b089      	sub	sp, #36	; 0x24
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
 8001064:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001066:	2300      	movs	r3, #0
 8001068:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800106a:	2300      	movs	r3, #0
 800106c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800106e:	2300      	movs	r3, #0
 8001070:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001072:	2300      	movs	r3, #0
 8001074:	61fb      	str	r3, [r7, #28]
 8001076:	e159      	b.n	800132c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001078:	2201      	movs	r2, #1
 800107a:	69fb      	ldr	r3, [r7, #28]
 800107c:	fa02 f303 	lsl.w	r3, r2, r3
 8001080:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	697a      	ldr	r2, [r7, #20]
 8001088:	4013      	ands	r3, r2
 800108a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800108c:	693a      	ldr	r2, [r7, #16]
 800108e:	697b      	ldr	r3, [r7, #20]
 8001090:	429a      	cmp	r2, r3
 8001092:	f040 8148 	bne.w	8001326 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	685b      	ldr	r3, [r3, #4]
 800109a:	f003 0303 	and.w	r3, r3, #3
 800109e:	2b01      	cmp	r3, #1
 80010a0:	d005      	beq.n	80010ae <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	685b      	ldr	r3, [r3, #4]
 80010a6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010aa:	2b02      	cmp	r3, #2
 80010ac:	d130      	bne.n	8001110 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	689b      	ldr	r3, [r3, #8]
 80010b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80010b4:	69fb      	ldr	r3, [r7, #28]
 80010b6:	005b      	lsls	r3, r3, #1
 80010b8:	2203      	movs	r2, #3
 80010ba:	fa02 f303 	lsl.w	r3, r2, r3
 80010be:	43db      	mvns	r3, r3
 80010c0:	69ba      	ldr	r2, [r7, #24]
 80010c2:	4013      	ands	r3, r2
 80010c4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	68da      	ldr	r2, [r3, #12]
 80010ca:	69fb      	ldr	r3, [r7, #28]
 80010cc:	005b      	lsls	r3, r3, #1
 80010ce:	fa02 f303 	lsl.w	r3, r2, r3
 80010d2:	69ba      	ldr	r2, [r7, #24]
 80010d4:	4313      	orrs	r3, r2
 80010d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	69ba      	ldr	r2, [r7, #24]
 80010dc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	685b      	ldr	r3, [r3, #4]
 80010e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010e4:	2201      	movs	r2, #1
 80010e6:	69fb      	ldr	r3, [r7, #28]
 80010e8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ec:	43db      	mvns	r3, r3
 80010ee:	69ba      	ldr	r2, [r7, #24]
 80010f0:	4013      	ands	r3, r2
 80010f2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	091b      	lsrs	r3, r3, #4
 80010fa:	f003 0201 	and.w	r2, r3, #1
 80010fe:	69fb      	ldr	r3, [r7, #28]
 8001100:	fa02 f303 	lsl.w	r3, r2, r3
 8001104:	69ba      	ldr	r2, [r7, #24]
 8001106:	4313      	orrs	r3, r2
 8001108:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	69ba      	ldr	r2, [r7, #24]
 800110e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	f003 0303 	and.w	r3, r3, #3
 8001118:	2b03      	cmp	r3, #3
 800111a:	d017      	beq.n	800114c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	68db      	ldr	r3, [r3, #12]
 8001120:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001122:	69fb      	ldr	r3, [r7, #28]
 8001124:	005b      	lsls	r3, r3, #1
 8001126:	2203      	movs	r2, #3
 8001128:	fa02 f303 	lsl.w	r3, r2, r3
 800112c:	43db      	mvns	r3, r3
 800112e:	69ba      	ldr	r2, [r7, #24]
 8001130:	4013      	ands	r3, r2
 8001132:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	689a      	ldr	r2, [r3, #8]
 8001138:	69fb      	ldr	r3, [r7, #28]
 800113a:	005b      	lsls	r3, r3, #1
 800113c:	fa02 f303 	lsl.w	r3, r2, r3
 8001140:	69ba      	ldr	r2, [r7, #24]
 8001142:	4313      	orrs	r3, r2
 8001144:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	69ba      	ldr	r2, [r7, #24]
 800114a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	f003 0303 	and.w	r3, r3, #3
 8001154:	2b02      	cmp	r3, #2
 8001156:	d123      	bne.n	80011a0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001158:	69fb      	ldr	r3, [r7, #28]
 800115a:	08da      	lsrs	r2, r3, #3
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	3208      	adds	r2, #8
 8001160:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001164:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001166:	69fb      	ldr	r3, [r7, #28]
 8001168:	f003 0307 	and.w	r3, r3, #7
 800116c:	009b      	lsls	r3, r3, #2
 800116e:	220f      	movs	r2, #15
 8001170:	fa02 f303 	lsl.w	r3, r2, r3
 8001174:	43db      	mvns	r3, r3
 8001176:	69ba      	ldr	r2, [r7, #24]
 8001178:	4013      	ands	r3, r2
 800117a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	691a      	ldr	r2, [r3, #16]
 8001180:	69fb      	ldr	r3, [r7, #28]
 8001182:	f003 0307 	and.w	r3, r3, #7
 8001186:	009b      	lsls	r3, r3, #2
 8001188:	fa02 f303 	lsl.w	r3, r2, r3
 800118c:	69ba      	ldr	r2, [r7, #24]
 800118e:	4313      	orrs	r3, r2
 8001190:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001192:	69fb      	ldr	r3, [r7, #28]
 8001194:	08da      	lsrs	r2, r3, #3
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	3208      	adds	r2, #8
 800119a:	69b9      	ldr	r1, [r7, #24]
 800119c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80011a6:	69fb      	ldr	r3, [r7, #28]
 80011a8:	005b      	lsls	r3, r3, #1
 80011aa:	2203      	movs	r2, #3
 80011ac:	fa02 f303 	lsl.w	r3, r2, r3
 80011b0:	43db      	mvns	r3, r3
 80011b2:	69ba      	ldr	r2, [r7, #24]
 80011b4:	4013      	ands	r3, r2
 80011b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	f003 0203 	and.w	r2, r3, #3
 80011c0:	69fb      	ldr	r3, [r7, #28]
 80011c2:	005b      	lsls	r3, r3, #1
 80011c4:	fa02 f303 	lsl.w	r3, r2, r3
 80011c8:	69ba      	ldr	r2, [r7, #24]
 80011ca:	4313      	orrs	r3, r2
 80011cc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	69ba      	ldr	r2, [r7, #24]
 80011d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80011dc:	2b00      	cmp	r3, #0
 80011de:	f000 80a2 	beq.w	8001326 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011e2:	2300      	movs	r3, #0
 80011e4:	60fb      	str	r3, [r7, #12]
 80011e6:	4b57      	ldr	r3, [pc, #348]	; (8001344 <HAL_GPIO_Init+0x2e8>)
 80011e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ea:	4a56      	ldr	r2, [pc, #344]	; (8001344 <HAL_GPIO_Init+0x2e8>)
 80011ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011f0:	6453      	str	r3, [r2, #68]	; 0x44
 80011f2:	4b54      	ldr	r3, [pc, #336]	; (8001344 <HAL_GPIO_Init+0x2e8>)
 80011f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011fa:	60fb      	str	r3, [r7, #12]
 80011fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80011fe:	4a52      	ldr	r2, [pc, #328]	; (8001348 <HAL_GPIO_Init+0x2ec>)
 8001200:	69fb      	ldr	r3, [r7, #28]
 8001202:	089b      	lsrs	r3, r3, #2
 8001204:	3302      	adds	r3, #2
 8001206:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800120a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800120c:	69fb      	ldr	r3, [r7, #28]
 800120e:	f003 0303 	and.w	r3, r3, #3
 8001212:	009b      	lsls	r3, r3, #2
 8001214:	220f      	movs	r2, #15
 8001216:	fa02 f303 	lsl.w	r3, r2, r3
 800121a:	43db      	mvns	r3, r3
 800121c:	69ba      	ldr	r2, [r7, #24]
 800121e:	4013      	ands	r3, r2
 8001220:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	4a49      	ldr	r2, [pc, #292]	; (800134c <HAL_GPIO_Init+0x2f0>)
 8001226:	4293      	cmp	r3, r2
 8001228:	d019      	beq.n	800125e <HAL_GPIO_Init+0x202>
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	4a48      	ldr	r2, [pc, #288]	; (8001350 <HAL_GPIO_Init+0x2f4>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d013      	beq.n	800125a <HAL_GPIO_Init+0x1fe>
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	4a47      	ldr	r2, [pc, #284]	; (8001354 <HAL_GPIO_Init+0x2f8>)
 8001236:	4293      	cmp	r3, r2
 8001238:	d00d      	beq.n	8001256 <HAL_GPIO_Init+0x1fa>
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	4a46      	ldr	r2, [pc, #280]	; (8001358 <HAL_GPIO_Init+0x2fc>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d007      	beq.n	8001252 <HAL_GPIO_Init+0x1f6>
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	4a45      	ldr	r2, [pc, #276]	; (800135c <HAL_GPIO_Init+0x300>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d101      	bne.n	800124e <HAL_GPIO_Init+0x1f2>
 800124a:	2304      	movs	r3, #4
 800124c:	e008      	b.n	8001260 <HAL_GPIO_Init+0x204>
 800124e:	2307      	movs	r3, #7
 8001250:	e006      	b.n	8001260 <HAL_GPIO_Init+0x204>
 8001252:	2303      	movs	r3, #3
 8001254:	e004      	b.n	8001260 <HAL_GPIO_Init+0x204>
 8001256:	2302      	movs	r3, #2
 8001258:	e002      	b.n	8001260 <HAL_GPIO_Init+0x204>
 800125a:	2301      	movs	r3, #1
 800125c:	e000      	b.n	8001260 <HAL_GPIO_Init+0x204>
 800125e:	2300      	movs	r3, #0
 8001260:	69fa      	ldr	r2, [r7, #28]
 8001262:	f002 0203 	and.w	r2, r2, #3
 8001266:	0092      	lsls	r2, r2, #2
 8001268:	4093      	lsls	r3, r2
 800126a:	69ba      	ldr	r2, [r7, #24]
 800126c:	4313      	orrs	r3, r2
 800126e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001270:	4935      	ldr	r1, [pc, #212]	; (8001348 <HAL_GPIO_Init+0x2ec>)
 8001272:	69fb      	ldr	r3, [r7, #28]
 8001274:	089b      	lsrs	r3, r3, #2
 8001276:	3302      	adds	r3, #2
 8001278:	69ba      	ldr	r2, [r7, #24]
 800127a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800127e:	4b38      	ldr	r3, [pc, #224]	; (8001360 <HAL_GPIO_Init+0x304>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001284:	693b      	ldr	r3, [r7, #16]
 8001286:	43db      	mvns	r3, r3
 8001288:	69ba      	ldr	r2, [r7, #24]
 800128a:	4013      	ands	r3, r2
 800128c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001296:	2b00      	cmp	r3, #0
 8001298:	d003      	beq.n	80012a2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800129a:	69ba      	ldr	r2, [r7, #24]
 800129c:	693b      	ldr	r3, [r7, #16]
 800129e:	4313      	orrs	r3, r2
 80012a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80012a2:	4a2f      	ldr	r2, [pc, #188]	; (8001360 <HAL_GPIO_Init+0x304>)
 80012a4:	69bb      	ldr	r3, [r7, #24]
 80012a6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80012a8:	4b2d      	ldr	r3, [pc, #180]	; (8001360 <HAL_GPIO_Init+0x304>)
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012ae:	693b      	ldr	r3, [r7, #16]
 80012b0:	43db      	mvns	r3, r3
 80012b2:	69ba      	ldr	r2, [r7, #24]
 80012b4:	4013      	ands	r3, r2
 80012b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d003      	beq.n	80012cc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80012c4:	69ba      	ldr	r2, [r7, #24]
 80012c6:	693b      	ldr	r3, [r7, #16]
 80012c8:	4313      	orrs	r3, r2
 80012ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80012cc:	4a24      	ldr	r2, [pc, #144]	; (8001360 <HAL_GPIO_Init+0x304>)
 80012ce:	69bb      	ldr	r3, [r7, #24]
 80012d0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012d2:	4b23      	ldr	r3, [pc, #140]	; (8001360 <HAL_GPIO_Init+0x304>)
 80012d4:	689b      	ldr	r3, [r3, #8]
 80012d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012d8:	693b      	ldr	r3, [r7, #16]
 80012da:	43db      	mvns	r3, r3
 80012dc:	69ba      	ldr	r2, [r7, #24]
 80012de:	4013      	ands	r3, r2
 80012e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d003      	beq.n	80012f6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80012ee:	69ba      	ldr	r2, [r7, #24]
 80012f0:	693b      	ldr	r3, [r7, #16]
 80012f2:	4313      	orrs	r3, r2
 80012f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012f6:	4a1a      	ldr	r2, [pc, #104]	; (8001360 <HAL_GPIO_Init+0x304>)
 80012f8:	69bb      	ldr	r3, [r7, #24]
 80012fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012fc:	4b18      	ldr	r3, [pc, #96]	; (8001360 <HAL_GPIO_Init+0x304>)
 80012fe:	68db      	ldr	r3, [r3, #12]
 8001300:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001302:	693b      	ldr	r3, [r7, #16]
 8001304:	43db      	mvns	r3, r3
 8001306:	69ba      	ldr	r2, [r7, #24]
 8001308:	4013      	ands	r3, r2
 800130a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001314:	2b00      	cmp	r3, #0
 8001316:	d003      	beq.n	8001320 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001318:	69ba      	ldr	r2, [r7, #24]
 800131a:	693b      	ldr	r3, [r7, #16]
 800131c:	4313      	orrs	r3, r2
 800131e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001320:	4a0f      	ldr	r2, [pc, #60]	; (8001360 <HAL_GPIO_Init+0x304>)
 8001322:	69bb      	ldr	r3, [r7, #24]
 8001324:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001326:	69fb      	ldr	r3, [r7, #28]
 8001328:	3301      	adds	r3, #1
 800132a:	61fb      	str	r3, [r7, #28]
 800132c:	69fb      	ldr	r3, [r7, #28]
 800132e:	2b0f      	cmp	r3, #15
 8001330:	f67f aea2 	bls.w	8001078 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001334:	bf00      	nop
 8001336:	bf00      	nop
 8001338:	3724      	adds	r7, #36	; 0x24
 800133a:	46bd      	mov	sp, r7
 800133c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001340:	4770      	bx	lr
 8001342:	bf00      	nop
 8001344:	40023800 	.word	0x40023800
 8001348:	40013800 	.word	0x40013800
 800134c:	40020000 	.word	0x40020000
 8001350:	40020400 	.word	0x40020400
 8001354:	40020800 	.word	0x40020800
 8001358:	40020c00 	.word	0x40020c00
 800135c:	40021000 	.word	0x40021000
 8001360:	40013c00 	.word	0x40013c00

08001364 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001364:	b480      	push	{r7}
 8001366:	b083      	sub	sp, #12
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
 800136c:	460b      	mov	r3, r1
 800136e:	807b      	strh	r3, [r7, #2]
 8001370:	4613      	mov	r3, r2
 8001372:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001374:	787b      	ldrb	r3, [r7, #1]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d003      	beq.n	8001382 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800137a:	887a      	ldrh	r2, [r7, #2]
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001380:	e003      	b.n	800138a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001382:	887b      	ldrh	r3, [r7, #2]
 8001384:	041a      	lsls	r2, r3, #16
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	619a      	str	r2, [r3, #24]
}
 800138a:	bf00      	nop
 800138c:	370c      	adds	r7, #12
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr
	...

08001398 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b086      	sub	sp, #24
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d101      	bne.n	80013aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80013a6:	2301      	movs	r3, #1
 80013a8:	e264      	b.n	8001874 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f003 0301 	and.w	r3, r3, #1
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d075      	beq.n	80014a2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80013b6:	4ba3      	ldr	r3, [pc, #652]	; (8001644 <HAL_RCC_OscConfig+0x2ac>)
 80013b8:	689b      	ldr	r3, [r3, #8]
 80013ba:	f003 030c 	and.w	r3, r3, #12
 80013be:	2b04      	cmp	r3, #4
 80013c0:	d00c      	beq.n	80013dc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80013c2:	4ba0      	ldr	r3, [pc, #640]	; (8001644 <HAL_RCC_OscConfig+0x2ac>)
 80013c4:	689b      	ldr	r3, [r3, #8]
 80013c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80013ca:	2b08      	cmp	r3, #8
 80013cc:	d112      	bne.n	80013f4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80013ce:	4b9d      	ldr	r3, [pc, #628]	; (8001644 <HAL_RCC_OscConfig+0x2ac>)
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80013da:	d10b      	bne.n	80013f4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013dc:	4b99      	ldr	r3, [pc, #612]	; (8001644 <HAL_RCC_OscConfig+0x2ac>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d05b      	beq.n	80014a0 <HAL_RCC_OscConfig+0x108>
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d157      	bne.n	80014a0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80013f0:	2301      	movs	r3, #1
 80013f2:	e23f      	b.n	8001874 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013fc:	d106      	bne.n	800140c <HAL_RCC_OscConfig+0x74>
 80013fe:	4b91      	ldr	r3, [pc, #580]	; (8001644 <HAL_RCC_OscConfig+0x2ac>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4a90      	ldr	r2, [pc, #576]	; (8001644 <HAL_RCC_OscConfig+0x2ac>)
 8001404:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001408:	6013      	str	r3, [r2, #0]
 800140a:	e01d      	b.n	8001448 <HAL_RCC_OscConfig+0xb0>
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001414:	d10c      	bne.n	8001430 <HAL_RCC_OscConfig+0x98>
 8001416:	4b8b      	ldr	r3, [pc, #556]	; (8001644 <HAL_RCC_OscConfig+0x2ac>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	4a8a      	ldr	r2, [pc, #552]	; (8001644 <HAL_RCC_OscConfig+0x2ac>)
 800141c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001420:	6013      	str	r3, [r2, #0]
 8001422:	4b88      	ldr	r3, [pc, #544]	; (8001644 <HAL_RCC_OscConfig+0x2ac>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4a87      	ldr	r2, [pc, #540]	; (8001644 <HAL_RCC_OscConfig+0x2ac>)
 8001428:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800142c:	6013      	str	r3, [r2, #0]
 800142e:	e00b      	b.n	8001448 <HAL_RCC_OscConfig+0xb0>
 8001430:	4b84      	ldr	r3, [pc, #528]	; (8001644 <HAL_RCC_OscConfig+0x2ac>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4a83      	ldr	r2, [pc, #524]	; (8001644 <HAL_RCC_OscConfig+0x2ac>)
 8001436:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800143a:	6013      	str	r3, [r2, #0]
 800143c:	4b81      	ldr	r3, [pc, #516]	; (8001644 <HAL_RCC_OscConfig+0x2ac>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4a80      	ldr	r2, [pc, #512]	; (8001644 <HAL_RCC_OscConfig+0x2ac>)
 8001442:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001446:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	2b00      	cmp	r3, #0
 800144e:	d013      	beq.n	8001478 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001450:	f7ff fcf2 	bl	8000e38 <HAL_GetTick>
 8001454:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001456:	e008      	b.n	800146a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001458:	f7ff fcee 	bl	8000e38 <HAL_GetTick>
 800145c:	4602      	mov	r2, r0
 800145e:	693b      	ldr	r3, [r7, #16]
 8001460:	1ad3      	subs	r3, r2, r3
 8001462:	2b64      	cmp	r3, #100	; 0x64
 8001464:	d901      	bls.n	800146a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001466:	2303      	movs	r3, #3
 8001468:	e204      	b.n	8001874 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800146a:	4b76      	ldr	r3, [pc, #472]	; (8001644 <HAL_RCC_OscConfig+0x2ac>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001472:	2b00      	cmp	r3, #0
 8001474:	d0f0      	beq.n	8001458 <HAL_RCC_OscConfig+0xc0>
 8001476:	e014      	b.n	80014a2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001478:	f7ff fcde 	bl	8000e38 <HAL_GetTick>
 800147c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800147e:	e008      	b.n	8001492 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001480:	f7ff fcda 	bl	8000e38 <HAL_GetTick>
 8001484:	4602      	mov	r2, r0
 8001486:	693b      	ldr	r3, [r7, #16]
 8001488:	1ad3      	subs	r3, r2, r3
 800148a:	2b64      	cmp	r3, #100	; 0x64
 800148c:	d901      	bls.n	8001492 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800148e:	2303      	movs	r3, #3
 8001490:	e1f0      	b.n	8001874 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001492:	4b6c      	ldr	r3, [pc, #432]	; (8001644 <HAL_RCC_OscConfig+0x2ac>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800149a:	2b00      	cmp	r3, #0
 800149c:	d1f0      	bne.n	8001480 <HAL_RCC_OscConfig+0xe8>
 800149e:	e000      	b.n	80014a2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f003 0302 	and.w	r3, r3, #2
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d063      	beq.n	8001576 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80014ae:	4b65      	ldr	r3, [pc, #404]	; (8001644 <HAL_RCC_OscConfig+0x2ac>)
 80014b0:	689b      	ldr	r3, [r3, #8]
 80014b2:	f003 030c 	and.w	r3, r3, #12
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d00b      	beq.n	80014d2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80014ba:	4b62      	ldr	r3, [pc, #392]	; (8001644 <HAL_RCC_OscConfig+0x2ac>)
 80014bc:	689b      	ldr	r3, [r3, #8]
 80014be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80014c2:	2b08      	cmp	r3, #8
 80014c4:	d11c      	bne.n	8001500 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80014c6:	4b5f      	ldr	r3, [pc, #380]	; (8001644 <HAL_RCC_OscConfig+0x2ac>)
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d116      	bne.n	8001500 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014d2:	4b5c      	ldr	r3, [pc, #368]	; (8001644 <HAL_RCC_OscConfig+0x2ac>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f003 0302 	and.w	r3, r3, #2
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d005      	beq.n	80014ea <HAL_RCC_OscConfig+0x152>
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	68db      	ldr	r3, [r3, #12]
 80014e2:	2b01      	cmp	r3, #1
 80014e4:	d001      	beq.n	80014ea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80014e6:	2301      	movs	r3, #1
 80014e8:	e1c4      	b.n	8001874 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014ea:	4b56      	ldr	r3, [pc, #344]	; (8001644 <HAL_RCC_OscConfig+0x2ac>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	691b      	ldr	r3, [r3, #16]
 80014f6:	00db      	lsls	r3, r3, #3
 80014f8:	4952      	ldr	r1, [pc, #328]	; (8001644 <HAL_RCC_OscConfig+0x2ac>)
 80014fa:	4313      	orrs	r3, r2
 80014fc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014fe:	e03a      	b.n	8001576 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	68db      	ldr	r3, [r3, #12]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d020      	beq.n	800154a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001508:	4b4f      	ldr	r3, [pc, #316]	; (8001648 <HAL_RCC_OscConfig+0x2b0>)
 800150a:	2201      	movs	r2, #1
 800150c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800150e:	f7ff fc93 	bl	8000e38 <HAL_GetTick>
 8001512:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001514:	e008      	b.n	8001528 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001516:	f7ff fc8f 	bl	8000e38 <HAL_GetTick>
 800151a:	4602      	mov	r2, r0
 800151c:	693b      	ldr	r3, [r7, #16]
 800151e:	1ad3      	subs	r3, r2, r3
 8001520:	2b02      	cmp	r3, #2
 8001522:	d901      	bls.n	8001528 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001524:	2303      	movs	r3, #3
 8001526:	e1a5      	b.n	8001874 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001528:	4b46      	ldr	r3, [pc, #280]	; (8001644 <HAL_RCC_OscConfig+0x2ac>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f003 0302 	and.w	r3, r3, #2
 8001530:	2b00      	cmp	r3, #0
 8001532:	d0f0      	beq.n	8001516 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001534:	4b43      	ldr	r3, [pc, #268]	; (8001644 <HAL_RCC_OscConfig+0x2ac>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	691b      	ldr	r3, [r3, #16]
 8001540:	00db      	lsls	r3, r3, #3
 8001542:	4940      	ldr	r1, [pc, #256]	; (8001644 <HAL_RCC_OscConfig+0x2ac>)
 8001544:	4313      	orrs	r3, r2
 8001546:	600b      	str	r3, [r1, #0]
 8001548:	e015      	b.n	8001576 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800154a:	4b3f      	ldr	r3, [pc, #252]	; (8001648 <HAL_RCC_OscConfig+0x2b0>)
 800154c:	2200      	movs	r2, #0
 800154e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001550:	f7ff fc72 	bl	8000e38 <HAL_GetTick>
 8001554:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001556:	e008      	b.n	800156a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001558:	f7ff fc6e 	bl	8000e38 <HAL_GetTick>
 800155c:	4602      	mov	r2, r0
 800155e:	693b      	ldr	r3, [r7, #16]
 8001560:	1ad3      	subs	r3, r2, r3
 8001562:	2b02      	cmp	r3, #2
 8001564:	d901      	bls.n	800156a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001566:	2303      	movs	r3, #3
 8001568:	e184      	b.n	8001874 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800156a:	4b36      	ldr	r3, [pc, #216]	; (8001644 <HAL_RCC_OscConfig+0x2ac>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f003 0302 	and.w	r3, r3, #2
 8001572:	2b00      	cmp	r3, #0
 8001574:	d1f0      	bne.n	8001558 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f003 0308 	and.w	r3, r3, #8
 800157e:	2b00      	cmp	r3, #0
 8001580:	d030      	beq.n	80015e4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	695b      	ldr	r3, [r3, #20]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d016      	beq.n	80015b8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800158a:	4b30      	ldr	r3, [pc, #192]	; (800164c <HAL_RCC_OscConfig+0x2b4>)
 800158c:	2201      	movs	r2, #1
 800158e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001590:	f7ff fc52 	bl	8000e38 <HAL_GetTick>
 8001594:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001596:	e008      	b.n	80015aa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001598:	f7ff fc4e 	bl	8000e38 <HAL_GetTick>
 800159c:	4602      	mov	r2, r0
 800159e:	693b      	ldr	r3, [r7, #16]
 80015a0:	1ad3      	subs	r3, r2, r3
 80015a2:	2b02      	cmp	r3, #2
 80015a4:	d901      	bls.n	80015aa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80015a6:	2303      	movs	r3, #3
 80015a8:	e164      	b.n	8001874 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015aa:	4b26      	ldr	r3, [pc, #152]	; (8001644 <HAL_RCC_OscConfig+0x2ac>)
 80015ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80015ae:	f003 0302 	and.w	r3, r3, #2
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d0f0      	beq.n	8001598 <HAL_RCC_OscConfig+0x200>
 80015b6:	e015      	b.n	80015e4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015b8:	4b24      	ldr	r3, [pc, #144]	; (800164c <HAL_RCC_OscConfig+0x2b4>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015be:	f7ff fc3b 	bl	8000e38 <HAL_GetTick>
 80015c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015c4:	e008      	b.n	80015d8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015c6:	f7ff fc37 	bl	8000e38 <HAL_GetTick>
 80015ca:	4602      	mov	r2, r0
 80015cc:	693b      	ldr	r3, [r7, #16]
 80015ce:	1ad3      	subs	r3, r2, r3
 80015d0:	2b02      	cmp	r3, #2
 80015d2:	d901      	bls.n	80015d8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80015d4:	2303      	movs	r3, #3
 80015d6:	e14d      	b.n	8001874 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015d8:	4b1a      	ldr	r3, [pc, #104]	; (8001644 <HAL_RCC_OscConfig+0x2ac>)
 80015da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80015dc:	f003 0302 	and.w	r3, r3, #2
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d1f0      	bne.n	80015c6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f003 0304 	and.w	r3, r3, #4
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	f000 80a0 	beq.w	8001732 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015f2:	2300      	movs	r3, #0
 80015f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015f6:	4b13      	ldr	r3, [pc, #76]	; (8001644 <HAL_RCC_OscConfig+0x2ac>)
 80015f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d10f      	bne.n	8001622 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001602:	2300      	movs	r3, #0
 8001604:	60bb      	str	r3, [r7, #8]
 8001606:	4b0f      	ldr	r3, [pc, #60]	; (8001644 <HAL_RCC_OscConfig+0x2ac>)
 8001608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800160a:	4a0e      	ldr	r2, [pc, #56]	; (8001644 <HAL_RCC_OscConfig+0x2ac>)
 800160c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001610:	6413      	str	r3, [r2, #64]	; 0x40
 8001612:	4b0c      	ldr	r3, [pc, #48]	; (8001644 <HAL_RCC_OscConfig+0x2ac>)
 8001614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001616:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800161a:	60bb      	str	r3, [r7, #8]
 800161c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800161e:	2301      	movs	r3, #1
 8001620:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001622:	4b0b      	ldr	r3, [pc, #44]	; (8001650 <HAL_RCC_OscConfig+0x2b8>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800162a:	2b00      	cmp	r3, #0
 800162c:	d121      	bne.n	8001672 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800162e:	4b08      	ldr	r3, [pc, #32]	; (8001650 <HAL_RCC_OscConfig+0x2b8>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4a07      	ldr	r2, [pc, #28]	; (8001650 <HAL_RCC_OscConfig+0x2b8>)
 8001634:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001638:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800163a:	f7ff fbfd 	bl	8000e38 <HAL_GetTick>
 800163e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001640:	e011      	b.n	8001666 <HAL_RCC_OscConfig+0x2ce>
 8001642:	bf00      	nop
 8001644:	40023800 	.word	0x40023800
 8001648:	42470000 	.word	0x42470000
 800164c:	42470e80 	.word	0x42470e80
 8001650:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001654:	f7ff fbf0 	bl	8000e38 <HAL_GetTick>
 8001658:	4602      	mov	r2, r0
 800165a:	693b      	ldr	r3, [r7, #16]
 800165c:	1ad3      	subs	r3, r2, r3
 800165e:	2b02      	cmp	r3, #2
 8001660:	d901      	bls.n	8001666 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001662:	2303      	movs	r3, #3
 8001664:	e106      	b.n	8001874 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001666:	4b85      	ldr	r3, [pc, #532]	; (800187c <HAL_RCC_OscConfig+0x4e4>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800166e:	2b00      	cmp	r3, #0
 8001670:	d0f0      	beq.n	8001654 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	689b      	ldr	r3, [r3, #8]
 8001676:	2b01      	cmp	r3, #1
 8001678:	d106      	bne.n	8001688 <HAL_RCC_OscConfig+0x2f0>
 800167a:	4b81      	ldr	r3, [pc, #516]	; (8001880 <HAL_RCC_OscConfig+0x4e8>)
 800167c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800167e:	4a80      	ldr	r2, [pc, #512]	; (8001880 <HAL_RCC_OscConfig+0x4e8>)
 8001680:	f043 0301 	orr.w	r3, r3, #1
 8001684:	6713      	str	r3, [r2, #112]	; 0x70
 8001686:	e01c      	b.n	80016c2 <HAL_RCC_OscConfig+0x32a>
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	689b      	ldr	r3, [r3, #8]
 800168c:	2b05      	cmp	r3, #5
 800168e:	d10c      	bne.n	80016aa <HAL_RCC_OscConfig+0x312>
 8001690:	4b7b      	ldr	r3, [pc, #492]	; (8001880 <HAL_RCC_OscConfig+0x4e8>)
 8001692:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001694:	4a7a      	ldr	r2, [pc, #488]	; (8001880 <HAL_RCC_OscConfig+0x4e8>)
 8001696:	f043 0304 	orr.w	r3, r3, #4
 800169a:	6713      	str	r3, [r2, #112]	; 0x70
 800169c:	4b78      	ldr	r3, [pc, #480]	; (8001880 <HAL_RCC_OscConfig+0x4e8>)
 800169e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016a0:	4a77      	ldr	r2, [pc, #476]	; (8001880 <HAL_RCC_OscConfig+0x4e8>)
 80016a2:	f043 0301 	orr.w	r3, r3, #1
 80016a6:	6713      	str	r3, [r2, #112]	; 0x70
 80016a8:	e00b      	b.n	80016c2 <HAL_RCC_OscConfig+0x32a>
 80016aa:	4b75      	ldr	r3, [pc, #468]	; (8001880 <HAL_RCC_OscConfig+0x4e8>)
 80016ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016ae:	4a74      	ldr	r2, [pc, #464]	; (8001880 <HAL_RCC_OscConfig+0x4e8>)
 80016b0:	f023 0301 	bic.w	r3, r3, #1
 80016b4:	6713      	str	r3, [r2, #112]	; 0x70
 80016b6:	4b72      	ldr	r3, [pc, #456]	; (8001880 <HAL_RCC_OscConfig+0x4e8>)
 80016b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016ba:	4a71      	ldr	r2, [pc, #452]	; (8001880 <HAL_RCC_OscConfig+0x4e8>)
 80016bc:	f023 0304 	bic.w	r3, r3, #4
 80016c0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	689b      	ldr	r3, [r3, #8]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d015      	beq.n	80016f6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016ca:	f7ff fbb5 	bl	8000e38 <HAL_GetTick>
 80016ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016d0:	e00a      	b.n	80016e8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016d2:	f7ff fbb1 	bl	8000e38 <HAL_GetTick>
 80016d6:	4602      	mov	r2, r0
 80016d8:	693b      	ldr	r3, [r7, #16]
 80016da:	1ad3      	subs	r3, r2, r3
 80016dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80016e0:	4293      	cmp	r3, r2
 80016e2:	d901      	bls.n	80016e8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80016e4:	2303      	movs	r3, #3
 80016e6:	e0c5      	b.n	8001874 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016e8:	4b65      	ldr	r3, [pc, #404]	; (8001880 <HAL_RCC_OscConfig+0x4e8>)
 80016ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016ec:	f003 0302 	and.w	r3, r3, #2
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d0ee      	beq.n	80016d2 <HAL_RCC_OscConfig+0x33a>
 80016f4:	e014      	b.n	8001720 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016f6:	f7ff fb9f 	bl	8000e38 <HAL_GetTick>
 80016fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016fc:	e00a      	b.n	8001714 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016fe:	f7ff fb9b 	bl	8000e38 <HAL_GetTick>
 8001702:	4602      	mov	r2, r0
 8001704:	693b      	ldr	r3, [r7, #16]
 8001706:	1ad3      	subs	r3, r2, r3
 8001708:	f241 3288 	movw	r2, #5000	; 0x1388
 800170c:	4293      	cmp	r3, r2
 800170e:	d901      	bls.n	8001714 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001710:	2303      	movs	r3, #3
 8001712:	e0af      	b.n	8001874 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001714:	4b5a      	ldr	r3, [pc, #360]	; (8001880 <HAL_RCC_OscConfig+0x4e8>)
 8001716:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001718:	f003 0302 	and.w	r3, r3, #2
 800171c:	2b00      	cmp	r3, #0
 800171e:	d1ee      	bne.n	80016fe <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001720:	7dfb      	ldrb	r3, [r7, #23]
 8001722:	2b01      	cmp	r3, #1
 8001724:	d105      	bne.n	8001732 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001726:	4b56      	ldr	r3, [pc, #344]	; (8001880 <HAL_RCC_OscConfig+0x4e8>)
 8001728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800172a:	4a55      	ldr	r2, [pc, #340]	; (8001880 <HAL_RCC_OscConfig+0x4e8>)
 800172c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001730:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	699b      	ldr	r3, [r3, #24]
 8001736:	2b00      	cmp	r3, #0
 8001738:	f000 809b 	beq.w	8001872 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800173c:	4b50      	ldr	r3, [pc, #320]	; (8001880 <HAL_RCC_OscConfig+0x4e8>)
 800173e:	689b      	ldr	r3, [r3, #8]
 8001740:	f003 030c 	and.w	r3, r3, #12
 8001744:	2b08      	cmp	r3, #8
 8001746:	d05c      	beq.n	8001802 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	699b      	ldr	r3, [r3, #24]
 800174c:	2b02      	cmp	r3, #2
 800174e:	d141      	bne.n	80017d4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001750:	4b4c      	ldr	r3, [pc, #304]	; (8001884 <HAL_RCC_OscConfig+0x4ec>)
 8001752:	2200      	movs	r2, #0
 8001754:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001756:	f7ff fb6f 	bl	8000e38 <HAL_GetTick>
 800175a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800175c:	e008      	b.n	8001770 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800175e:	f7ff fb6b 	bl	8000e38 <HAL_GetTick>
 8001762:	4602      	mov	r2, r0
 8001764:	693b      	ldr	r3, [r7, #16]
 8001766:	1ad3      	subs	r3, r2, r3
 8001768:	2b02      	cmp	r3, #2
 800176a:	d901      	bls.n	8001770 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800176c:	2303      	movs	r3, #3
 800176e:	e081      	b.n	8001874 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001770:	4b43      	ldr	r3, [pc, #268]	; (8001880 <HAL_RCC_OscConfig+0x4e8>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001778:	2b00      	cmp	r3, #0
 800177a:	d1f0      	bne.n	800175e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	69da      	ldr	r2, [r3, #28]
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	6a1b      	ldr	r3, [r3, #32]
 8001784:	431a      	orrs	r2, r3
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800178a:	019b      	lsls	r3, r3, #6
 800178c:	431a      	orrs	r2, r3
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001792:	085b      	lsrs	r3, r3, #1
 8001794:	3b01      	subs	r3, #1
 8001796:	041b      	lsls	r3, r3, #16
 8001798:	431a      	orrs	r2, r3
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800179e:	061b      	lsls	r3, r3, #24
 80017a0:	4937      	ldr	r1, [pc, #220]	; (8001880 <HAL_RCC_OscConfig+0x4e8>)
 80017a2:	4313      	orrs	r3, r2
 80017a4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017a6:	4b37      	ldr	r3, [pc, #220]	; (8001884 <HAL_RCC_OscConfig+0x4ec>)
 80017a8:	2201      	movs	r2, #1
 80017aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017ac:	f7ff fb44 	bl	8000e38 <HAL_GetTick>
 80017b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017b2:	e008      	b.n	80017c6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017b4:	f7ff fb40 	bl	8000e38 <HAL_GetTick>
 80017b8:	4602      	mov	r2, r0
 80017ba:	693b      	ldr	r3, [r7, #16]
 80017bc:	1ad3      	subs	r3, r2, r3
 80017be:	2b02      	cmp	r3, #2
 80017c0:	d901      	bls.n	80017c6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80017c2:	2303      	movs	r3, #3
 80017c4:	e056      	b.n	8001874 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017c6:	4b2e      	ldr	r3, [pc, #184]	; (8001880 <HAL_RCC_OscConfig+0x4e8>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d0f0      	beq.n	80017b4 <HAL_RCC_OscConfig+0x41c>
 80017d2:	e04e      	b.n	8001872 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017d4:	4b2b      	ldr	r3, [pc, #172]	; (8001884 <HAL_RCC_OscConfig+0x4ec>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017da:	f7ff fb2d 	bl	8000e38 <HAL_GetTick>
 80017de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017e0:	e008      	b.n	80017f4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017e2:	f7ff fb29 	bl	8000e38 <HAL_GetTick>
 80017e6:	4602      	mov	r2, r0
 80017e8:	693b      	ldr	r3, [r7, #16]
 80017ea:	1ad3      	subs	r3, r2, r3
 80017ec:	2b02      	cmp	r3, #2
 80017ee:	d901      	bls.n	80017f4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80017f0:	2303      	movs	r3, #3
 80017f2:	e03f      	b.n	8001874 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017f4:	4b22      	ldr	r3, [pc, #136]	; (8001880 <HAL_RCC_OscConfig+0x4e8>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d1f0      	bne.n	80017e2 <HAL_RCC_OscConfig+0x44a>
 8001800:	e037      	b.n	8001872 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	699b      	ldr	r3, [r3, #24]
 8001806:	2b01      	cmp	r3, #1
 8001808:	d101      	bne.n	800180e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800180a:	2301      	movs	r3, #1
 800180c:	e032      	b.n	8001874 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800180e:	4b1c      	ldr	r3, [pc, #112]	; (8001880 <HAL_RCC_OscConfig+0x4e8>)
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	699b      	ldr	r3, [r3, #24]
 8001818:	2b01      	cmp	r3, #1
 800181a:	d028      	beq.n	800186e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001826:	429a      	cmp	r2, r3
 8001828:	d121      	bne.n	800186e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001834:	429a      	cmp	r2, r3
 8001836:	d11a      	bne.n	800186e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001838:	68fa      	ldr	r2, [r7, #12]
 800183a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800183e:	4013      	ands	r3, r2
 8001840:	687a      	ldr	r2, [r7, #4]
 8001842:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001844:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001846:	4293      	cmp	r3, r2
 8001848:	d111      	bne.n	800186e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001854:	085b      	lsrs	r3, r3, #1
 8001856:	3b01      	subs	r3, #1
 8001858:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800185a:	429a      	cmp	r2, r3
 800185c:	d107      	bne.n	800186e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001868:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800186a:	429a      	cmp	r2, r3
 800186c:	d001      	beq.n	8001872 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800186e:	2301      	movs	r3, #1
 8001870:	e000      	b.n	8001874 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8001872:	2300      	movs	r3, #0
}
 8001874:	4618      	mov	r0, r3
 8001876:	3718      	adds	r7, #24
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}
 800187c:	40007000 	.word	0x40007000
 8001880:	40023800 	.word	0x40023800
 8001884:	42470060 	.word	0x42470060

08001888 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b084      	sub	sp, #16
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
 8001890:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d101      	bne.n	800189c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001898:	2301      	movs	r3, #1
 800189a:	e0cc      	b.n	8001a36 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800189c:	4b68      	ldr	r3, [pc, #416]	; (8001a40 <HAL_RCC_ClockConfig+0x1b8>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f003 0307 	and.w	r3, r3, #7
 80018a4:	683a      	ldr	r2, [r7, #0]
 80018a6:	429a      	cmp	r2, r3
 80018a8:	d90c      	bls.n	80018c4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018aa:	4b65      	ldr	r3, [pc, #404]	; (8001a40 <HAL_RCC_ClockConfig+0x1b8>)
 80018ac:	683a      	ldr	r2, [r7, #0]
 80018ae:	b2d2      	uxtb	r2, r2
 80018b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018b2:	4b63      	ldr	r3, [pc, #396]	; (8001a40 <HAL_RCC_ClockConfig+0x1b8>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f003 0307 	and.w	r3, r3, #7
 80018ba:	683a      	ldr	r2, [r7, #0]
 80018bc:	429a      	cmp	r2, r3
 80018be:	d001      	beq.n	80018c4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80018c0:	2301      	movs	r3, #1
 80018c2:	e0b8      	b.n	8001a36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f003 0302 	and.w	r3, r3, #2
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d020      	beq.n	8001912 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f003 0304 	and.w	r3, r3, #4
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d005      	beq.n	80018e8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80018dc:	4b59      	ldr	r3, [pc, #356]	; (8001a44 <HAL_RCC_ClockConfig+0x1bc>)
 80018de:	689b      	ldr	r3, [r3, #8]
 80018e0:	4a58      	ldr	r2, [pc, #352]	; (8001a44 <HAL_RCC_ClockConfig+0x1bc>)
 80018e2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80018e6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f003 0308 	and.w	r3, r3, #8
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d005      	beq.n	8001900 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80018f4:	4b53      	ldr	r3, [pc, #332]	; (8001a44 <HAL_RCC_ClockConfig+0x1bc>)
 80018f6:	689b      	ldr	r3, [r3, #8]
 80018f8:	4a52      	ldr	r2, [pc, #328]	; (8001a44 <HAL_RCC_ClockConfig+0x1bc>)
 80018fa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80018fe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001900:	4b50      	ldr	r3, [pc, #320]	; (8001a44 <HAL_RCC_ClockConfig+0x1bc>)
 8001902:	689b      	ldr	r3, [r3, #8]
 8001904:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	689b      	ldr	r3, [r3, #8]
 800190c:	494d      	ldr	r1, [pc, #308]	; (8001a44 <HAL_RCC_ClockConfig+0x1bc>)
 800190e:	4313      	orrs	r3, r2
 8001910:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f003 0301 	and.w	r3, r3, #1
 800191a:	2b00      	cmp	r3, #0
 800191c:	d044      	beq.n	80019a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	2b01      	cmp	r3, #1
 8001924:	d107      	bne.n	8001936 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001926:	4b47      	ldr	r3, [pc, #284]	; (8001a44 <HAL_RCC_ClockConfig+0x1bc>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800192e:	2b00      	cmp	r3, #0
 8001930:	d119      	bne.n	8001966 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001932:	2301      	movs	r3, #1
 8001934:	e07f      	b.n	8001a36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	2b02      	cmp	r3, #2
 800193c:	d003      	beq.n	8001946 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001942:	2b03      	cmp	r3, #3
 8001944:	d107      	bne.n	8001956 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001946:	4b3f      	ldr	r3, [pc, #252]	; (8001a44 <HAL_RCC_ClockConfig+0x1bc>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800194e:	2b00      	cmp	r3, #0
 8001950:	d109      	bne.n	8001966 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001952:	2301      	movs	r3, #1
 8001954:	e06f      	b.n	8001a36 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001956:	4b3b      	ldr	r3, [pc, #236]	; (8001a44 <HAL_RCC_ClockConfig+0x1bc>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f003 0302 	and.w	r3, r3, #2
 800195e:	2b00      	cmp	r3, #0
 8001960:	d101      	bne.n	8001966 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001962:	2301      	movs	r3, #1
 8001964:	e067      	b.n	8001a36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001966:	4b37      	ldr	r3, [pc, #220]	; (8001a44 <HAL_RCC_ClockConfig+0x1bc>)
 8001968:	689b      	ldr	r3, [r3, #8]
 800196a:	f023 0203 	bic.w	r2, r3, #3
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	4934      	ldr	r1, [pc, #208]	; (8001a44 <HAL_RCC_ClockConfig+0x1bc>)
 8001974:	4313      	orrs	r3, r2
 8001976:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001978:	f7ff fa5e 	bl	8000e38 <HAL_GetTick>
 800197c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800197e:	e00a      	b.n	8001996 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001980:	f7ff fa5a 	bl	8000e38 <HAL_GetTick>
 8001984:	4602      	mov	r2, r0
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	1ad3      	subs	r3, r2, r3
 800198a:	f241 3288 	movw	r2, #5000	; 0x1388
 800198e:	4293      	cmp	r3, r2
 8001990:	d901      	bls.n	8001996 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001992:	2303      	movs	r3, #3
 8001994:	e04f      	b.n	8001a36 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001996:	4b2b      	ldr	r3, [pc, #172]	; (8001a44 <HAL_RCC_ClockConfig+0x1bc>)
 8001998:	689b      	ldr	r3, [r3, #8]
 800199a:	f003 020c 	and.w	r2, r3, #12
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	009b      	lsls	r3, r3, #2
 80019a4:	429a      	cmp	r2, r3
 80019a6:	d1eb      	bne.n	8001980 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80019a8:	4b25      	ldr	r3, [pc, #148]	; (8001a40 <HAL_RCC_ClockConfig+0x1b8>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f003 0307 	and.w	r3, r3, #7
 80019b0:	683a      	ldr	r2, [r7, #0]
 80019b2:	429a      	cmp	r2, r3
 80019b4:	d20c      	bcs.n	80019d0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019b6:	4b22      	ldr	r3, [pc, #136]	; (8001a40 <HAL_RCC_ClockConfig+0x1b8>)
 80019b8:	683a      	ldr	r2, [r7, #0]
 80019ba:	b2d2      	uxtb	r2, r2
 80019bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019be:	4b20      	ldr	r3, [pc, #128]	; (8001a40 <HAL_RCC_ClockConfig+0x1b8>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f003 0307 	and.w	r3, r3, #7
 80019c6:	683a      	ldr	r2, [r7, #0]
 80019c8:	429a      	cmp	r2, r3
 80019ca:	d001      	beq.n	80019d0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80019cc:	2301      	movs	r3, #1
 80019ce:	e032      	b.n	8001a36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f003 0304 	and.w	r3, r3, #4
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d008      	beq.n	80019ee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019dc:	4b19      	ldr	r3, [pc, #100]	; (8001a44 <HAL_RCC_ClockConfig+0x1bc>)
 80019de:	689b      	ldr	r3, [r3, #8]
 80019e0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	68db      	ldr	r3, [r3, #12]
 80019e8:	4916      	ldr	r1, [pc, #88]	; (8001a44 <HAL_RCC_ClockConfig+0x1bc>)
 80019ea:	4313      	orrs	r3, r2
 80019ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f003 0308 	and.w	r3, r3, #8
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d009      	beq.n	8001a0e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80019fa:	4b12      	ldr	r3, [pc, #72]	; (8001a44 <HAL_RCC_ClockConfig+0x1bc>)
 80019fc:	689b      	ldr	r3, [r3, #8]
 80019fe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	691b      	ldr	r3, [r3, #16]
 8001a06:	00db      	lsls	r3, r3, #3
 8001a08:	490e      	ldr	r1, [pc, #56]	; (8001a44 <HAL_RCC_ClockConfig+0x1bc>)
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001a0e:	f000 f821 	bl	8001a54 <HAL_RCC_GetSysClockFreq>
 8001a12:	4602      	mov	r2, r0
 8001a14:	4b0b      	ldr	r3, [pc, #44]	; (8001a44 <HAL_RCC_ClockConfig+0x1bc>)
 8001a16:	689b      	ldr	r3, [r3, #8]
 8001a18:	091b      	lsrs	r3, r3, #4
 8001a1a:	f003 030f 	and.w	r3, r3, #15
 8001a1e:	490a      	ldr	r1, [pc, #40]	; (8001a48 <HAL_RCC_ClockConfig+0x1c0>)
 8001a20:	5ccb      	ldrb	r3, [r1, r3]
 8001a22:	fa22 f303 	lsr.w	r3, r2, r3
 8001a26:	4a09      	ldr	r2, [pc, #36]	; (8001a4c <HAL_RCC_ClockConfig+0x1c4>)
 8001a28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001a2a:	4b09      	ldr	r3, [pc, #36]	; (8001a50 <HAL_RCC_ClockConfig+0x1c8>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f7ff f916 	bl	8000c60 <HAL_InitTick>

  return HAL_OK;
 8001a34:	2300      	movs	r3, #0
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	3710      	adds	r7, #16
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	40023c00 	.word	0x40023c00
 8001a44:	40023800 	.word	0x40023800
 8001a48:	08004bf0 	.word	0x08004bf0
 8001a4c:	20000000 	.word	0x20000000
 8001a50:	20000004 	.word	0x20000004

08001a54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a54:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001a58:	b084      	sub	sp, #16
 8001a5a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	607b      	str	r3, [r7, #4]
 8001a60:	2300      	movs	r3, #0
 8001a62:	60fb      	str	r3, [r7, #12]
 8001a64:	2300      	movs	r3, #0
 8001a66:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001a6c:	4b67      	ldr	r3, [pc, #412]	; (8001c0c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001a6e:	689b      	ldr	r3, [r3, #8]
 8001a70:	f003 030c 	and.w	r3, r3, #12
 8001a74:	2b08      	cmp	r3, #8
 8001a76:	d00d      	beq.n	8001a94 <HAL_RCC_GetSysClockFreq+0x40>
 8001a78:	2b08      	cmp	r3, #8
 8001a7a:	f200 80bd 	bhi.w	8001bf8 <HAL_RCC_GetSysClockFreq+0x1a4>
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d002      	beq.n	8001a88 <HAL_RCC_GetSysClockFreq+0x34>
 8001a82:	2b04      	cmp	r3, #4
 8001a84:	d003      	beq.n	8001a8e <HAL_RCC_GetSysClockFreq+0x3a>
 8001a86:	e0b7      	b.n	8001bf8 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001a88:	4b61      	ldr	r3, [pc, #388]	; (8001c10 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001a8a:	60bb      	str	r3, [r7, #8]
       break;
 8001a8c:	e0b7      	b.n	8001bfe <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001a8e:	4b61      	ldr	r3, [pc, #388]	; (8001c14 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8001a90:	60bb      	str	r3, [r7, #8]
      break;
 8001a92:	e0b4      	b.n	8001bfe <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a94:	4b5d      	ldr	r3, [pc, #372]	; (8001c0c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001a9c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001a9e:	4b5b      	ldr	r3, [pc, #364]	; (8001c0c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d04d      	beq.n	8001b46 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001aaa:	4b58      	ldr	r3, [pc, #352]	; (8001c0c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	099b      	lsrs	r3, r3, #6
 8001ab0:	461a      	mov	r2, r3
 8001ab2:	f04f 0300 	mov.w	r3, #0
 8001ab6:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001aba:	f04f 0100 	mov.w	r1, #0
 8001abe:	ea02 0800 	and.w	r8, r2, r0
 8001ac2:	ea03 0901 	and.w	r9, r3, r1
 8001ac6:	4640      	mov	r0, r8
 8001ac8:	4649      	mov	r1, r9
 8001aca:	f04f 0200 	mov.w	r2, #0
 8001ace:	f04f 0300 	mov.w	r3, #0
 8001ad2:	014b      	lsls	r3, r1, #5
 8001ad4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001ad8:	0142      	lsls	r2, r0, #5
 8001ada:	4610      	mov	r0, r2
 8001adc:	4619      	mov	r1, r3
 8001ade:	ebb0 0008 	subs.w	r0, r0, r8
 8001ae2:	eb61 0109 	sbc.w	r1, r1, r9
 8001ae6:	f04f 0200 	mov.w	r2, #0
 8001aea:	f04f 0300 	mov.w	r3, #0
 8001aee:	018b      	lsls	r3, r1, #6
 8001af0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001af4:	0182      	lsls	r2, r0, #6
 8001af6:	1a12      	subs	r2, r2, r0
 8001af8:	eb63 0301 	sbc.w	r3, r3, r1
 8001afc:	f04f 0000 	mov.w	r0, #0
 8001b00:	f04f 0100 	mov.w	r1, #0
 8001b04:	00d9      	lsls	r1, r3, #3
 8001b06:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001b0a:	00d0      	lsls	r0, r2, #3
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	460b      	mov	r3, r1
 8001b10:	eb12 0208 	adds.w	r2, r2, r8
 8001b14:	eb43 0309 	adc.w	r3, r3, r9
 8001b18:	f04f 0000 	mov.w	r0, #0
 8001b1c:	f04f 0100 	mov.w	r1, #0
 8001b20:	0259      	lsls	r1, r3, #9
 8001b22:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001b26:	0250      	lsls	r0, r2, #9
 8001b28:	4602      	mov	r2, r0
 8001b2a:	460b      	mov	r3, r1
 8001b2c:	4610      	mov	r0, r2
 8001b2e:	4619      	mov	r1, r3
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	461a      	mov	r2, r3
 8001b34:	f04f 0300 	mov.w	r3, #0
 8001b38:	f7fe fb5a 	bl	80001f0 <__aeabi_uldivmod>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	460b      	mov	r3, r1
 8001b40:	4613      	mov	r3, r2
 8001b42:	60fb      	str	r3, [r7, #12]
 8001b44:	e04a      	b.n	8001bdc <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b46:	4b31      	ldr	r3, [pc, #196]	; (8001c0c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	099b      	lsrs	r3, r3, #6
 8001b4c:	461a      	mov	r2, r3
 8001b4e:	f04f 0300 	mov.w	r3, #0
 8001b52:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001b56:	f04f 0100 	mov.w	r1, #0
 8001b5a:	ea02 0400 	and.w	r4, r2, r0
 8001b5e:	ea03 0501 	and.w	r5, r3, r1
 8001b62:	4620      	mov	r0, r4
 8001b64:	4629      	mov	r1, r5
 8001b66:	f04f 0200 	mov.w	r2, #0
 8001b6a:	f04f 0300 	mov.w	r3, #0
 8001b6e:	014b      	lsls	r3, r1, #5
 8001b70:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001b74:	0142      	lsls	r2, r0, #5
 8001b76:	4610      	mov	r0, r2
 8001b78:	4619      	mov	r1, r3
 8001b7a:	1b00      	subs	r0, r0, r4
 8001b7c:	eb61 0105 	sbc.w	r1, r1, r5
 8001b80:	f04f 0200 	mov.w	r2, #0
 8001b84:	f04f 0300 	mov.w	r3, #0
 8001b88:	018b      	lsls	r3, r1, #6
 8001b8a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001b8e:	0182      	lsls	r2, r0, #6
 8001b90:	1a12      	subs	r2, r2, r0
 8001b92:	eb63 0301 	sbc.w	r3, r3, r1
 8001b96:	f04f 0000 	mov.w	r0, #0
 8001b9a:	f04f 0100 	mov.w	r1, #0
 8001b9e:	00d9      	lsls	r1, r3, #3
 8001ba0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001ba4:	00d0      	lsls	r0, r2, #3
 8001ba6:	4602      	mov	r2, r0
 8001ba8:	460b      	mov	r3, r1
 8001baa:	1912      	adds	r2, r2, r4
 8001bac:	eb45 0303 	adc.w	r3, r5, r3
 8001bb0:	f04f 0000 	mov.w	r0, #0
 8001bb4:	f04f 0100 	mov.w	r1, #0
 8001bb8:	0299      	lsls	r1, r3, #10
 8001bba:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001bbe:	0290      	lsls	r0, r2, #10
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	460b      	mov	r3, r1
 8001bc4:	4610      	mov	r0, r2
 8001bc6:	4619      	mov	r1, r3
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	461a      	mov	r2, r3
 8001bcc:	f04f 0300 	mov.w	r3, #0
 8001bd0:	f7fe fb0e 	bl	80001f0 <__aeabi_uldivmod>
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	460b      	mov	r3, r1
 8001bd8:	4613      	mov	r3, r2
 8001bda:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001bdc:	4b0b      	ldr	r3, [pc, #44]	; (8001c0c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	0c1b      	lsrs	r3, r3, #16
 8001be2:	f003 0303 	and.w	r3, r3, #3
 8001be6:	3301      	adds	r3, #1
 8001be8:	005b      	lsls	r3, r3, #1
 8001bea:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001bec:	68fa      	ldr	r2, [r7, #12]
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bf4:	60bb      	str	r3, [r7, #8]
      break;
 8001bf6:	e002      	b.n	8001bfe <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001bf8:	4b05      	ldr	r3, [pc, #20]	; (8001c10 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001bfa:	60bb      	str	r3, [r7, #8]
      break;
 8001bfc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001bfe:	68bb      	ldr	r3, [r7, #8]
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	3710      	adds	r7, #16
 8001c04:	46bd      	mov	sp, r7
 8001c06:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001c0a:	bf00      	nop
 8001c0c:	40023800 	.word	0x40023800
 8001c10:	00f42400 	.word	0x00f42400
 8001c14:	007a1200 	.word	0x007a1200

08001c18 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c1c:	4b03      	ldr	r3, [pc, #12]	; (8001c2c <HAL_RCC_GetHCLKFreq+0x14>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	46bd      	mov	sp, r7
 8001c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c28:	4770      	bx	lr
 8001c2a:	bf00      	nop
 8001c2c:	20000000 	.word	0x20000000

08001c30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001c34:	f7ff fff0 	bl	8001c18 <HAL_RCC_GetHCLKFreq>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	4b05      	ldr	r3, [pc, #20]	; (8001c50 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c3c:	689b      	ldr	r3, [r3, #8]
 8001c3e:	0a9b      	lsrs	r3, r3, #10
 8001c40:	f003 0307 	and.w	r3, r3, #7
 8001c44:	4903      	ldr	r1, [pc, #12]	; (8001c54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c46:	5ccb      	ldrb	r3, [r1, r3]
 8001c48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	bd80      	pop	{r7, pc}
 8001c50:	40023800 	.word	0x40023800
 8001c54:	08004c00 	.word	0x08004c00

08001c58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001c5c:	f7ff ffdc 	bl	8001c18 <HAL_RCC_GetHCLKFreq>
 8001c60:	4602      	mov	r2, r0
 8001c62:	4b05      	ldr	r3, [pc, #20]	; (8001c78 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001c64:	689b      	ldr	r3, [r3, #8]
 8001c66:	0b5b      	lsrs	r3, r3, #13
 8001c68:	f003 0307 	and.w	r3, r3, #7
 8001c6c:	4903      	ldr	r1, [pc, #12]	; (8001c7c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c6e:	5ccb      	ldrb	r3, [r1, r3]
 8001c70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	bd80      	pop	{r7, pc}
 8001c78:	40023800 	.word	0x40023800
 8001c7c:	08004c00 	.word	0x08004c00

08001c80 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b083      	sub	sp, #12
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
 8001c88:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	220f      	movs	r2, #15
 8001c8e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001c90:	4b12      	ldr	r3, [pc, #72]	; (8001cdc <HAL_RCC_GetClockConfig+0x5c>)
 8001c92:	689b      	ldr	r3, [r3, #8]
 8001c94:	f003 0203 	and.w	r2, r3, #3
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001c9c:	4b0f      	ldr	r3, [pc, #60]	; (8001cdc <HAL_RCC_GetClockConfig+0x5c>)
 8001c9e:	689b      	ldr	r3, [r3, #8]
 8001ca0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001ca8:	4b0c      	ldr	r3, [pc, #48]	; (8001cdc <HAL_RCC_GetClockConfig+0x5c>)
 8001caa:	689b      	ldr	r3, [r3, #8]
 8001cac:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001cb4:	4b09      	ldr	r3, [pc, #36]	; (8001cdc <HAL_RCC_GetClockConfig+0x5c>)
 8001cb6:	689b      	ldr	r3, [r3, #8]
 8001cb8:	08db      	lsrs	r3, r3, #3
 8001cba:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001cc2:	4b07      	ldr	r3, [pc, #28]	; (8001ce0 <HAL_RCC_GetClockConfig+0x60>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f003 0207 	and.w	r2, r3, #7
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	601a      	str	r2, [r3, #0]
}
 8001cce:	bf00      	nop
 8001cd0:	370c      	adds	r7, #12
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd8:	4770      	bx	lr
 8001cda:	bf00      	nop
 8001cdc:	40023800 	.word	0x40023800
 8001ce0:	40023c00 	.word	0x40023c00

08001ce4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b082      	sub	sp, #8
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d101      	bne.n	8001cf6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	e041      	b.n	8001d7a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cfc:	b2db      	uxtb	r3, r3
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d106      	bne.n	8001d10 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2200      	movs	r2, #0
 8001d06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001d0a:	6878      	ldr	r0, [r7, #4]
 8001d0c:	f000 f839 	bl	8001d82 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2202      	movs	r2, #2
 8001d14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681a      	ldr	r2, [r3, #0]
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	3304      	adds	r3, #4
 8001d20:	4619      	mov	r1, r3
 8001d22:	4610      	mov	r0, r2
 8001d24:	f000 f9ca 	bl	80020bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2201      	movs	r2, #1
 8001d34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2201      	movs	r2, #1
 8001d44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2201      	movs	r2, #1
 8001d4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2201      	movs	r2, #1
 8001d54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2201      	movs	r2, #1
 8001d64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2201      	movs	r2, #1
 8001d74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001d78:	2300      	movs	r3, #0
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	3708      	adds	r7, #8
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}

08001d82 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001d82:	b480      	push	{r7}
 8001d84:	b083      	sub	sp, #12
 8001d86:	af00      	add	r7, sp, #0
 8001d88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001d8a:	bf00      	nop
 8001d8c:	370c      	adds	r7, #12
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr
	...

08001d98 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b085      	sub	sp, #20
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001da6:	b2db      	uxtb	r3, r3
 8001da8:	2b01      	cmp	r3, #1
 8001daa:	d001      	beq.n	8001db0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001dac:	2301      	movs	r3, #1
 8001dae:	e044      	b.n	8001e3a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2202      	movs	r2, #2
 8001db4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	68da      	ldr	r2, [r3, #12]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f042 0201 	orr.w	r2, r2, #1
 8001dc6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a1e      	ldr	r2, [pc, #120]	; (8001e48 <HAL_TIM_Base_Start_IT+0xb0>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d018      	beq.n	8001e04 <HAL_TIM_Base_Start_IT+0x6c>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001dda:	d013      	beq.n	8001e04 <HAL_TIM_Base_Start_IT+0x6c>
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a1a      	ldr	r2, [pc, #104]	; (8001e4c <HAL_TIM_Base_Start_IT+0xb4>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d00e      	beq.n	8001e04 <HAL_TIM_Base_Start_IT+0x6c>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4a19      	ldr	r2, [pc, #100]	; (8001e50 <HAL_TIM_Base_Start_IT+0xb8>)
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d009      	beq.n	8001e04 <HAL_TIM_Base_Start_IT+0x6c>
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a17      	ldr	r2, [pc, #92]	; (8001e54 <HAL_TIM_Base_Start_IT+0xbc>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d004      	beq.n	8001e04 <HAL_TIM_Base_Start_IT+0x6c>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4a16      	ldr	r2, [pc, #88]	; (8001e58 <HAL_TIM_Base_Start_IT+0xc0>)
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d111      	bne.n	8001e28 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	689b      	ldr	r3, [r3, #8]
 8001e0a:	f003 0307 	and.w	r3, r3, #7
 8001e0e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	2b06      	cmp	r3, #6
 8001e14:	d010      	beq.n	8001e38 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	681a      	ldr	r2, [r3, #0]
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f042 0201 	orr.w	r2, r2, #1
 8001e24:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e26:	e007      	b.n	8001e38 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	681a      	ldr	r2, [r3, #0]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f042 0201 	orr.w	r2, r2, #1
 8001e36:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001e38:	2300      	movs	r3, #0
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	3714      	adds	r7, #20
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr
 8001e46:	bf00      	nop
 8001e48:	40010000 	.word	0x40010000
 8001e4c:	40000400 	.word	0x40000400
 8001e50:	40000800 	.word	0x40000800
 8001e54:	40000c00 	.word	0x40000c00
 8001e58:	40014000 	.word	0x40014000

08001e5c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b082      	sub	sp, #8
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	691b      	ldr	r3, [r3, #16]
 8001e6a:	f003 0302 	and.w	r3, r3, #2
 8001e6e:	2b02      	cmp	r3, #2
 8001e70:	d122      	bne.n	8001eb8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	68db      	ldr	r3, [r3, #12]
 8001e78:	f003 0302 	and.w	r3, r3, #2
 8001e7c:	2b02      	cmp	r3, #2
 8001e7e:	d11b      	bne.n	8001eb8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f06f 0202 	mvn.w	r2, #2
 8001e88:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	699b      	ldr	r3, [r3, #24]
 8001e96:	f003 0303 	and.w	r3, r3, #3
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d003      	beq.n	8001ea6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001e9e:	6878      	ldr	r0, [r7, #4]
 8001ea0:	f000 f8ee 	bl	8002080 <HAL_TIM_IC_CaptureCallback>
 8001ea4:	e005      	b.n	8001eb2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ea6:	6878      	ldr	r0, [r7, #4]
 8001ea8:	f000 f8e0 	bl	800206c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001eac:	6878      	ldr	r0, [r7, #4]
 8001eae:	f000 f8f1 	bl	8002094 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	691b      	ldr	r3, [r3, #16]
 8001ebe:	f003 0304 	and.w	r3, r3, #4
 8001ec2:	2b04      	cmp	r3, #4
 8001ec4:	d122      	bne.n	8001f0c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	68db      	ldr	r3, [r3, #12]
 8001ecc:	f003 0304 	and.w	r3, r3, #4
 8001ed0:	2b04      	cmp	r3, #4
 8001ed2:	d11b      	bne.n	8001f0c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f06f 0204 	mvn.w	r2, #4
 8001edc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2202      	movs	r2, #2
 8001ee2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	699b      	ldr	r3, [r3, #24]
 8001eea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d003      	beq.n	8001efa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ef2:	6878      	ldr	r0, [r7, #4]
 8001ef4:	f000 f8c4 	bl	8002080 <HAL_TIM_IC_CaptureCallback>
 8001ef8:	e005      	b.n	8001f06 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001efa:	6878      	ldr	r0, [r7, #4]
 8001efc:	f000 f8b6 	bl	800206c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f00:	6878      	ldr	r0, [r7, #4]
 8001f02:	f000 f8c7 	bl	8002094 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2200      	movs	r2, #0
 8001f0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	691b      	ldr	r3, [r3, #16]
 8001f12:	f003 0308 	and.w	r3, r3, #8
 8001f16:	2b08      	cmp	r3, #8
 8001f18:	d122      	bne.n	8001f60 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	68db      	ldr	r3, [r3, #12]
 8001f20:	f003 0308 	and.w	r3, r3, #8
 8001f24:	2b08      	cmp	r3, #8
 8001f26:	d11b      	bne.n	8001f60 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f06f 0208 	mvn.w	r2, #8
 8001f30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2204      	movs	r2, #4
 8001f36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	69db      	ldr	r3, [r3, #28]
 8001f3e:	f003 0303 	and.w	r3, r3, #3
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d003      	beq.n	8001f4e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f46:	6878      	ldr	r0, [r7, #4]
 8001f48:	f000 f89a 	bl	8002080 <HAL_TIM_IC_CaptureCallback>
 8001f4c:	e005      	b.n	8001f5a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f4e:	6878      	ldr	r0, [r7, #4]
 8001f50:	f000 f88c 	bl	800206c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f54:	6878      	ldr	r0, [r7, #4]
 8001f56:	f000 f89d 	bl	8002094 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	691b      	ldr	r3, [r3, #16]
 8001f66:	f003 0310 	and.w	r3, r3, #16
 8001f6a:	2b10      	cmp	r3, #16
 8001f6c:	d122      	bne.n	8001fb4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	68db      	ldr	r3, [r3, #12]
 8001f74:	f003 0310 	and.w	r3, r3, #16
 8001f78:	2b10      	cmp	r3, #16
 8001f7a:	d11b      	bne.n	8001fb4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f06f 0210 	mvn.w	r2, #16
 8001f84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2208      	movs	r2, #8
 8001f8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	69db      	ldr	r3, [r3, #28]
 8001f92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d003      	beq.n	8001fa2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f9a:	6878      	ldr	r0, [r7, #4]
 8001f9c:	f000 f870 	bl	8002080 <HAL_TIM_IC_CaptureCallback>
 8001fa0:	e005      	b.n	8001fae <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fa2:	6878      	ldr	r0, [r7, #4]
 8001fa4:	f000 f862 	bl	800206c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fa8:	6878      	ldr	r0, [r7, #4]
 8001faa:	f000 f873 	bl	8002094 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	691b      	ldr	r3, [r3, #16]
 8001fba:	f003 0301 	and.w	r3, r3, #1
 8001fbe:	2b01      	cmp	r3, #1
 8001fc0:	d10e      	bne.n	8001fe0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	68db      	ldr	r3, [r3, #12]
 8001fc8:	f003 0301 	and.w	r3, r3, #1
 8001fcc:	2b01      	cmp	r3, #1
 8001fce:	d107      	bne.n	8001fe0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f06f 0201 	mvn.w	r2, #1
 8001fd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001fda:	6878      	ldr	r0, [r7, #4]
 8001fdc:	f7fe fdb4 	bl	8000b48 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	691b      	ldr	r3, [r3, #16]
 8001fe6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fea:	2b80      	cmp	r3, #128	; 0x80
 8001fec:	d10e      	bne.n	800200c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	68db      	ldr	r3, [r3, #12]
 8001ff4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ff8:	2b80      	cmp	r3, #128	; 0x80
 8001ffa:	d107      	bne.n	800200c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002004:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002006:	6878      	ldr	r0, [r7, #4]
 8002008:	f000 f8e2 	bl	80021d0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	691b      	ldr	r3, [r3, #16]
 8002012:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002016:	2b40      	cmp	r3, #64	; 0x40
 8002018:	d10e      	bne.n	8002038 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	68db      	ldr	r3, [r3, #12]
 8002020:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002024:	2b40      	cmp	r3, #64	; 0x40
 8002026:	d107      	bne.n	8002038 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002030:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002032:	6878      	ldr	r0, [r7, #4]
 8002034:	f000 f838 	bl	80020a8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	691b      	ldr	r3, [r3, #16]
 800203e:	f003 0320 	and.w	r3, r3, #32
 8002042:	2b20      	cmp	r3, #32
 8002044:	d10e      	bne.n	8002064 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	68db      	ldr	r3, [r3, #12]
 800204c:	f003 0320 	and.w	r3, r3, #32
 8002050:	2b20      	cmp	r3, #32
 8002052:	d107      	bne.n	8002064 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f06f 0220 	mvn.w	r2, #32
 800205c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800205e:	6878      	ldr	r0, [r7, #4]
 8002060:	f000 f8ac 	bl	80021bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002064:	bf00      	nop
 8002066:	3708      	adds	r7, #8
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}

0800206c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800206c:	b480      	push	{r7}
 800206e:	b083      	sub	sp, #12
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002074:	bf00      	nop
 8002076:	370c      	adds	r7, #12
 8002078:	46bd      	mov	sp, r7
 800207a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207e:	4770      	bx	lr

08002080 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002080:	b480      	push	{r7}
 8002082:	b083      	sub	sp, #12
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002088:	bf00      	nop
 800208a:	370c      	adds	r7, #12
 800208c:	46bd      	mov	sp, r7
 800208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002092:	4770      	bx	lr

08002094 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002094:	b480      	push	{r7}
 8002096:	b083      	sub	sp, #12
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800209c:	bf00      	nop
 800209e:	370c      	adds	r7, #12
 80020a0:	46bd      	mov	sp, r7
 80020a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a6:	4770      	bx	lr

080020a8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b083      	sub	sp, #12
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80020b0:	bf00      	nop
 80020b2:	370c      	adds	r7, #12
 80020b4:	46bd      	mov	sp, r7
 80020b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ba:	4770      	bx	lr

080020bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80020bc:	b480      	push	{r7}
 80020be:	b085      	sub	sp, #20
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
 80020c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	4a34      	ldr	r2, [pc, #208]	; (80021a0 <TIM_Base_SetConfig+0xe4>)
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d00f      	beq.n	80020f4 <TIM_Base_SetConfig+0x38>
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020da:	d00b      	beq.n	80020f4 <TIM_Base_SetConfig+0x38>
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	4a31      	ldr	r2, [pc, #196]	; (80021a4 <TIM_Base_SetConfig+0xe8>)
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d007      	beq.n	80020f4 <TIM_Base_SetConfig+0x38>
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	4a30      	ldr	r2, [pc, #192]	; (80021a8 <TIM_Base_SetConfig+0xec>)
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d003      	beq.n	80020f4 <TIM_Base_SetConfig+0x38>
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	4a2f      	ldr	r2, [pc, #188]	; (80021ac <TIM_Base_SetConfig+0xf0>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d108      	bne.n	8002106 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	68fa      	ldr	r2, [r7, #12]
 8002102:	4313      	orrs	r3, r2
 8002104:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	4a25      	ldr	r2, [pc, #148]	; (80021a0 <TIM_Base_SetConfig+0xe4>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d01b      	beq.n	8002146 <TIM_Base_SetConfig+0x8a>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002114:	d017      	beq.n	8002146 <TIM_Base_SetConfig+0x8a>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	4a22      	ldr	r2, [pc, #136]	; (80021a4 <TIM_Base_SetConfig+0xe8>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d013      	beq.n	8002146 <TIM_Base_SetConfig+0x8a>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	4a21      	ldr	r2, [pc, #132]	; (80021a8 <TIM_Base_SetConfig+0xec>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d00f      	beq.n	8002146 <TIM_Base_SetConfig+0x8a>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	4a20      	ldr	r2, [pc, #128]	; (80021ac <TIM_Base_SetConfig+0xf0>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d00b      	beq.n	8002146 <TIM_Base_SetConfig+0x8a>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	4a1f      	ldr	r2, [pc, #124]	; (80021b0 <TIM_Base_SetConfig+0xf4>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d007      	beq.n	8002146 <TIM_Base_SetConfig+0x8a>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	4a1e      	ldr	r2, [pc, #120]	; (80021b4 <TIM_Base_SetConfig+0xf8>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d003      	beq.n	8002146 <TIM_Base_SetConfig+0x8a>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	4a1d      	ldr	r2, [pc, #116]	; (80021b8 <TIM_Base_SetConfig+0xfc>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d108      	bne.n	8002158 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800214c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	68db      	ldr	r3, [r3, #12]
 8002152:	68fa      	ldr	r2, [r7, #12]
 8002154:	4313      	orrs	r3, r2
 8002156:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	695b      	ldr	r3, [r3, #20]
 8002162:	4313      	orrs	r3, r2
 8002164:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	68fa      	ldr	r2, [r7, #12]
 800216a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	689a      	ldr	r2, [r3, #8]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	681a      	ldr	r2, [r3, #0]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	4a08      	ldr	r2, [pc, #32]	; (80021a0 <TIM_Base_SetConfig+0xe4>)
 8002180:	4293      	cmp	r3, r2
 8002182:	d103      	bne.n	800218c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	691a      	ldr	r2, [r3, #16]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2201      	movs	r2, #1
 8002190:	615a      	str	r2, [r3, #20]
}
 8002192:	bf00      	nop
 8002194:	3714      	adds	r7, #20
 8002196:	46bd      	mov	sp, r7
 8002198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219c:	4770      	bx	lr
 800219e:	bf00      	nop
 80021a0:	40010000 	.word	0x40010000
 80021a4:	40000400 	.word	0x40000400
 80021a8:	40000800 	.word	0x40000800
 80021ac:	40000c00 	.word	0x40000c00
 80021b0:	40014000 	.word	0x40014000
 80021b4:	40014400 	.word	0x40014400
 80021b8:	40014800 	.word	0x40014800

080021bc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80021bc:	b480      	push	{r7}
 80021be:	b083      	sub	sp, #12
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80021c4:	bf00      	nop
 80021c6:	370c      	adds	r7, #12
 80021c8:	46bd      	mov	sp, r7
 80021ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ce:	4770      	bx	lr

080021d0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b083      	sub	sp, #12
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80021d8:	bf00      	nop
 80021da:	370c      	adds	r7, #12
 80021dc:	46bd      	mov	sp, r7
 80021de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e2:	4770      	bx	lr

080021e4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b082      	sub	sp, #8
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d101      	bne.n	80021f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80021f2:	2301      	movs	r3, #1
 80021f4:	e03f      	b.n	8002276 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021fc:	b2db      	uxtb	r3, r3
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d106      	bne.n	8002210 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2200      	movs	r2, #0
 8002206:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800220a:	6878      	ldr	r0, [r7, #4]
 800220c:	f7fe fce0 	bl	8000bd0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2224      	movs	r2, #36	; 0x24
 8002214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	68da      	ldr	r2, [r3, #12]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002226:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002228:	6878      	ldr	r0, [r7, #4]
 800222a:	f000 f929 	bl	8002480 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	691a      	ldr	r2, [r3, #16]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800223c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	695a      	ldr	r2, [r3, #20]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800224c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	68da      	ldr	r2, [r3, #12]
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800225c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2200      	movs	r2, #0
 8002262:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2220      	movs	r2, #32
 8002268:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2220      	movs	r2, #32
 8002270:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002274:	2300      	movs	r3, #0
}
 8002276:	4618      	mov	r0, r3
 8002278:	3708      	adds	r7, #8
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}

0800227e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800227e:	b580      	push	{r7, lr}
 8002280:	b08a      	sub	sp, #40	; 0x28
 8002282:	af02      	add	r7, sp, #8
 8002284:	60f8      	str	r0, [r7, #12]
 8002286:	60b9      	str	r1, [r7, #8]
 8002288:	603b      	str	r3, [r7, #0]
 800228a:	4613      	mov	r3, r2
 800228c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800228e:	2300      	movs	r3, #0
 8002290:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002298:	b2db      	uxtb	r3, r3
 800229a:	2b20      	cmp	r3, #32
 800229c:	d17c      	bne.n	8002398 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800229e:	68bb      	ldr	r3, [r7, #8]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d002      	beq.n	80022aa <HAL_UART_Transmit+0x2c>
 80022a4:	88fb      	ldrh	r3, [r7, #6]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d101      	bne.n	80022ae <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
 80022ac:	e075      	b.n	800239a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022b4:	2b01      	cmp	r3, #1
 80022b6:	d101      	bne.n	80022bc <HAL_UART_Transmit+0x3e>
 80022b8:	2302      	movs	r3, #2
 80022ba:	e06e      	b.n	800239a <HAL_UART_Transmit+0x11c>
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	2201      	movs	r2, #1
 80022c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	2200      	movs	r2, #0
 80022c8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	2221      	movs	r2, #33	; 0x21
 80022ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80022d2:	f7fe fdb1 	bl	8000e38 <HAL_GetTick>
 80022d6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	88fa      	ldrh	r2, [r7, #6]
 80022dc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	88fa      	ldrh	r2, [r7, #6]
 80022e2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	689b      	ldr	r3, [r3, #8]
 80022e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80022ec:	d108      	bne.n	8002300 <HAL_UART_Transmit+0x82>
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	691b      	ldr	r3, [r3, #16]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d104      	bne.n	8002300 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80022f6:	2300      	movs	r3, #0
 80022f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80022fa:	68bb      	ldr	r3, [r7, #8]
 80022fc:	61bb      	str	r3, [r7, #24]
 80022fe:	e003      	b.n	8002308 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002300:	68bb      	ldr	r3, [r7, #8]
 8002302:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002304:	2300      	movs	r3, #0
 8002306:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	2200      	movs	r2, #0
 800230c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002310:	e02a      	b.n	8002368 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	9300      	str	r3, [sp, #0]
 8002316:	697b      	ldr	r3, [r7, #20]
 8002318:	2200      	movs	r2, #0
 800231a:	2180      	movs	r1, #128	; 0x80
 800231c:	68f8      	ldr	r0, [r7, #12]
 800231e:	f000 f840 	bl	80023a2 <UART_WaitOnFlagUntilTimeout>
 8002322:	4603      	mov	r3, r0
 8002324:	2b00      	cmp	r3, #0
 8002326:	d001      	beq.n	800232c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002328:	2303      	movs	r3, #3
 800232a:	e036      	b.n	800239a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800232c:	69fb      	ldr	r3, [r7, #28]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d10b      	bne.n	800234a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002332:	69bb      	ldr	r3, [r7, #24]
 8002334:	881b      	ldrh	r3, [r3, #0]
 8002336:	461a      	mov	r2, r3
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002340:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002342:	69bb      	ldr	r3, [r7, #24]
 8002344:	3302      	adds	r3, #2
 8002346:	61bb      	str	r3, [r7, #24]
 8002348:	e007      	b.n	800235a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800234a:	69fb      	ldr	r3, [r7, #28]
 800234c:	781a      	ldrb	r2, [r3, #0]
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002354:	69fb      	ldr	r3, [r7, #28]
 8002356:	3301      	adds	r3, #1
 8002358:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800235e:	b29b      	uxth	r3, r3
 8002360:	3b01      	subs	r3, #1
 8002362:	b29a      	uxth	r2, r3
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800236c:	b29b      	uxth	r3, r3
 800236e:	2b00      	cmp	r3, #0
 8002370:	d1cf      	bne.n	8002312 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	9300      	str	r3, [sp, #0]
 8002376:	697b      	ldr	r3, [r7, #20]
 8002378:	2200      	movs	r2, #0
 800237a:	2140      	movs	r1, #64	; 0x40
 800237c:	68f8      	ldr	r0, [r7, #12]
 800237e:	f000 f810 	bl	80023a2 <UART_WaitOnFlagUntilTimeout>
 8002382:	4603      	mov	r3, r0
 8002384:	2b00      	cmp	r3, #0
 8002386:	d001      	beq.n	800238c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002388:	2303      	movs	r3, #3
 800238a:	e006      	b.n	800239a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	2220      	movs	r2, #32
 8002390:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002394:	2300      	movs	r3, #0
 8002396:	e000      	b.n	800239a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002398:	2302      	movs	r3, #2
  }
}
 800239a:	4618      	mov	r0, r3
 800239c:	3720      	adds	r7, #32
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}

080023a2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80023a2:	b580      	push	{r7, lr}
 80023a4:	b090      	sub	sp, #64	; 0x40
 80023a6:	af00      	add	r7, sp, #0
 80023a8:	60f8      	str	r0, [r7, #12]
 80023aa:	60b9      	str	r1, [r7, #8]
 80023ac:	603b      	str	r3, [r7, #0]
 80023ae:	4613      	mov	r3, r2
 80023b0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80023b2:	e050      	b.n	8002456 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80023b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80023b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023ba:	d04c      	beq.n	8002456 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80023bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d007      	beq.n	80023d2 <UART_WaitOnFlagUntilTimeout+0x30>
 80023c2:	f7fe fd39 	bl	8000e38 <HAL_GetTick>
 80023c6:	4602      	mov	r2, r0
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	1ad3      	subs	r3, r2, r3
 80023cc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80023ce:	429a      	cmp	r2, r3
 80023d0:	d241      	bcs.n	8002456 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	330c      	adds	r3, #12
 80023d8:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023dc:	e853 3f00 	ldrex	r3, [r3]
 80023e0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80023e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80023e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	330c      	adds	r3, #12
 80023f0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80023f2:	637a      	str	r2, [r7, #52]	; 0x34
 80023f4:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023f6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80023f8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80023fa:	e841 2300 	strex	r3, r2, [r1]
 80023fe:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002402:	2b00      	cmp	r3, #0
 8002404:	d1e5      	bne.n	80023d2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	3314      	adds	r3, #20
 800240c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800240e:	697b      	ldr	r3, [r7, #20]
 8002410:	e853 3f00 	ldrex	r3, [r3]
 8002414:	613b      	str	r3, [r7, #16]
   return(result);
 8002416:	693b      	ldr	r3, [r7, #16]
 8002418:	f023 0301 	bic.w	r3, r3, #1
 800241c:	63bb      	str	r3, [r7, #56]	; 0x38
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	3314      	adds	r3, #20
 8002424:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002426:	623a      	str	r2, [r7, #32]
 8002428:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800242a:	69f9      	ldr	r1, [r7, #28]
 800242c:	6a3a      	ldr	r2, [r7, #32]
 800242e:	e841 2300 	strex	r3, r2, [r1]
 8002432:	61bb      	str	r3, [r7, #24]
   return(result);
 8002434:	69bb      	ldr	r3, [r7, #24]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d1e5      	bne.n	8002406 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	2220      	movs	r2, #32
 800243e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	2220      	movs	r2, #32
 8002446:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	2200      	movs	r2, #0
 800244e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002452:	2303      	movs	r3, #3
 8002454:	e00f      	b.n	8002476 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	681a      	ldr	r2, [r3, #0]
 800245c:	68bb      	ldr	r3, [r7, #8]
 800245e:	4013      	ands	r3, r2
 8002460:	68ba      	ldr	r2, [r7, #8]
 8002462:	429a      	cmp	r2, r3
 8002464:	bf0c      	ite	eq
 8002466:	2301      	moveq	r3, #1
 8002468:	2300      	movne	r3, #0
 800246a:	b2db      	uxtb	r3, r3
 800246c:	461a      	mov	r2, r3
 800246e:	79fb      	ldrb	r3, [r7, #7]
 8002470:	429a      	cmp	r2, r3
 8002472:	d09f      	beq.n	80023b4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002474:	2300      	movs	r3, #0
}
 8002476:	4618      	mov	r0, r3
 8002478:	3740      	adds	r7, #64	; 0x40
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}
	...

08002480 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002480:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002484:	b09f      	sub	sp, #124	; 0x7c
 8002486:	af00      	add	r7, sp, #0
 8002488:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800248a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	691b      	ldr	r3, [r3, #16]
 8002490:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002494:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002496:	68d9      	ldr	r1, [r3, #12]
 8002498:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800249a:	681a      	ldr	r2, [r3, #0]
 800249c:	ea40 0301 	orr.w	r3, r0, r1
 80024a0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80024a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024a4:	689a      	ldr	r2, [r3, #8]
 80024a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024a8:	691b      	ldr	r3, [r3, #16]
 80024aa:	431a      	orrs	r2, r3
 80024ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024ae:	695b      	ldr	r3, [r3, #20]
 80024b0:	431a      	orrs	r2, r3
 80024b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024b4:	69db      	ldr	r3, [r3, #28]
 80024b6:	4313      	orrs	r3, r2
 80024b8:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80024ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	68db      	ldr	r3, [r3, #12]
 80024c0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80024c4:	f021 010c 	bic.w	r1, r1, #12
 80024c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024ca:	681a      	ldr	r2, [r3, #0]
 80024cc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80024ce:	430b      	orrs	r3, r1
 80024d0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80024d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	695b      	ldr	r3, [r3, #20]
 80024d8:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80024dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024de:	6999      	ldr	r1, [r3, #24]
 80024e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024e2:	681a      	ldr	r2, [r3, #0]
 80024e4:	ea40 0301 	orr.w	r3, r0, r1
 80024e8:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80024ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024ec:	681a      	ldr	r2, [r3, #0]
 80024ee:	4bc5      	ldr	r3, [pc, #788]	; (8002804 <UART_SetConfig+0x384>)
 80024f0:	429a      	cmp	r2, r3
 80024f2:	d004      	beq.n	80024fe <UART_SetConfig+0x7e>
 80024f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024f6:	681a      	ldr	r2, [r3, #0]
 80024f8:	4bc3      	ldr	r3, [pc, #780]	; (8002808 <UART_SetConfig+0x388>)
 80024fa:	429a      	cmp	r2, r3
 80024fc:	d103      	bne.n	8002506 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80024fe:	f7ff fbab 	bl	8001c58 <HAL_RCC_GetPCLK2Freq>
 8002502:	6778      	str	r0, [r7, #116]	; 0x74
 8002504:	e002      	b.n	800250c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002506:	f7ff fb93 	bl	8001c30 <HAL_RCC_GetPCLK1Freq>
 800250a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800250c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800250e:	69db      	ldr	r3, [r3, #28]
 8002510:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002514:	f040 80b6 	bne.w	8002684 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002518:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800251a:	461c      	mov	r4, r3
 800251c:	f04f 0500 	mov.w	r5, #0
 8002520:	4622      	mov	r2, r4
 8002522:	462b      	mov	r3, r5
 8002524:	1891      	adds	r1, r2, r2
 8002526:	6439      	str	r1, [r7, #64]	; 0x40
 8002528:	415b      	adcs	r3, r3
 800252a:	647b      	str	r3, [r7, #68]	; 0x44
 800252c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002530:	1912      	adds	r2, r2, r4
 8002532:	eb45 0303 	adc.w	r3, r5, r3
 8002536:	f04f 0000 	mov.w	r0, #0
 800253a:	f04f 0100 	mov.w	r1, #0
 800253e:	00d9      	lsls	r1, r3, #3
 8002540:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002544:	00d0      	lsls	r0, r2, #3
 8002546:	4602      	mov	r2, r0
 8002548:	460b      	mov	r3, r1
 800254a:	1911      	adds	r1, r2, r4
 800254c:	6639      	str	r1, [r7, #96]	; 0x60
 800254e:	416b      	adcs	r3, r5
 8002550:	667b      	str	r3, [r7, #100]	; 0x64
 8002552:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	461a      	mov	r2, r3
 8002558:	f04f 0300 	mov.w	r3, #0
 800255c:	1891      	adds	r1, r2, r2
 800255e:	63b9      	str	r1, [r7, #56]	; 0x38
 8002560:	415b      	adcs	r3, r3
 8002562:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002564:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002568:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800256c:	f7fd fe40 	bl	80001f0 <__aeabi_uldivmod>
 8002570:	4602      	mov	r2, r0
 8002572:	460b      	mov	r3, r1
 8002574:	4ba5      	ldr	r3, [pc, #660]	; (800280c <UART_SetConfig+0x38c>)
 8002576:	fba3 2302 	umull	r2, r3, r3, r2
 800257a:	095b      	lsrs	r3, r3, #5
 800257c:	011e      	lsls	r6, r3, #4
 800257e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002580:	461c      	mov	r4, r3
 8002582:	f04f 0500 	mov.w	r5, #0
 8002586:	4622      	mov	r2, r4
 8002588:	462b      	mov	r3, r5
 800258a:	1891      	adds	r1, r2, r2
 800258c:	6339      	str	r1, [r7, #48]	; 0x30
 800258e:	415b      	adcs	r3, r3
 8002590:	637b      	str	r3, [r7, #52]	; 0x34
 8002592:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002596:	1912      	adds	r2, r2, r4
 8002598:	eb45 0303 	adc.w	r3, r5, r3
 800259c:	f04f 0000 	mov.w	r0, #0
 80025a0:	f04f 0100 	mov.w	r1, #0
 80025a4:	00d9      	lsls	r1, r3, #3
 80025a6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80025aa:	00d0      	lsls	r0, r2, #3
 80025ac:	4602      	mov	r2, r0
 80025ae:	460b      	mov	r3, r1
 80025b0:	1911      	adds	r1, r2, r4
 80025b2:	65b9      	str	r1, [r7, #88]	; 0x58
 80025b4:	416b      	adcs	r3, r5
 80025b6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80025b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	461a      	mov	r2, r3
 80025be:	f04f 0300 	mov.w	r3, #0
 80025c2:	1891      	adds	r1, r2, r2
 80025c4:	62b9      	str	r1, [r7, #40]	; 0x28
 80025c6:	415b      	adcs	r3, r3
 80025c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80025ca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80025ce:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80025d2:	f7fd fe0d 	bl	80001f0 <__aeabi_uldivmod>
 80025d6:	4602      	mov	r2, r0
 80025d8:	460b      	mov	r3, r1
 80025da:	4b8c      	ldr	r3, [pc, #560]	; (800280c <UART_SetConfig+0x38c>)
 80025dc:	fba3 1302 	umull	r1, r3, r3, r2
 80025e0:	095b      	lsrs	r3, r3, #5
 80025e2:	2164      	movs	r1, #100	; 0x64
 80025e4:	fb01 f303 	mul.w	r3, r1, r3
 80025e8:	1ad3      	subs	r3, r2, r3
 80025ea:	00db      	lsls	r3, r3, #3
 80025ec:	3332      	adds	r3, #50	; 0x32
 80025ee:	4a87      	ldr	r2, [pc, #540]	; (800280c <UART_SetConfig+0x38c>)
 80025f0:	fba2 2303 	umull	r2, r3, r2, r3
 80025f4:	095b      	lsrs	r3, r3, #5
 80025f6:	005b      	lsls	r3, r3, #1
 80025f8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80025fc:	441e      	add	r6, r3
 80025fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002600:	4618      	mov	r0, r3
 8002602:	f04f 0100 	mov.w	r1, #0
 8002606:	4602      	mov	r2, r0
 8002608:	460b      	mov	r3, r1
 800260a:	1894      	adds	r4, r2, r2
 800260c:	623c      	str	r4, [r7, #32]
 800260e:	415b      	adcs	r3, r3
 8002610:	627b      	str	r3, [r7, #36]	; 0x24
 8002612:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002616:	1812      	adds	r2, r2, r0
 8002618:	eb41 0303 	adc.w	r3, r1, r3
 800261c:	f04f 0400 	mov.w	r4, #0
 8002620:	f04f 0500 	mov.w	r5, #0
 8002624:	00dd      	lsls	r5, r3, #3
 8002626:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800262a:	00d4      	lsls	r4, r2, #3
 800262c:	4622      	mov	r2, r4
 800262e:	462b      	mov	r3, r5
 8002630:	1814      	adds	r4, r2, r0
 8002632:	653c      	str	r4, [r7, #80]	; 0x50
 8002634:	414b      	adcs	r3, r1
 8002636:	657b      	str	r3, [r7, #84]	; 0x54
 8002638:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	461a      	mov	r2, r3
 800263e:	f04f 0300 	mov.w	r3, #0
 8002642:	1891      	adds	r1, r2, r2
 8002644:	61b9      	str	r1, [r7, #24]
 8002646:	415b      	adcs	r3, r3
 8002648:	61fb      	str	r3, [r7, #28]
 800264a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800264e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8002652:	f7fd fdcd 	bl	80001f0 <__aeabi_uldivmod>
 8002656:	4602      	mov	r2, r0
 8002658:	460b      	mov	r3, r1
 800265a:	4b6c      	ldr	r3, [pc, #432]	; (800280c <UART_SetConfig+0x38c>)
 800265c:	fba3 1302 	umull	r1, r3, r3, r2
 8002660:	095b      	lsrs	r3, r3, #5
 8002662:	2164      	movs	r1, #100	; 0x64
 8002664:	fb01 f303 	mul.w	r3, r1, r3
 8002668:	1ad3      	subs	r3, r2, r3
 800266a:	00db      	lsls	r3, r3, #3
 800266c:	3332      	adds	r3, #50	; 0x32
 800266e:	4a67      	ldr	r2, [pc, #412]	; (800280c <UART_SetConfig+0x38c>)
 8002670:	fba2 2303 	umull	r2, r3, r2, r3
 8002674:	095b      	lsrs	r3, r3, #5
 8002676:	f003 0207 	and.w	r2, r3, #7
 800267a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4432      	add	r2, r6
 8002680:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002682:	e0b9      	b.n	80027f8 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002684:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002686:	461c      	mov	r4, r3
 8002688:	f04f 0500 	mov.w	r5, #0
 800268c:	4622      	mov	r2, r4
 800268e:	462b      	mov	r3, r5
 8002690:	1891      	adds	r1, r2, r2
 8002692:	6139      	str	r1, [r7, #16]
 8002694:	415b      	adcs	r3, r3
 8002696:	617b      	str	r3, [r7, #20]
 8002698:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800269c:	1912      	adds	r2, r2, r4
 800269e:	eb45 0303 	adc.w	r3, r5, r3
 80026a2:	f04f 0000 	mov.w	r0, #0
 80026a6:	f04f 0100 	mov.w	r1, #0
 80026aa:	00d9      	lsls	r1, r3, #3
 80026ac:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80026b0:	00d0      	lsls	r0, r2, #3
 80026b2:	4602      	mov	r2, r0
 80026b4:	460b      	mov	r3, r1
 80026b6:	eb12 0804 	adds.w	r8, r2, r4
 80026ba:	eb43 0905 	adc.w	r9, r3, r5
 80026be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	4618      	mov	r0, r3
 80026c4:	f04f 0100 	mov.w	r1, #0
 80026c8:	f04f 0200 	mov.w	r2, #0
 80026cc:	f04f 0300 	mov.w	r3, #0
 80026d0:	008b      	lsls	r3, r1, #2
 80026d2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80026d6:	0082      	lsls	r2, r0, #2
 80026d8:	4640      	mov	r0, r8
 80026da:	4649      	mov	r1, r9
 80026dc:	f7fd fd88 	bl	80001f0 <__aeabi_uldivmod>
 80026e0:	4602      	mov	r2, r0
 80026e2:	460b      	mov	r3, r1
 80026e4:	4b49      	ldr	r3, [pc, #292]	; (800280c <UART_SetConfig+0x38c>)
 80026e6:	fba3 2302 	umull	r2, r3, r3, r2
 80026ea:	095b      	lsrs	r3, r3, #5
 80026ec:	011e      	lsls	r6, r3, #4
 80026ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80026f0:	4618      	mov	r0, r3
 80026f2:	f04f 0100 	mov.w	r1, #0
 80026f6:	4602      	mov	r2, r0
 80026f8:	460b      	mov	r3, r1
 80026fa:	1894      	adds	r4, r2, r2
 80026fc:	60bc      	str	r4, [r7, #8]
 80026fe:	415b      	adcs	r3, r3
 8002700:	60fb      	str	r3, [r7, #12]
 8002702:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002706:	1812      	adds	r2, r2, r0
 8002708:	eb41 0303 	adc.w	r3, r1, r3
 800270c:	f04f 0400 	mov.w	r4, #0
 8002710:	f04f 0500 	mov.w	r5, #0
 8002714:	00dd      	lsls	r5, r3, #3
 8002716:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800271a:	00d4      	lsls	r4, r2, #3
 800271c:	4622      	mov	r2, r4
 800271e:	462b      	mov	r3, r5
 8002720:	1814      	adds	r4, r2, r0
 8002722:	64bc      	str	r4, [r7, #72]	; 0x48
 8002724:	414b      	adcs	r3, r1
 8002726:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002728:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	4618      	mov	r0, r3
 800272e:	f04f 0100 	mov.w	r1, #0
 8002732:	f04f 0200 	mov.w	r2, #0
 8002736:	f04f 0300 	mov.w	r3, #0
 800273a:	008b      	lsls	r3, r1, #2
 800273c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002740:	0082      	lsls	r2, r0, #2
 8002742:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8002746:	f7fd fd53 	bl	80001f0 <__aeabi_uldivmod>
 800274a:	4602      	mov	r2, r0
 800274c:	460b      	mov	r3, r1
 800274e:	4b2f      	ldr	r3, [pc, #188]	; (800280c <UART_SetConfig+0x38c>)
 8002750:	fba3 1302 	umull	r1, r3, r3, r2
 8002754:	095b      	lsrs	r3, r3, #5
 8002756:	2164      	movs	r1, #100	; 0x64
 8002758:	fb01 f303 	mul.w	r3, r1, r3
 800275c:	1ad3      	subs	r3, r2, r3
 800275e:	011b      	lsls	r3, r3, #4
 8002760:	3332      	adds	r3, #50	; 0x32
 8002762:	4a2a      	ldr	r2, [pc, #168]	; (800280c <UART_SetConfig+0x38c>)
 8002764:	fba2 2303 	umull	r2, r3, r2, r3
 8002768:	095b      	lsrs	r3, r3, #5
 800276a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800276e:	441e      	add	r6, r3
 8002770:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002772:	4618      	mov	r0, r3
 8002774:	f04f 0100 	mov.w	r1, #0
 8002778:	4602      	mov	r2, r0
 800277a:	460b      	mov	r3, r1
 800277c:	1894      	adds	r4, r2, r2
 800277e:	603c      	str	r4, [r7, #0]
 8002780:	415b      	adcs	r3, r3
 8002782:	607b      	str	r3, [r7, #4]
 8002784:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002788:	1812      	adds	r2, r2, r0
 800278a:	eb41 0303 	adc.w	r3, r1, r3
 800278e:	f04f 0400 	mov.w	r4, #0
 8002792:	f04f 0500 	mov.w	r5, #0
 8002796:	00dd      	lsls	r5, r3, #3
 8002798:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800279c:	00d4      	lsls	r4, r2, #3
 800279e:	4622      	mov	r2, r4
 80027a0:	462b      	mov	r3, r5
 80027a2:	eb12 0a00 	adds.w	sl, r2, r0
 80027a6:	eb43 0b01 	adc.w	fp, r3, r1
 80027aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	4618      	mov	r0, r3
 80027b0:	f04f 0100 	mov.w	r1, #0
 80027b4:	f04f 0200 	mov.w	r2, #0
 80027b8:	f04f 0300 	mov.w	r3, #0
 80027bc:	008b      	lsls	r3, r1, #2
 80027be:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80027c2:	0082      	lsls	r2, r0, #2
 80027c4:	4650      	mov	r0, sl
 80027c6:	4659      	mov	r1, fp
 80027c8:	f7fd fd12 	bl	80001f0 <__aeabi_uldivmod>
 80027cc:	4602      	mov	r2, r0
 80027ce:	460b      	mov	r3, r1
 80027d0:	4b0e      	ldr	r3, [pc, #56]	; (800280c <UART_SetConfig+0x38c>)
 80027d2:	fba3 1302 	umull	r1, r3, r3, r2
 80027d6:	095b      	lsrs	r3, r3, #5
 80027d8:	2164      	movs	r1, #100	; 0x64
 80027da:	fb01 f303 	mul.w	r3, r1, r3
 80027de:	1ad3      	subs	r3, r2, r3
 80027e0:	011b      	lsls	r3, r3, #4
 80027e2:	3332      	adds	r3, #50	; 0x32
 80027e4:	4a09      	ldr	r2, [pc, #36]	; (800280c <UART_SetConfig+0x38c>)
 80027e6:	fba2 2303 	umull	r2, r3, r2, r3
 80027ea:	095b      	lsrs	r3, r3, #5
 80027ec:	f003 020f 	and.w	r2, r3, #15
 80027f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4432      	add	r2, r6
 80027f6:	609a      	str	r2, [r3, #8]
}
 80027f8:	bf00      	nop
 80027fa:	377c      	adds	r7, #124	; 0x7c
 80027fc:	46bd      	mov	sp, r7
 80027fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002802:	bf00      	nop
 8002804:	40011000 	.word	0x40011000
 8002808:	40011400 	.word	0x40011400
 800280c:	51eb851f 	.word	0x51eb851f

08002810 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8002814:	f000 fef8 	bl	8003608 <vTaskStartScheduler>
  
  return osOK;
 8002818:	2300      	movs	r3, #0
}
 800281a:	4618      	mov	r0, r3
 800281c:	bd80      	pop	{r7, pc}

0800281e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800281e:	b480      	push	{r7}
 8002820:	b083      	sub	sp, #12
 8002822:	af00      	add	r7, sp, #0
 8002824:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	f103 0208 	add.w	r2, r3, #8
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	f04f 32ff 	mov.w	r2, #4294967295
 8002836:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	f103 0208 	add.w	r2, r3, #8
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	f103 0208 	add.w	r2, r3, #8
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2200      	movs	r2, #0
 8002850:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002852:	bf00      	nop
 8002854:	370c      	adds	r7, #12
 8002856:	46bd      	mov	sp, r7
 8002858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285c:	4770      	bx	lr

0800285e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800285e:	b480      	push	{r7}
 8002860:	b083      	sub	sp, #12
 8002862:	af00      	add	r7, sp, #0
 8002864:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2200      	movs	r2, #0
 800286a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800286c:	bf00      	nop
 800286e:	370c      	adds	r7, #12
 8002870:	46bd      	mov	sp, r7
 8002872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002876:	4770      	bx	lr

08002878 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002878:	b480      	push	{r7}
 800287a:	b085      	sub	sp, #20
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
 8002880:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	68fa      	ldr	r2, [r7, #12]
 800288c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	689a      	ldr	r2, [r3, #8]
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	689b      	ldr	r3, [r3, #8]
 800289a:	683a      	ldr	r2, [r7, #0]
 800289c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	683a      	ldr	r2, [r7, #0]
 80028a2:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	687a      	ldr	r2, [r7, #4]
 80028a8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	1c5a      	adds	r2, r3, #1
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	601a      	str	r2, [r3, #0]
}
 80028b4:	bf00      	nop
 80028b6:	3714      	adds	r7, #20
 80028b8:	46bd      	mov	sp, r7
 80028ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028be:	4770      	bx	lr

080028c0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80028c0:	b480      	push	{r7}
 80028c2:	b085      	sub	sp, #20
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
 80028c8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80028d0:	68bb      	ldr	r3, [r7, #8]
 80028d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028d6:	d103      	bne.n	80028e0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	691b      	ldr	r3, [r3, #16]
 80028dc:	60fb      	str	r3, [r7, #12]
 80028de:	e00c      	b.n	80028fa <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	3308      	adds	r3, #8
 80028e4:	60fb      	str	r3, [r7, #12]
 80028e6:	e002      	b.n	80028ee <vListInsert+0x2e>
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	60fb      	str	r3, [r7, #12]
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	68ba      	ldr	r2, [r7, #8]
 80028f6:	429a      	cmp	r2, r3
 80028f8:	d2f6      	bcs.n	80028e8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	685a      	ldr	r2, [r3, #4]
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	683a      	ldr	r2, [r7, #0]
 8002908:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	68fa      	ldr	r2, [r7, #12]
 800290e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	683a      	ldr	r2, [r7, #0]
 8002914:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	687a      	ldr	r2, [r7, #4]
 800291a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	1c5a      	adds	r2, r3, #1
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	601a      	str	r2, [r3, #0]
}
 8002926:	bf00      	nop
 8002928:	3714      	adds	r7, #20
 800292a:	46bd      	mov	sp, r7
 800292c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002930:	4770      	bx	lr

08002932 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002932:	b480      	push	{r7}
 8002934:	b085      	sub	sp, #20
 8002936:	af00      	add	r7, sp, #0
 8002938:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	691b      	ldr	r3, [r3, #16]
 800293e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	687a      	ldr	r2, [r7, #4]
 8002946:	6892      	ldr	r2, [r2, #8]
 8002948:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	689b      	ldr	r3, [r3, #8]
 800294e:	687a      	ldr	r2, [r7, #4]
 8002950:	6852      	ldr	r2, [r2, #4]
 8002952:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	687a      	ldr	r2, [r7, #4]
 800295a:	429a      	cmp	r2, r3
 800295c:	d103      	bne.n	8002966 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	689a      	ldr	r2, [r3, #8]
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2200      	movs	r2, #0
 800296a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	1e5a      	subs	r2, r3, #1
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
}
 800297a:	4618      	mov	r0, r3
 800297c:	3714      	adds	r7, #20
 800297e:	46bd      	mov	sp, r7
 8002980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002984:	4770      	bx	lr
	...

08002988 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b084      	sub	sp, #16
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
 8002990:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d10a      	bne.n	80029b2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800299c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029a0:	f383 8811 	msr	BASEPRI, r3
 80029a4:	f3bf 8f6f 	isb	sy
 80029a8:	f3bf 8f4f 	dsb	sy
 80029ac:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80029ae:	bf00      	nop
 80029b0:	e7fe      	b.n	80029b0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80029b2:	f001 fd87 	bl	80044c4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681a      	ldr	r2, [r3, #0]
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029be:	68f9      	ldr	r1, [r7, #12]
 80029c0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80029c2:	fb01 f303 	mul.w	r3, r1, r3
 80029c6:	441a      	add	r2, r3
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	2200      	movs	r2, #0
 80029d0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681a      	ldr	r2, [r3, #0]
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681a      	ldr	r2, [r3, #0]
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029e2:	3b01      	subs	r3, #1
 80029e4:	68f9      	ldr	r1, [r7, #12]
 80029e6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80029e8:	fb01 f303 	mul.w	r3, r1, r3
 80029ec:	441a      	add	r2, r3
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	22ff      	movs	r2, #255	; 0xff
 80029f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	22ff      	movs	r2, #255	; 0xff
 80029fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d114      	bne.n	8002a32 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	691b      	ldr	r3, [r3, #16]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d01a      	beq.n	8002a46 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	3310      	adds	r3, #16
 8002a14:	4618      	mov	r0, r3
 8002a16:	f001 f839 	bl	8003a8c <xTaskRemoveFromEventList>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d012      	beq.n	8002a46 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002a20:	4b0c      	ldr	r3, [pc, #48]	; (8002a54 <xQueueGenericReset+0xcc>)
 8002a22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a26:	601a      	str	r2, [r3, #0]
 8002a28:	f3bf 8f4f 	dsb	sy
 8002a2c:	f3bf 8f6f 	isb	sy
 8002a30:	e009      	b.n	8002a46 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	3310      	adds	r3, #16
 8002a36:	4618      	mov	r0, r3
 8002a38:	f7ff fef1 	bl	800281e <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	3324      	adds	r3, #36	; 0x24
 8002a40:	4618      	mov	r0, r3
 8002a42:	f7ff feec 	bl	800281e <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002a46:	f001 fd6d 	bl	8004524 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002a4a:	2301      	movs	r3, #1
}
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	3710      	adds	r7, #16
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bd80      	pop	{r7, pc}
 8002a54:	e000ed04 	.word	0xe000ed04

08002a58 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b08a      	sub	sp, #40	; 0x28
 8002a5c:	af02      	add	r7, sp, #8
 8002a5e:	60f8      	str	r0, [r7, #12]
 8002a60:	60b9      	str	r1, [r7, #8]
 8002a62:	4613      	mov	r3, r2
 8002a64:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d10a      	bne.n	8002a82 <xQueueGenericCreate+0x2a>
	__asm volatile
 8002a6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a70:	f383 8811 	msr	BASEPRI, r3
 8002a74:	f3bf 8f6f 	isb	sy
 8002a78:	f3bf 8f4f 	dsb	sy
 8002a7c:	613b      	str	r3, [r7, #16]
}
 8002a7e:	bf00      	nop
 8002a80:	e7fe      	b.n	8002a80 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	68ba      	ldr	r2, [r7, #8]
 8002a86:	fb02 f303 	mul.w	r3, r2, r3
 8002a8a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002a8c:	69fb      	ldr	r3, [r7, #28]
 8002a8e:	3348      	adds	r3, #72	; 0x48
 8002a90:	4618      	mov	r0, r3
 8002a92:	f001 fdf9 	bl	8004688 <pvPortMalloc>
 8002a96:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002a98:	69bb      	ldr	r3, [r7, #24]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d011      	beq.n	8002ac2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002a9e:	69bb      	ldr	r3, [r7, #24]
 8002aa0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	3348      	adds	r3, #72	; 0x48
 8002aa6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002aa8:	69bb      	ldr	r3, [r7, #24]
 8002aaa:	2200      	movs	r2, #0
 8002aac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002ab0:	79fa      	ldrb	r2, [r7, #7]
 8002ab2:	69bb      	ldr	r3, [r7, #24]
 8002ab4:	9300      	str	r3, [sp, #0]
 8002ab6:	4613      	mov	r3, r2
 8002ab8:	697a      	ldr	r2, [r7, #20]
 8002aba:	68b9      	ldr	r1, [r7, #8]
 8002abc:	68f8      	ldr	r0, [r7, #12]
 8002abe:	f000 f805 	bl	8002acc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002ac2:	69bb      	ldr	r3, [r7, #24]
	}
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	3720      	adds	r7, #32
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bd80      	pop	{r7, pc}

08002acc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b084      	sub	sp, #16
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	60f8      	str	r0, [r7, #12]
 8002ad4:	60b9      	str	r1, [r7, #8]
 8002ad6:	607a      	str	r2, [r7, #4]
 8002ad8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002ada:	68bb      	ldr	r3, [r7, #8]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d103      	bne.n	8002ae8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002ae0:	69bb      	ldr	r3, [r7, #24]
 8002ae2:	69ba      	ldr	r2, [r7, #24]
 8002ae4:	601a      	str	r2, [r3, #0]
 8002ae6:	e002      	b.n	8002aee <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002ae8:	69bb      	ldr	r3, [r7, #24]
 8002aea:	687a      	ldr	r2, [r7, #4]
 8002aec:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002aee:	69bb      	ldr	r3, [r7, #24]
 8002af0:	68fa      	ldr	r2, [r7, #12]
 8002af2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002af4:	69bb      	ldr	r3, [r7, #24]
 8002af6:	68ba      	ldr	r2, [r7, #8]
 8002af8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002afa:	2101      	movs	r1, #1
 8002afc:	69b8      	ldr	r0, [r7, #24]
 8002afe:	f7ff ff43 	bl	8002988 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002b02:	bf00      	nop
 8002b04:	3710      	adds	r7, #16
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}
	...

08002b0c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b08e      	sub	sp, #56	; 0x38
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	60f8      	str	r0, [r7, #12]
 8002b14:	60b9      	str	r1, [r7, #8]
 8002b16:	607a      	str	r2, [r7, #4]
 8002b18:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002b22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d10a      	bne.n	8002b3e <xQueueGenericSend+0x32>
	__asm volatile
 8002b28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b2c:	f383 8811 	msr	BASEPRI, r3
 8002b30:	f3bf 8f6f 	isb	sy
 8002b34:	f3bf 8f4f 	dsb	sy
 8002b38:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002b3a:	bf00      	nop
 8002b3c:	e7fe      	b.n	8002b3c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002b3e:	68bb      	ldr	r3, [r7, #8]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d103      	bne.n	8002b4c <xQueueGenericSend+0x40>
 8002b44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d101      	bne.n	8002b50 <xQueueGenericSend+0x44>
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	e000      	b.n	8002b52 <xQueueGenericSend+0x46>
 8002b50:	2300      	movs	r3, #0
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d10a      	bne.n	8002b6c <xQueueGenericSend+0x60>
	__asm volatile
 8002b56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b5a:	f383 8811 	msr	BASEPRI, r3
 8002b5e:	f3bf 8f6f 	isb	sy
 8002b62:	f3bf 8f4f 	dsb	sy
 8002b66:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002b68:	bf00      	nop
 8002b6a:	e7fe      	b.n	8002b6a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	2b02      	cmp	r3, #2
 8002b70:	d103      	bne.n	8002b7a <xQueueGenericSend+0x6e>
 8002b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b76:	2b01      	cmp	r3, #1
 8002b78:	d101      	bne.n	8002b7e <xQueueGenericSend+0x72>
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e000      	b.n	8002b80 <xQueueGenericSend+0x74>
 8002b7e:	2300      	movs	r3, #0
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d10a      	bne.n	8002b9a <xQueueGenericSend+0x8e>
	__asm volatile
 8002b84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b88:	f383 8811 	msr	BASEPRI, r3
 8002b8c:	f3bf 8f6f 	isb	sy
 8002b90:	f3bf 8f4f 	dsb	sy
 8002b94:	623b      	str	r3, [r7, #32]
}
 8002b96:	bf00      	nop
 8002b98:	e7fe      	b.n	8002b98 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002b9a:	f001 f943 	bl	8003e24 <xTaskGetSchedulerState>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d102      	bne.n	8002baa <xQueueGenericSend+0x9e>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d101      	bne.n	8002bae <xQueueGenericSend+0xa2>
 8002baa:	2301      	movs	r3, #1
 8002bac:	e000      	b.n	8002bb0 <xQueueGenericSend+0xa4>
 8002bae:	2300      	movs	r3, #0
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d10a      	bne.n	8002bca <xQueueGenericSend+0xbe>
	__asm volatile
 8002bb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bb8:	f383 8811 	msr	BASEPRI, r3
 8002bbc:	f3bf 8f6f 	isb	sy
 8002bc0:	f3bf 8f4f 	dsb	sy
 8002bc4:	61fb      	str	r3, [r7, #28]
}
 8002bc6:	bf00      	nop
 8002bc8:	e7fe      	b.n	8002bc8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002bca:	f001 fc7b 	bl	80044c4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002bce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bd0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002bd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bd6:	429a      	cmp	r2, r3
 8002bd8:	d302      	bcc.n	8002be0 <xQueueGenericSend+0xd4>
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	2b02      	cmp	r3, #2
 8002bde:	d129      	bne.n	8002c34 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002be0:	683a      	ldr	r2, [r7, #0]
 8002be2:	68b9      	ldr	r1, [r7, #8]
 8002be4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002be6:	f000 f9b3 	bl	8002f50 <prvCopyDataToQueue>
 8002bea:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002bec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d010      	beq.n	8002c16 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002bf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bf6:	3324      	adds	r3, #36	; 0x24
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	f000 ff47 	bl	8003a8c <xTaskRemoveFromEventList>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d013      	beq.n	8002c2c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002c04:	4b3f      	ldr	r3, [pc, #252]	; (8002d04 <xQueueGenericSend+0x1f8>)
 8002c06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c0a:	601a      	str	r2, [r3, #0]
 8002c0c:	f3bf 8f4f 	dsb	sy
 8002c10:	f3bf 8f6f 	isb	sy
 8002c14:	e00a      	b.n	8002c2c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002c16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d007      	beq.n	8002c2c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002c1c:	4b39      	ldr	r3, [pc, #228]	; (8002d04 <xQueueGenericSend+0x1f8>)
 8002c1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c22:	601a      	str	r2, [r3, #0]
 8002c24:	f3bf 8f4f 	dsb	sy
 8002c28:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002c2c:	f001 fc7a 	bl	8004524 <vPortExitCritical>
				return pdPASS;
 8002c30:	2301      	movs	r3, #1
 8002c32:	e063      	b.n	8002cfc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d103      	bne.n	8002c42 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002c3a:	f001 fc73 	bl	8004524 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	e05c      	b.n	8002cfc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002c42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d106      	bne.n	8002c56 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002c48:	f107 0314 	add.w	r3, r7, #20
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	f000 ff7f 	bl	8003b50 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002c52:	2301      	movs	r3, #1
 8002c54:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002c56:	f001 fc65 	bl	8004524 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002c5a:	f000 fd35 	bl	80036c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002c5e:	f001 fc31 	bl	80044c4 <vPortEnterCritical>
 8002c62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c64:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002c68:	b25b      	sxtb	r3, r3
 8002c6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c6e:	d103      	bne.n	8002c78 <xQueueGenericSend+0x16c>
 8002c70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c72:	2200      	movs	r2, #0
 8002c74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c7a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002c7e:	b25b      	sxtb	r3, r3
 8002c80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c84:	d103      	bne.n	8002c8e <xQueueGenericSend+0x182>
 8002c86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c88:	2200      	movs	r2, #0
 8002c8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002c8e:	f001 fc49 	bl	8004524 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002c92:	1d3a      	adds	r2, r7, #4
 8002c94:	f107 0314 	add.w	r3, r7, #20
 8002c98:	4611      	mov	r1, r2
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f000 ff6e 	bl	8003b7c <xTaskCheckForTimeOut>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d124      	bne.n	8002cf0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002ca6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002ca8:	f000 fa24 	bl	80030f4 <prvIsQueueFull>
 8002cac:	4603      	mov	r3, r0
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d018      	beq.n	8002ce4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002cb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cb4:	3310      	adds	r3, #16
 8002cb6:	687a      	ldr	r2, [r7, #4]
 8002cb8:	4611      	mov	r1, r2
 8002cba:	4618      	mov	r0, r3
 8002cbc:	f000 fec2 	bl	8003a44 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002cc0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002cc2:	f000 f9af 	bl	8003024 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002cc6:	f000 fd0d 	bl	80036e4 <xTaskResumeAll>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	f47f af7c 	bne.w	8002bca <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002cd2:	4b0c      	ldr	r3, [pc, #48]	; (8002d04 <xQueueGenericSend+0x1f8>)
 8002cd4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002cd8:	601a      	str	r2, [r3, #0]
 8002cda:	f3bf 8f4f 	dsb	sy
 8002cde:	f3bf 8f6f 	isb	sy
 8002ce2:	e772      	b.n	8002bca <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002ce4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002ce6:	f000 f99d 	bl	8003024 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002cea:	f000 fcfb 	bl	80036e4 <xTaskResumeAll>
 8002cee:	e76c      	b.n	8002bca <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002cf0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002cf2:	f000 f997 	bl	8003024 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002cf6:	f000 fcf5 	bl	80036e4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002cfa:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	3738      	adds	r7, #56	; 0x38
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bd80      	pop	{r7, pc}
 8002d04:	e000ed04 	.word	0xe000ed04

08002d08 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b08e      	sub	sp, #56	; 0x38
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
 8002d10:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8002d12:	2300      	movs	r3, #0
 8002d14:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002d1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d10a      	bne.n	8002d3a <xQueueSemaphoreTake+0x32>
	__asm volatile
 8002d24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d28:	f383 8811 	msr	BASEPRI, r3
 8002d2c:	f3bf 8f6f 	isb	sy
 8002d30:	f3bf 8f4f 	dsb	sy
 8002d34:	623b      	str	r3, [r7, #32]
}
 8002d36:	bf00      	nop
 8002d38:	e7fe      	b.n	8002d38 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8002d3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d00a      	beq.n	8002d58 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8002d42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d46:	f383 8811 	msr	BASEPRI, r3
 8002d4a:	f3bf 8f6f 	isb	sy
 8002d4e:	f3bf 8f4f 	dsb	sy
 8002d52:	61fb      	str	r3, [r7, #28]
}
 8002d54:	bf00      	nop
 8002d56:	e7fe      	b.n	8002d56 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002d58:	f001 f864 	bl	8003e24 <xTaskGetSchedulerState>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d102      	bne.n	8002d68 <xQueueSemaphoreTake+0x60>
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d101      	bne.n	8002d6c <xQueueSemaphoreTake+0x64>
 8002d68:	2301      	movs	r3, #1
 8002d6a:	e000      	b.n	8002d6e <xQueueSemaphoreTake+0x66>
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d10a      	bne.n	8002d88 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8002d72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d76:	f383 8811 	msr	BASEPRI, r3
 8002d7a:	f3bf 8f6f 	isb	sy
 8002d7e:	f3bf 8f4f 	dsb	sy
 8002d82:	61bb      	str	r3, [r7, #24]
}
 8002d84:	bf00      	nop
 8002d86:	e7fe      	b.n	8002d86 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002d88:	f001 fb9c 	bl	80044c4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8002d8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d90:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8002d92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d024      	beq.n	8002de2 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8002d98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d9a:	1e5a      	subs	r2, r3, #1
 8002d9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d9e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002da0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d104      	bne.n	8002db2 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8002da8:	f001 f9e4 	bl	8004174 <pvTaskIncrementMutexHeldCount>
 8002dac:	4602      	mov	r2, r0
 8002dae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002db0:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002db2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002db4:	691b      	ldr	r3, [r3, #16]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d00f      	beq.n	8002dda <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002dba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dbc:	3310      	adds	r3, #16
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f000 fe64 	bl	8003a8c <xTaskRemoveFromEventList>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d007      	beq.n	8002dda <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002dca:	4b54      	ldr	r3, [pc, #336]	; (8002f1c <xQueueSemaphoreTake+0x214>)
 8002dcc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002dd0:	601a      	str	r2, [r3, #0]
 8002dd2:	f3bf 8f4f 	dsb	sy
 8002dd6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002dda:	f001 fba3 	bl	8004524 <vPortExitCritical>
				return pdPASS;
 8002dde:	2301      	movs	r3, #1
 8002de0:	e097      	b.n	8002f12 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d111      	bne.n	8002e0c <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8002de8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d00a      	beq.n	8002e04 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8002dee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002df2:	f383 8811 	msr	BASEPRI, r3
 8002df6:	f3bf 8f6f 	isb	sy
 8002dfa:	f3bf 8f4f 	dsb	sy
 8002dfe:	617b      	str	r3, [r7, #20]
}
 8002e00:	bf00      	nop
 8002e02:	e7fe      	b.n	8002e02 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8002e04:	f001 fb8e 	bl	8004524 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002e08:	2300      	movs	r3, #0
 8002e0a:	e082      	b.n	8002f12 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002e0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d106      	bne.n	8002e20 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002e12:	f107 030c 	add.w	r3, r7, #12
 8002e16:	4618      	mov	r0, r3
 8002e18:	f000 fe9a 	bl	8003b50 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002e20:	f001 fb80 	bl	8004524 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002e24:	f000 fc50 	bl	80036c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002e28:	f001 fb4c 	bl	80044c4 <vPortEnterCritical>
 8002e2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e2e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002e32:	b25b      	sxtb	r3, r3
 8002e34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e38:	d103      	bne.n	8002e42 <xQueueSemaphoreTake+0x13a>
 8002e3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e44:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002e48:	b25b      	sxtb	r3, r3
 8002e4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e4e:	d103      	bne.n	8002e58 <xQueueSemaphoreTake+0x150>
 8002e50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e52:	2200      	movs	r2, #0
 8002e54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002e58:	f001 fb64 	bl	8004524 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002e5c:	463a      	mov	r2, r7
 8002e5e:	f107 030c 	add.w	r3, r7, #12
 8002e62:	4611      	mov	r1, r2
 8002e64:	4618      	mov	r0, r3
 8002e66:	f000 fe89 	bl	8003b7c <xTaskCheckForTimeOut>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d132      	bne.n	8002ed6 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002e70:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002e72:	f000 f929 	bl	80030c8 <prvIsQueueEmpty>
 8002e76:	4603      	mov	r3, r0
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d026      	beq.n	8002eca <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002e7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d109      	bne.n	8002e98 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8002e84:	f001 fb1e 	bl	80044c4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002e88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e8a:	689b      	ldr	r3, [r3, #8]
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f000 ffe7 	bl	8003e60 <xTaskPriorityInherit>
 8002e92:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8002e94:	f001 fb46 	bl	8004524 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002e98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e9a:	3324      	adds	r3, #36	; 0x24
 8002e9c:	683a      	ldr	r2, [r7, #0]
 8002e9e:	4611      	mov	r1, r2
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	f000 fdcf 	bl	8003a44 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002ea6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002ea8:	f000 f8bc 	bl	8003024 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002eac:	f000 fc1a 	bl	80036e4 <xTaskResumeAll>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	f47f af68 	bne.w	8002d88 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8002eb8:	4b18      	ldr	r3, [pc, #96]	; (8002f1c <xQueueSemaphoreTake+0x214>)
 8002eba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ebe:	601a      	str	r2, [r3, #0]
 8002ec0:	f3bf 8f4f 	dsb	sy
 8002ec4:	f3bf 8f6f 	isb	sy
 8002ec8:	e75e      	b.n	8002d88 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8002eca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002ecc:	f000 f8aa 	bl	8003024 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002ed0:	f000 fc08 	bl	80036e4 <xTaskResumeAll>
 8002ed4:	e758      	b.n	8002d88 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8002ed6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002ed8:	f000 f8a4 	bl	8003024 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002edc:	f000 fc02 	bl	80036e4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002ee0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002ee2:	f000 f8f1 	bl	80030c8 <prvIsQueueEmpty>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	f43f af4d 	beq.w	8002d88 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8002eee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d00d      	beq.n	8002f10 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8002ef4:	f001 fae6 	bl	80044c4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8002ef8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002efa:	f000 f811 	bl	8002f20 <prvGetDisinheritPriorityAfterTimeout>
 8002efe:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8002f00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f02:	689b      	ldr	r3, [r3, #8]
 8002f04:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002f06:	4618      	mov	r0, r3
 8002f08:	f001 f8a6 	bl	8004058 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8002f0c:	f001 fb0a 	bl	8004524 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002f10:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002f12:	4618      	mov	r0, r3
 8002f14:	3738      	adds	r7, #56	; 0x38
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}
 8002f1a:	bf00      	nop
 8002f1c:	e000ed04 	.word	0xe000ed04

08002f20 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8002f20:	b480      	push	{r7}
 8002f22:	b085      	sub	sp, #20
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d006      	beq.n	8002f3e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f1c3 0307 	rsb	r3, r3, #7
 8002f3a:	60fb      	str	r3, [r7, #12]
 8002f3c:	e001      	b.n	8002f42 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8002f3e:	2300      	movs	r3, #0
 8002f40:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8002f42:	68fb      	ldr	r3, [r7, #12]
	}
 8002f44:	4618      	mov	r0, r3
 8002f46:	3714      	adds	r7, #20
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4e:	4770      	bx	lr

08002f50 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b086      	sub	sp, #24
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	60f8      	str	r0, [r7, #12]
 8002f58:	60b9      	str	r1, [r7, #8]
 8002f5a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f64:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d10d      	bne.n	8002f8a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d14d      	bne.n	8003012 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	689b      	ldr	r3, [r3, #8]
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f000 ffe6 	bl	8003f4c <xTaskPriorityDisinherit>
 8002f80:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	2200      	movs	r2, #0
 8002f86:	609a      	str	r2, [r3, #8]
 8002f88:	e043      	b.n	8003012 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d119      	bne.n	8002fc4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	6858      	ldr	r0, [r3, #4]
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f98:	461a      	mov	r2, r3
 8002f9a:	68b9      	ldr	r1, [r7, #8]
 8002f9c:	f001 fd82 	bl	8004aa4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	685a      	ldr	r2, [r3, #4]
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa8:	441a      	add	r2, r3
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	685a      	ldr	r2, [r3, #4]
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	689b      	ldr	r3, [r3, #8]
 8002fb6:	429a      	cmp	r2, r3
 8002fb8:	d32b      	bcc.n	8003012 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681a      	ldr	r2, [r3, #0]
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	605a      	str	r2, [r3, #4]
 8002fc2:	e026      	b.n	8003012 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	68d8      	ldr	r0, [r3, #12]
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fcc:	461a      	mov	r2, r3
 8002fce:	68b9      	ldr	r1, [r7, #8]
 8002fd0:	f001 fd68 	bl	8004aa4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	68da      	ldr	r2, [r3, #12]
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fdc:	425b      	negs	r3, r3
 8002fde:	441a      	add	r2, r3
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	68da      	ldr	r2, [r3, #12]
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	429a      	cmp	r2, r3
 8002fee:	d207      	bcs.n	8003000 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	689a      	ldr	r2, [r3, #8]
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff8:	425b      	negs	r3, r3
 8002ffa:	441a      	add	r2, r3
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2b02      	cmp	r3, #2
 8003004:	d105      	bne.n	8003012 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d002      	beq.n	8003012 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800300c:	693b      	ldr	r3, [r7, #16]
 800300e:	3b01      	subs	r3, #1
 8003010:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	1c5a      	adds	r2, r3, #1
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800301a:	697b      	ldr	r3, [r7, #20]
}
 800301c:	4618      	mov	r0, r3
 800301e:	3718      	adds	r7, #24
 8003020:	46bd      	mov	sp, r7
 8003022:	bd80      	pop	{r7, pc}

08003024 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b084      	sub	sp, #16
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800302c:	f001 fa4a 	bl	80044c4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003036:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003038:	e011      	b.n	800305e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800303e:	2b00      	cmp	r3, #0
 8003040:	d012      	beq.n	8003068 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	3324      	adds	r3, #36	; 0x24
 8003046:	4618      	mov	r0, r3
 8003048:	f000 fd20 	bl	8003a8c <xTaskRemoveFromEventList>
 800304c:	4603      	mov	r3, r0
 800304e:	2b00      	cmp	r3, #0
 8003050:	d001      	beq.n	8003056 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003052:	f000 fdf5 	bl	8003c40 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003056:	7bfb      	ldrb	r3, [r7, #15]
 8003058:	3b01      	subs	r3, #1
 800305a:	b2db      	uxtb	r3, r3
 800305c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800305e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003062:	2b00      	cmp	r3, #0
 8003064:	dce9      	bgt.n	800303a <prvUnlockQueue+0x16>
 8003066:	e000      	b.n	800306a <prvUnlockQueue+0x46>
					break;
 8003068:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	22ff      	movs	r2, #255	; 0xff
 800306e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003072:	f001 fa57 	bl	8004524 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003076:	f001 fa25 	bl	80044c4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003080:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003082:	e011      	b.n	80030a8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	691b      	ldr	r3, [r3, #16]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d012      	beq.n	80030b2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	3310      	adds	r3, #16
 8003090:	4618      	mov	r0, r3
 8003092:	f000 fcfb 	bl	8003a8c <xTaskRemoveFromEventList>
 8003096:	4603      	mov	r3, r0
 8003098:	2b00      	cmp	r3, #0
 800309a:	d001      	beq.n	80030a0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800309c:	f000 fdd0 	bl	8003c40 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80030a0:	7bbb      	ldrb	r3, [r7, #14]
 80030a2:	3b01      	subs	r3, #1
 80030a4:	b2db      	uxtb	r3, r3
 80030a6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80030a8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	dce9      	bgt.n	8003084 <prvUnlockQueue+0x60>
 80030b0:	e000      	b.n	80030b4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80030b2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	22ff      	movs	r2, #255	; 0xff
 80030b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80030bc:	f001 fa32 	bl	8004524 <vPortExitCritical>
}
 80030c0:	bf00      	nop
 80030c2:	3710      	adds	r7, #16
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bd80      	pop	{r7, pc}

080030c8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b084      	sub	sp, #16
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80030d0:	f001 f9f8 	bl	80044c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d102      	bne.n	80030e2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80030dc:	2301      	movs	r3, #1
 80030de:	60fb      	str	r3, [r7, #12]
 80030e0:	e001      	b.n	80030e6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80030e2:	2300      	movs	r3, #0
 80030e4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80030e6:	f001 fa1d 	bl	8004524 <vPortExitCritical>

	return xReturn;
 80030ea:	68fb      	ldr	r3, [r7, #12]
}
 80030ec:	4618      	mov	r0, r3
 80030ee:	3710      	adds	r7, #16
 80030f0:	46bd      	mov	sp, r7
 80030f2:	bd80      	pop	{r7, pc}

080030f4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b084      	sub	sp, #16
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80030fc:	f001 f9e2 	bl	80044c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003108:	429a      	cmp	r2, r3
 800310a:	d102      	bne.n	8003112 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800310c:	2301      	movs	r3, #1
 800310e:	60fb      	str	r3, [r7, #12]
 8003110:	e001      	b.n	8003116 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003112:	2300      	movs	r3, #0
 8003114:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003116:	f001 fa05 	bl	8004524 <vPortExitCritical>

	return xReturn;
 800311a:	68fb      	ldr	r3, [r7, #12]
}
 800311c:	4618      	mov	r0, r3
 800311e:	3710      	adds	r7, #16
 8003120:	46bd      	mov	sp, r7
 8003122:	bd80      	pop	{r7, pc}

08003124 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003124:	b580      	push	{r7, lr}
 8003126:	b08e      	sub	sp, #56	; 0x38
 8003128:	af04      	add	r7, sp, #16
 800312a:	60f8      	str	r0, [r7, #12]
 800312c:	60b9      	str	r1, [r7, #8]
 800312e:	607a      	str	r2, [r7, #4]
 8003130:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003132:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003134:	2b00      	cmp	r3, #0
 8003136:	d10a      	bne.n	800314e <xTaskCreateStatic+0x2a>
	__asm volatile
 8003138:	f04f 0350 	mov.w	r3, #80	; 0x50
 800313c:	f383 8811 	msr	BASEPRI, r3
 8003140:	f3bf 8f6f 	isb	sy
 8003144:	f3bf 8f4f 	dsb	sy
 8003148:	623b      	str	r3, [r7, #32]
}
 800314a:	bf00      	nop
 800314c:	e7fe      	b.n	800314c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800314e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003150:	2b00      	cmp	r3, #0
 8003152:	d10a      	bne.n	800316a <xTaskCreateStatic+0x46>
	__asm volatile
 8003154:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003158:	f383 8811 	msr	BASEPRI, r3
 800315c:	f3bf 8f6f 	isb	sy
 8003160:	f3bf 8f4f 	dsb	sy
 8003164:	61fb      	str	r3, [r7, #28]
}
 8003166:	bf00      	nop
 8003168:	e7fe      	b.n	8003168 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800316a:	2354      	movs	r3, #84	; 0x54
 800316c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800316e:	693b      	ldr	r3, [r7, #16]
 8003170:	2b54      	cmp	r3, #84	; 0x54
 8003172:	d00a      	beq.n	800318a <xTaskCreateStatic+0x66>
	__asm volatile
 8003174:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003178:	f383 8811 	msr	BASEPRI, r3
 800317c:	f3bf 8f6f 	isb	sy
 8003180:	f3bf 8f4f 	dsb	sy
 8003184:	61bb      	str	r3, [r7, #24]
}
 8003186:	bf00      	nop
 8003188:	e7fe      	b.n	8003188 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800318a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800318c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800318e:	2b00      	cmp	r3, #0
 8003190:	d01e      	beq.n	80031d0 <xTaskCreateStatic+0xac>
 8003192:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003194:	2b00      	cmp	r3, #0
 8003196:	d01b      	beq.n	80031d0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003198:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800319a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800319c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800319e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80031a0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80031a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031a4:	2202      	movs	r2, #2
 80031a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80031aa:	2300      	movs	r3, #0
 80031ac:	9303      	str	r3, [sp, #12]
 80031ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b0:	9302      	str	r3, [sp, #8]
 80031b2:	f107 0314 	add.w	r3, r7, #20
 80031b6:	9301      	str	r3, [sp, #4]
 80031b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031ba:	9300      	str	r3, [sp, #0]
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	687a      	ldr	r2, [r7, #4]
 80031c0:	68b9      	ldr	r1, [r7, #8]
 80031c2:	68f8      	ldr	r0, [r7, #12]
 80031c4:	f000 f850 	bl	8003268 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80031c8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80031ca:	f000 f8d5 	bl	8003378 <prvAddNewTaskToReadyList>
 80031ce:	e001      	b.n	80031d4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80031d0:	2300      	movs	r3, #0
 80031d2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80031d4:	697b      	ldr	r3, [r7, #20]
	}
 80031d6:	4618      	mov	r0, r3
 80031d8:	3728      	adds	r7, #40	; 0x28
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd80      	pop	{r7, pc}

080031de <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80031de:	b580      	push	{r7, lr}
 80031e0:	b08c      	sub	sp, #48	; 0x30
 80031e2:	af04      	add	r7, sp, #16
 80031e4:	60f8      	str	r0, [r7, #12]
 80031e6:	60b9      	str	r1, [r7, #8]
 80031e8:	603b      	str	r3, [r7, #0]
 80031ea:	4613      	mov	r3, r2
 80031ec:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80031ee:	88fb      	ldrh	r3, [r7, #6]
 80031f0:	009b      	lsls	r3, r3, #2
 80031f2:	4618      	mov	r0, r3
 80031f4:	f001 fa48 	bl	8004688 <pvPortMalloc>
 80031f8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80031fa:	697b      	ldr	r3, [r7, #20]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d00e      	beq.n	800321e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003200:	2054      	movs	r0, #84	; 0x54
 8003202:	f001 fa41 	bl	8004688 <pvPortMalloc>
 8003206:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003208:	69fb      	ldr	r3, [r7, #28]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d003      	beq.n	8003216 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800320e:	69fb      	ldr	r3, [r7, #28]
 8003210:	697a      	ldr	r2, [r7, #20]
 8003212:	631a      	str	r2, [r3, #48]	; 0x30
 8003214:	e005      	b.n	8003222 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003216:	6978      	ldr	r0, [r7, #20]
 8003218:	f001 fb02 	bl	8004820 <vPortFree>
 800321c:	e001      	b.n	8003222 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800321e:	2300      	movs	r3, #0
 8003220:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003222:	69fb      	ldr	r3, [r7, #28]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d017      	beq.n	8003258 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003228:	69fb      	ldr	r3, [r7, #28]
 800322a:	2200      	movs	r2, #0
 800322c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003230:	88fa      	ldrh	r2, [r7, #6]
 8003232:	2300      	movs	r3, #0
 8003234:	9303      	str	r3, [sp, #12]
 8003236:	69fb      	ldr	r3, [r7, #28]
 8003238:	9302      	str	r3, [sp, #8]
 800323a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800323c:	9301      	str	r3, [sp, #4]
 800323e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003240:	9300      	str	r3, [sp, #0]
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	68b9      	ldr	r1, [r7, #8]
 8003246:	68f8      	ldr	r0, [r7, #12]
 8003248:	f000 f80e 	bl	8003268 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800324c:	69f8      	ldr	r0, [r7, #28]
 800324e:	f000 f893 	bl	8003378 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003252:	2301      	movs	r3, #1
 8003254:	61bb      	str	r3, [r7, #24]
 8003256:	e002      	b.n	800325e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003258:	f04f 33ff 	mov.w	r3, #4294967295
 800325c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800325e:	69bb      	ldr	r3, [r7, #24]
	}
 8003260:	4618      	mov	r0, r3
 8003262:	3720      	adds	r7, #32
 8003264:	46bd      	mov	sp, r7
 8003266:	bd80      	pop	{r7, pc}

08003268 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b088      	sub	sp, #32
 800326c:	af00      	add	r7, sp, #0
 800326e:	60f8      	str	r0, [r7, #12]
 8003270:	60b9      	str	r1, [r7, #8]
 8003272:	607a      	str	r2, [r7, #4]
 8003274:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003278:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003280:	3b01      	subs	r3, #1
 8003282:	009b      	lsls	r3, r3, #2
 8003284:	4413      	add	r3, r2
 8003286:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003288:	69bb      	ldr	r3, [r7, #24]
 800328a:	f023 0307 	bic.w	r3, r3, #7
 800328e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003290:	69bb      	ldr	r3, [r7, #24]
 8003292:	f003 0307 	and.w	r3, r3, #7
 8003296:	2b00      	cmp	r3, #0
 8003298:	d00a      	beq.n	80032b0 <prvInitialiseNewTask+0x48>
	__asm volatile
 800329a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800329e:	f383 8811 	msr	BASEPRI, r3
 80032a2:	f3bf 8f6f 	isb	sy
 80032a6:	f3bf 8f4f 	dsb	sy
 80032aa:	617b      	str	r3, [r7, #20]
}
 80032ac:	bf00      	nop
 80032ae:	e7fe      	b.n	80032ae <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80032b0:	68bb      	ldr	r3, [r7, #8]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d01f      	beq.n	80032f6 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80032b6:	2300      	movs	r3, #0
 80032b8:	61fb      	str	r3, [r7, #28]
 80032ba:	e012      	b.n	80032e2 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80032bc:	68ba      	ldr	r2, [r7, #8]
 80032be:	69fb      	ldr	r3, [r7, #28]
 80032c0:	4413      	add	r3, r2
 80032c2:	7819      	ldrb	r1, [r3, #0]
 80032c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80032c6:	69fb      	ldr	r3, [r7, #28]
 80032c8:	4413      	add	r3, r2
 80032ca:	3334      	adds	r3, #52	; 0x34
 80032cc:	460a      	mov	r2, r1
 80032ce:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80032d0:	68ba      	ldr	r2, [r7, #8]
 80032d2:	69fb      	ldr	r3, [r7, #28]
 80032d4:	4413      	add	r3, r2
 80032d6:	781b      	ldrb	r3, [r3, #0]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d006      	beq.n	80032ea <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80032dc:	69fb      	ldr	r3, [r7, #28]
 80032de:	3301      	adds	r3, #1
 80032e0:	61fb      	str	r3, [r7, #28]
 80032e2:	69fb      	ldr	r3, [r7, #28]
 80032e4:	2b0f      	cmp	r3, #15
 80032e6:	d9e9      	bls.n	80032bc <prvInitialiseNewTask+0x54>
 80032e8:	e000      	b.n	80032ec <prvInitialiseNewTask+0x84>
			{
				break;
 80032ea:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80032ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032ee:	2200      	movs	r2, #0
 80032f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80032f4:	e003      	b.n	80032fe <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80032f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032f8:	2200      	movs	r2, #0
 80032fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80032fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003300:	2b06      	cmp	r3, #6
 8003302:	d901      	bls.n	8003308 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003304:	2306      	movs	r3, #6
 8003306:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800330a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800330c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800330e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003310:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003312:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003316:	2200      	movs	r2, #0
 8003318:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800331a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800331c:	3304      	adds	r3, #4
 800331e:	4618      	mov	r0, r3
 8003320:	f7ff fa9d 	bl	800285e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003326:	3318      	adds	r3, #24
 8003328:	4618      	mov	r0, r3
 800332a:	f7ff fa98 	bl	800285e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800332e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003330:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003332:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003336:	f1c3 0207 	rsb	r2, r3, #7
 800333a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800333c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800333e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003340:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003342:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003346:	2200      	movs	r2, #0
 8003348:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800334a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800334c:	2200      	movs	r2, #0
 800334e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003352:	683a      	ldr	r2, [r7, #0]
 8003354:	68f9      	ldr	r1, [r7, #12]
 8003356:	69b8      	ldr	r0, [r7, #24]
 8003358:	f000 ff86 	bl	8004268 <pxPortInitialiseStack>
 800335c:	4602      	mov	r2, r0
 800335e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003360:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003362:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003364:	2b00      	cmp	r3, #0
 8003366:	d002      	beq.n	800336e <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800336a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800336c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800336e:	bf00      	nop
 8003370:	3720      	adds	r7, #32
 8003372:	46bd      	mov	sp, r7
 8003374:	bd80      	pop	{r7, pc}
	...

08003378 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b082      	sub	sp, #8
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003380:	f001 f8a0 	bl	80044c4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003384:	4b2a      	ldr	r3, [pc, #168]	; (8003430 <prvAddNewTaskToReadyList+0xb8>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	3301      	adds	r3, #1
 800338a:	4a29      	ldr	r2, [pc, #164]	; (8003430 <prvAddNewTaskToReadyList+0xb8>)
 800338c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800338e:	4b29      	ldr	r3, [pc, #164]	; (8003434 <prvAddNewTaskToReadyList+0xbc>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d109      	bne.n	80033aa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003396:	4a27      	ldr	r2, [pc, #156]	; (8003434 <prvAddNewTaskToReadyList+0xbc>)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800339c:	4b24      	ldr	r3, [pc, #144]	; (8003430 <prvAddNewTaskToReadyList+0xb8>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	2b01      	cmp	r3, #1
 80033a2:	d110      	bne.n	80033c6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80033a4:	f000 fc70 	bl	8003c88 <prvInitialiseTaskLists>
 80033a8:	e00d      	b.n	80033c6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80033aa:	4b23      	ldr	r3, [pc, #140]	; (8003438 <prvAddNewTaskToReadyList+0xc0>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d109      	bne.n	80033c6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80033b2:	4b20      	ldr	r3, [pc, #128]	; (8003434 <prvAddNewTaskToReadyList+0xbc>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033bc:	429a      	cmp	r2, r3
 80033be:	d802      	bhi.n	80033c6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80033c0:	4a1c      	ldr	r2, [pc, #112]	; (8003434 <prvAddNewTaskToReadyList+0xbc>)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80033c6:	4b1d      	ldr	r3, [pc, #116]	; (800343c <prvAddNewTaskToReadyList+0xc4>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	3301      	adds	r3, #1
 80033cc:	4a1b      	ldr	r2, [pc, #108]	; (800343c <prvAddNewTaskToReadyList+0xc4>)
 80033ce:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033d4:	2201      	movs	r2, #1
 80033d6:	409a      	lsls	r2, r3
 80033d8:	4b19      	ldr	r3, [pc, #100]	; (8003440 <prvAddNewTaskToReadyList+0xc8>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4313      	orrs	r3, r2
 80033de:	4a18      	ldr	r2, [pc, #96]	; (8003440 <prvAddNewTaskToReadyList+0xc8>)
 80033e0:	6013      	str	r3, [r2, #0]
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033e6:	4613      	mov	r3, r2
 80033e8:	009b      	lsls	r3, r3, #2
 80033ea:	4413      	add	r3, r2
 80033ec:	009b      	lsls	r3, r3, #2
 80033ee:	4a15      	ldr	r2, [pc, #84]	; (8003444 <prvAddNewTaskToReadyList+0xcc>)
 80033f0:	441a      	add	r2, r3
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	3304      	adds	r3, #4
 80033f6:	4619      	mov	r1, r3
 80033f8:	4610      	mov	r0, r2
 80033fa:	f7ff fa3d 	bl	8002878 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80033fe:	f001 f891 	bl	8004524 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003402:	4b0d      	ldr	r3, [pc, #52]	; (8003438 <prvAddNewTaskToReadyList+0xc0>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d00e      	beq.n	8003428 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800340a:	4b0a      	ldr	r3, [pc, #40]	; (8003434 <prvAddNewTaskToReadyList+0xbc>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003414:	429a      	cmp	r2, r3
 8003416:	d207      	bcs.n	8003428 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003418:	4b0b      	ldr	r3, [pc, #44]	; (8003448 <prvAddNewTaskToReadyList+0xd0>)
 800341a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800341e:	601a      	str	r2, [r3, #0]
 8003420:	f3bf 8f4f 	dsb	sy
 8003424:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003428:	bf00      	nop
 800342a:	3708      	adds	r7, #8
 800342c:	46bd      	mov	sp, r7
 800342e:	bd80      	pop	{r7, pc}
 8003430:	20000384 	.word	0x20000384
 8003434:	20000284 	.word	0x20000284
 8003438:	20000390 	.word	0x20000390
 800343c:	200003a0 	.word	0x200003a0
 8003440:	2000038c 	.word	0x2000038c
 8003444:	20000288 	.word	0x20000288
 8003448:	e000ed04 	.word	0xe000ed04

0800344c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800344c:	b580      	push	{r7, lr}
 800344e:	b084      	sub	sp, #16
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003454:	2300      	movs	r3, #0
 8003456:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d017      	beq.n	800348e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800345e:	4b13      	ldr	r3, [pc, #76]	; (80034ac <vTaskDelay+0x60>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d00a      	beq.n	800347c <vTaskDelay+0x30>
	__asm volatile
 8003466:	f04f 0350 	mov.w	r3, #80	; 0x50
 800346a:	f383 8811 	msr	BASEPRI, r3
 800346e:	f3bf 8f6f 	isb	sy
 8003472:	f3bf 8f4f 	dsb	sy
 8003476:	60bb      	str	r3, [r7, #8]
}
 8003478:	bf00      	nop
 800347a:	e7fe      	b.n	800347a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800347c:	f000 f924 	bl	80036c8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003480:	2100      	movs	r1, #0
 8003482:	6878      	ldr	r0, [r7, #4]
 8003484:	f000 fe8a 	bl	800419c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003488:	f000 f92c 	bl	80036e4 <xTaskResumeAll>
 800348c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d107      	bne.n	80034a4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003494:	4b06      	ldr	r3, [pc, #24]	; (80034b0 <vTaskDelay+0x64>)
 8003496:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800349a:	601a      	str	r2, [r3, #0]
 800349c:	f3bf 8f4f 	dsb	sy
 80034a0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80034a4:	bf00      	nop
 80034a6:	3710      	adds	r7, #16
 80034a8:	46bd      	mov	sp, r7
 80034aa:	bd80      	pop	{r7, pc}
 80034ac:	200003ac 	.word	0x200003ac
 80034b0:	e000ed04 	.word	0xe000ed04

080034b4 <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
	{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b088      	sub	sp, #32
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
 80034bc:	6039      	str	r1, [r7, #0]
	TCB_t *pxTCB;
	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
	BaseType_t xYieldRequired = pdFALSE;
 80034be:	2300      	movs	r3, #0
 80034c0:	61fb      	str	r3, [r7, #28]

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	2b06      	cmp	r3, #6
 80034c6:	d90a      	bls.n	80034de <vTaskPrioritySet+0x2a>
	__asm volatile
 80034c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034cc:	f383 8811 	msr	BASEPRI, r3
 80034d0:	f3bf 8f6f 	isb	sy
 80034d4:	f3bf 8f4f 	dsb	sy
 80034d8:	60fb      	str	r3, [r7, #12]
}
 80034da:	bf00      	nop
 80034dc:	e7fe      	b.n	80034dc <vTaskPrioritySet+0x28>

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	2b06      	cmp	r3, #6
 80034e2:	d901      	bls.n	80034e8 <vTaskPrioritySet+0x34>
		{
			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80034e4:	2306      	movs	r3, #6
 80034e6:	603b      	str	r3, [r7, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		taskENTER_CRITICAL();
 80034e8:	f000 ffec 	bl	80044c4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being changed. */
			pxTCB = prvGetTCBFromHandle( xTask );
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d102      	bne.n	80034f8 <vTaskPrioritySet+0x44>
 80034f2:	4b41      	ldr	r3, [pc, #260]	; (80035f8 <vTaskPrioritySet+0x144>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	e000      	b.n	80034fa <vTaskPrioritySet+0x46>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	61bb      	str	r3, [r7, #24]

			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentBasePriority = pxTCB->uxBasePriority;
 80034fc:	69bb      	ldr	r3, [r7, #24]
 80034fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003500:	617b      	str	r3, [r7, #20]
			{
				uxCurrentBasePriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentBasePriority != uxNewPriority )
 8003502:	697a      	ldr	r2, [r7, #20]
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	429a      	cmp	r2, r3
 8003508:	d06f      	beq.n	80035ea <vTaskPrioritySet+0x136>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentBasePriority )
 800350a:	683a      	ldr	r2, [r7, #0]
 800350c:	697b      	ldr	r3, [r7, #20]
 800350e:	429a      	cmp	r2, r3
 8003510:	d90d      	bls.n	800352e <vTaskPrioritySet+0x7a>
				{
					if( pxTCB != pxCurrentTCB )
 8003512:	4b39      	ldr	r3, [pc, #228]	; (80035f8 <vTaskPrioritySet+0x144>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	69ba      	ldr	r2, [r7, #24]
 8003518:	429a      	cmp	r2, r3
 800351a:	d00f      	beq.n	800353c <vTaskPrioritySet+0x88>
					{
						/* The priority of a task other than the currently
						running task is being raised.  Is the priority being
						raised above that of the running task? */
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 800351c:	4b36      	ldr	r3, [pc, #216]	; (80035f8 <vTaskPrioritySet+0x144>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003522:	683a      	ldr	r2, [r7, #0]
 8003524:	429a      	cmp	r2, r3
 8003526:	d309      	bcc.n	800353c <vTaskPrioritySet+0x88>
						{
							xYieldRequired = pdTRUE;
 8003528:	2301      	movs	r3, #1
 800352a:	61fb      	str	r3, [r7, #28]
 800352c:	e006      	b.n	800353c <vTaskPrioritySet+0x88>
						/* The priority of the running task is being raised,
						but the running task must already be the highest
						priority task able to run so no yield is required. */
					}
				}
				else if( pxTCB == pxCurrentTCB )
 800352e:	4b32      	ldr	r3, [pc, #200]	; (80035f8 <vTaskPrioritySet+0x144>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	69ba      	ldr	r2, [r7, #24]
 8003534:	429a      	cmp	r2, r3
 8003536:	d101      	bne.n	800353c <vTaskPrioritySet+0x88>
				{
					/* Setting the priority of the running task down means
					there may now be another task of higher priority that
					is ready to execute. */
					xYieldRequired = pdTRUE;
 8003538:	2301      	movs	r3, #1
 800353a:	61fb      	str	r3, [r7, #28]
				}

				/* Remember the ready list the task might be referenced from
				before its uxPriority member is changed so the
				taskRESET_READY_PRIORITY() macro can function correctly. */
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800353c:	69bb      	ldr	r3, [r7, #24]
 800353e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003540:	613b      	str	r3, [r7, #16]

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 8003542:	69bb      	ldr	r3, [r7, #24]
 8003544:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003546:	69bb      	ldr	r3, [r7, #24]
 8003548:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800354a:	429a      	cmp	r2, r3
 800354c:	d102      	bne.n	8003554 <vTaskPrioritySet+0xa0>
					{
						pxTCB->uxPriority = uxNewPriority;
 800354e:	69bb      	ldr	r3, [r7, #24]
 8003550:	683a      	ldr	r2, [r7, #0]
 8003552:	62da      	str	r2, [r3, #44]	; 0x2c
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
 8003554:	69bb      	ldr	r3, [r7, #24]
 8003556:	683a      	ldr	r2, [r7, #0]
 8003558:	645a      	str	r2, [r3, #68]	; 0x44
				}
				#endif

				/* Only reset the event list item value if the value is not
				being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800355a:	69bb      	ldr	r3, [r7, #24]
 800355c:	699b      	ldr	r3, [r3, #24]
 800355e:	2b00      	cmp	r3, #0
 8003560:	db04      	blt.n	800356c <vTaskPrioritySet+0xb8>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	f1c3 0207 	rsb	r2, r3, #7
 8003568:	69bb      	ldr	r3, [r7, #24]
 800356a:	619a      	str	r2, [r3, #24]

				/* If the task is in the blocked or suspended list we need do
				nothing more than change its priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the list appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800356c:	69bb      	ldr	r3, [r7, #24]
 800356e:	6959      	ldr	r1, [r3, #20]
 8003570:	693a      	ldr	r2, [r7, #16]
 8003572:	4613      	mov	r3, r2
 8003574:	009b      	lsls	r3, r3, #2
 8003576:	4413      	add	r3, r2
 8003578:	009b      	lsls	r3, r3, #2
 800357a:	4a20      	ldr	r2, [pc, #128]	; (80035fc <vTaskPrioritySet+0x148>)
 800357c:	4413      	add	r3, r2
 800357e:	4299      	cmp	r1, r3
 8003580:	d128      	bne.n	80035d4 <vTaskPrioritySet+0x120>
				{
					/* The task is currently in its ready list - remove before
					adding it to it's new ready list.  As we are in a critical
					section we can do this even if the scheduler is suspended. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003582:	69bb      	ldr	r3, [r7, #24]
 8003584:	3304      	adds	r3, #4
 8003586:	4618      	mov	r0, r3
 8003588:	f7ff f9d3 	bl	8002932 <uxListRemove>
 800358c:	4603      	mov	r3, r0
 800358e:	2b00      	cmp	r3, #0
 8003590:	d109      	bne.n	80035a6 <vTaskPrioritySet+0xf2>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
 8003592:	2201      	movs	r2, #1
 8003594:	693b      	ldr	r3, [r7, #16]
 8003596:	fa02 f303 	lsl.w	r3, r2, r3
 800359a:	43da      	mvns	r2, r3
 800359c:	4b18      	ldr	r3, [pc, #96]	; (8003600 <vTaskPrioritySet+0x14c>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4013      	ands	r3, r2
 80035a2:	4a17      	ldr	r2, [pc, #92]	; (8003600 <vTaskPrioritySet+0x14c>)
 80035a4:	6013      	str	r3, [r2, #0]
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					prvAddTaskToReadyList( pxTCB );
 80035a6:	69bb      	ldr	r3, [r7, #24]
 80035a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035aa:	2201      	movs	r2, #1
 80035ac:	409a      	lsls	r2, r3
 80035ae:	4b14      	ldr	r3, [pc, #80]	; (8003600 <vTaskPrioritySet+0x14c>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4313      	orrs	r3, r2
 80035b4:	4a12      	ldr	r2, [pc, #72]	; (8003600 <vTaskPrioritySet+0x14c>)
 80035b6:	6013      	str	r3, [r2, #0]
 80035b8:	69bb      	ldr	r3, [r7, #24]
 80035ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035bc:	4613      	mov	r3, r2
 80035be:	009b      	lsls	r3, r3, #2
 80035c0:	4413      	add	r3, r2
 80035c2:	009b      	lsls	r3, r3, #2
 80035c4:	4a0d      	ldr	r2, [pc, #52]	; (80035fc <vTaskPrioritySet+0x148>)
 80035c6:	441a      	add	r2, r3
 80035c8:	69bb      	ldr	r3, [r7, #24]
 80035ca:	3304      	adds	r3, #4
 80035cc:	4619      	mov	r1, r3
 80035ce:	4610      	mov	r0, r2
 80035d0:	f7ff f952 	bl	8002878 <vListInsertEnd>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldRequired != pdFALSE )
 80035d4:	69fb      	ldr	r3, [r7, #28]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d007      	beq.n	80035ea <vTaskPrioritySet+0x136>
				{
					taskYIELD_IF_USING_PREEMPTION();
 80035da:	4b0a      	ldr	r3, [pc, #40]	; (8003604 <vTaskPrioritySet+0x150>)
 80035dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80035e0:	601a      	str	r2, [r3, #0]
 80035e2:	f3bf 8f4f 	dsb	sy
 80035e6:	f3bf 8f6f 	isb	sy
				/* Remove compiler warning about unused variables when the port
				optimised task selection is not being used. */
				( void ) uxPriorityUsedOnEntry;
			}
		}
		taskEXIT_CRITICAL();
 80035ea:	f000 ff9b 	bl	8004524 <vPortExitCritical>
	}
 80035ee:	bf00      	nop
 80035f0:	3720      	adds	r7, #32
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bd80      	pop	{r7, pc}
 80035f6:	bf00      	nop
 80035f8:	20000284 	.word	0x20000284
 80035fc:	20000288 	.word	0x20000288
 8003600:	2000038c 	.word	0x2000038c
 8003604:	e000ed04 	.word	0xe000ed04

08003608 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b08a      	sub	sp, #40	; 0x28
 800360c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800360e:	2300      	movs	r3, #0
 8003610:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003612:	2300      	movs	r3, #0
 8003614:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003616:	463a      	mov	r2, r7
 8003618:	1d39      	adds	r1, r7, #4
 800361a:	f107 0308 	add.w	r3, r7, #8
 800361e:	4618      	mov	r0, r3
 8003620:	f7fc ffda 	bl	80005d8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003624:	6839      	ldr	r1, [r7, #0]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	68ba      	ldr	r2, [r7, #8]
 800362a:	9202      	str	r2, [sp, #8]
 800362c:	9301      	str	r3, [sp, #4]
 800362e:	2300      	movs	r3, #0
 8003630:	9300      	str	r3, [sp, #0]
 8003632:	2300      	movs	r3, #0
 8003634:	460a      	mov	r2, r1
 8003636:	491e      	ldr	r1, [pc, #120]	; (80036b0 <vTaskStartScheduler+0xa8>)
 8003638:	481e      	ldr	r0, [pc, #120]	; (80036b4 <vTaskStartScheduler+0xac>)
 800363a:	f7ff fd73 	bl	8003124 <xTaskCreateStatic>
 800363e:	4603      	mov	r3, r0
 8003640:	4a1d      	ldr	r2, [pc, #116]	; (80036b8 <vTaskStartScheduler+0xb0>)
 8003642:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003644:	4b1c      	ldr	r3, [pc, #112]	; (80036b8 <vTaskStartScheduler+0xb0>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d002      	beq.n	8003652 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800364c:	2301      	movs	r3, #1
 800364e:	617b      	str	r3, [r7, #20]
 8003650:	e001      	b.n	8003656 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003652:	2300      	movs	r3, #0
 8003654:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003656:	697b      	ldr	r3, [r7, #20]
 8003658:	2b01      	cmp	r3, #1
 800365a:	d116      	bne.n	800368a <vTaskStartScheduler+0x82>
	__asm volatile
 800365c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003660:	f383 8811 	msr	BASEPRI, r3
 8003664:	f3bf 8f6f 	isb	sy
 8003668:	f3bf 8f4f 	dsb	sy
 800366c:	613b      	str	r3, [r7, #16]
}
 800366e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003670:	4b12      	ldr	r3, [pc, #72]	; (80036bc <vTaskStartScheduler+0xb4>)
 8003672:	f04f 32ff 	mov.w	r2, #4294967295
 8003676:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003678:	4b11      	ldr	r3, [pc, #68]	; (80036c0 <vTaskStartScheduler+0xb8>)
 800367a:	2201      	movs	r2, #1
 800367c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800367e:	4b11      	ldr	r3, [pc, #68]	; (80036c4 <vTaskStartScheduler+0xbc>)
 8003680:	2200      	movs	r2, #0
 8003682:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003684:	f000 fe7c 	bl	8004380 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003688:	e00e      	b.n	80036a8 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800368a:	697b      	ldr	r3, [r7, #20]
 800368c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003690:	d10a      	bne.n	80036a8 <vTaskStartScheduler+0xa0>
	__asm volatile
 8003692:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003696:	f383 8811 	msr	BASEPRI, r3
 800369a:	f3bf 8f6f 	isb	sy
 800369e:	f3bf 8f4f 	dsb	sy
 80036a2:	60fb      	str	r3, [r7, #12]
}
 80036a4:	bf00      	nop
 80036a6:	e7fe      	b.n	80036a6 <vTaskStartScheduler+0x9e>
}
 80036a8:	bf00      	nop
 80036aa:	3718      	adds	r7, #24
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bd80      	pop	{r7, pc}
 80036b0:	08004be8 	.word	0x08004be8
 80036b4:	08003c59 	.word	0x08003c59
 80036b8:	200003a8 	.word	0x200003a8
 80036bc:	200003a4 	.word	0x200003a4
 80036c0:	20000390 	.word	0x20000390
 80036c4:	20000388 	.word	0x20000388

080036c8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80036c8:	b480      	push	{r7}
 80036ca:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80036cc:	4b04      	ldr	r3, [pc, #16]	; (80036e0 <vTaskSuspendAll+0x18>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	3301      	adds	r3, #1
 80036d2:	4a03      	ldr	r2, [pc, #12]	; (80036e0 <vTaskSuspendAll+0x18>)
 80036d4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80036d6:	bf00      	nop
 80036d8:	46bd      	mov	sp, r7
 80036da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036de:	4770      	bx	lr
 80036e0:	200003ac 	.word	0x200003ac

080036e4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b084      	sub	sp, #16
 80036e8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80036ea:	2300      	movs	r3, #0
 80036ec:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80036ee:	2300      	movs	r3, #0
 80036f0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80036f2:	4b41      	ldr	r3, [pc, #260]	; (80037f8 <xTaskResumeAll+0x114>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d10a      	bne.n	8003710 <xTaskResumeAll+0x2c>
	__asm volatile
 80036fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036fe:	f383 8811 	msr	BASEPRI, r3
 8003702:	f3bf 8f6f 	isb	sy
 8003706:	f3bf 8f4f 	dsb	sy
 800370a:	603b      	str	r3, [r7, #0]
}
 800370c:	bf00      	nop
 800370e:	e7fe      	b.n	800370e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003710:	f000 fed8 	bl	80044c4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003714:	4b38      	ldr	r3, [pc, #224]	; (80037f8 <xTaskResumeAll+0x114>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	3b01      	subs	r3, #1
 800371a:	4a37      	ldr	r2, [pc, #220]	; (80037f8 <xTaskResumeAll+0x114>)
 800371c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800371e:	4b36      	ldr	r3, [pc, #216]	; (80037f8 <xTaskResumeAll+0x114>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d161      	bne.n	80037ea <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003726:	4b35      	ldr	r3, [pc, #212]	; (80037fc <xTaskResumeAll+0x118>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d05d      	beq.n	80037ea <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800372e:	e02e      	b.n	800378e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003730:	4b33      	ldr	r3, [pc, #204]	; (8003800 <xTaskResumeAll+0x11c>)
 8003732:	68db      	ldr	r3, [r3, #12]
 8003734:	68db      	ldr	r3, [r3, #12]
 8003736:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	3318      	adds	r3, #24
 800373c:	4618      	mov	r0, r3
 800373e:	f7ff f8f8 	bl	8002932 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	3304      	adds	r3, #4
 8003746:	4618      	mov	r0, r3
 8003748:	f7ff f8f3 	bl	8002932 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003750:	2201      	movs	r2, #1
 8003752:	409a      	lsls	r2, r3
 8003754:	4b2b      	ldr	r3, [pc, #172]	; (8003804 <xTaskResumeAll+0x120>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4313      	orrs	r3, r2
 800375a:	4a2a      	ldr	r2, [pc, #168]	; (8003804 <xTaskResumeAll+0x120>)
 800375c:	6013      	str	r3, [r2, #0]
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003762:	4613      	mov	r3, r2
 8003764:	009b      	lsls	r3, r3, #2
 8003766:	4413      	add	r3, r2
 8003768:	009b      	lsls	r3, r3, #2
 800376a:	4a27      	ldr	r2, [pc, #156]	; (8003808 <xTaskResumeAll+0x124>)
 800376c:	441a      	add	r2, r3
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	3304      	adds	r3, #4
 8003772:	4619      	mov	r1, r3
 8003774:	4610      	mov	r0, r2
 8003776:	f7ff f87f 	bl	8002878 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800377e:	4b23      	ldr	r3, [pc, #140]	; (800380c <xTaskResumeAll+0x128>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003784:	429a      	cmp	r2, r3
 8003786:	d302      	bcc.n	800378e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8003788:	4b21      	ldr	r3, [pc, #132]	; (8003810 <xTaskResumeAll+0x12c>)
 800378a:	2201      	movs	r2, #1
 800378c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800378e:	4b1c      	ldr	r3, [pc, #112]	; (8003800 <xTaskResumeAll+0x11c>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d1cc      	bne.n	8003730 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d001      	beq.n	80037a0 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800379c:	f000 fb12 	bl	8003dc4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80037a0:	4b1c      	ldr	r3, [pc, #112]	; (8003814 <xTaskResumeAll+0x130>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d010      	beq.n	80037ce <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80037ac:	f000 f836 	bl	800381c <xTaskIncrementTick>
 80037b0:	4603      	mov	r3, r0
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d002      	beq.n	80037bc <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80037b6:	4b16      	ldr	r3, [pc, #88]	; (8003810 <xTaskResumeAll+0x12c>)
 80037b8:	2201      	movs	r2, #1
 80037ba:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	3b01      	subs	r3, #1
 80037c0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d1f1      	bne.n	80037ac <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80037c8:	4b12      	ldr	r3, [pc, #72]	; (8003814 <xTaskResumeAll+0x130>)
 80037ca:	2200      	movs	r2, #0
 80037cc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80037ce:	4b10      	ldr	r3, [pc, #64]	; (8003810 <xTaskResumeAll+0x12c>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d009      	beq.n	80037ea <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80037d6:	2301      	movs	r3, #1
 80037d8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80037da:	4b0f      	ldr	r3, [pc, #60]	; (8003818 <xTaskResumeAll+0x134>)
 80037dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80037e0:	601a      	str	r2, [r3, #0]
 80037e2:	f3bf 8f4f 	dsb	sy
 80037e6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80037ea:	f000 fe9b 	bl	8004524 <vPortExitCritical>

	return xAlreadyYielded;
 80037ee:	68bb      	ldr	r3, [r7, #8]
}
 80037f0:	4618      	mov	r0, r3
 80037f2:	3710      	adds	r7, #16
 80037f4:	46bd      	mov	sp, r7
 80037f6:	bd80      	pop	{r7, pc}
 80037f8:	200003ac 	.word	0x200003ac
 80037fc:	20000384 	.word	0x20000384
 8003800:	20000344 	.word	0x20000344
 8003804:	2000038c 	.word	0x2000038c
 8003808:	20000288 	.word	0x20000288
 800380c:	20000284 	.word	0x20000284
 8003810:	20000398 	.word	0x20000398
 8003814:	20000394 	.word	0x20000394
 8003818:	e000ed04 	.word	0xe000ed04

0800381c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b086      	sub	sp, #24
 8003820:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003822:	2300      	movs	r3, #0
 8003824:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003826:	4b4e      	ldr	r3, [pc, #312]	; (8003960 <xTaskIncrementTick+0x144>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	2b00      	cmp	r3, #0
 800382c:	f040 808e 	bne.w	800394c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003830:	4b4c      	ldr	r3, [pc, #304]	; (8003964 <xTaskIncrementTick+0x148>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	3301      	adds	r3, #1
 8003836:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003838:	4a4a      	ldr	r2, [pc, #296]	; (8003964 <xTaskIncrementTick+0x148>)
 800383a:	693b      	ldr	r3, [r7, #16]
 800383c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800383e:	693b      	ldr	r3, [r7, #16]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d120      	bne.n	8003886 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003844:	4b48      	ldr	r3, [pc, #288]	; (8003968 <xTaskIncrementTick+0x14c>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d00a      	beq.n	8003864 <xTaskIncrementTick+0x48>
	__asm volatile
 800384e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003852:	f383 8811 	msr	BASEPRI, r3
 8003856:	f3bf 8f6f 	isb	sy
 800385a:	f3bf 8f4f 	dsb	sy
 800385e:	603b      	str	r3, [r7, #0]
}
 8003860:	bf00      	nop
 8003862:	e7fe      	b.n	8003862 <xTaskIncrementTick+0x46>
 8003864:	4b40      	ldr	r3, [pc, #256]	; (8003968 <xTaskIncrementTick+0x14c>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	60fb      	str	r3, [r7, #12]
 800386a:	4b40      	ldr	r3, [pc, #256]	; (800396c <xTaskIncrementTick+0x150>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4a3e      	ldr	r2, [pc, #248]	; (8003968 <xTaskIncrementTick+0x14c>)
 8003870:	6013      	str	r3, [r2, #0]
 8003872:	4a3e      	ldr	r2, [pc, #248]	; (800396c <xTaskIncrementTick+0x150>)
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	6013      	str	r3, [r2, #0]
 8003878:	4b3d      	ldr	r3, [pc, #244]	; (8003970 <xTaskIncrementTick+0x154>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	3301      	adds	r3, #1
 800387e:	4a3c      	ldr	r2, [pc, #240]	; (8003970 <xTaskIncrementTick+0x154>)
 8003880:	6013      	str	r3, [r2, #0]
 8003882:	f000 fa9f 	bl	8003dc4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003886:	4b3b      	ldr	r3, [pc, #236]	; (8003974 <xTaskIncrementTick+0x158>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	693a      	ldr	r2, [r7, #16]
 800388c:	429a      	cmp	r2, r3
 800388e:	d348      	bcc.n	8003922 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003890:	4b35      	ldr	r3, [pc, #212]	; (8003968 <xTaskIncrementTick+0x14c>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d104      	bne.n	80038a4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800389a:	4b36      	ldr	r3, [pc, #216]	; (8003974 <xTaskIncrementTick+0x158>)
 800389c:	f04f 32ff 	mov.w	r2, #4294967295
 80038a0:	601a      	str	r2, [r3, #0]
					break;
 80038a2:	e03e      	b.n	8003922 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80038a4:	4b30      	ldr	r3, [pc, #192]	; (8003968 <xTaskIncrementTick+0x14c>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	68db      	ldr	r3, [r3, #12]
 80038aa:	68db      	ldr	r3, [r3, #12]
 80038ac:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80038ae:	68bb      	ldr	r3, [r7, #8]
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80038b4:	693a      	ldr	r2, [r7, #16]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	429a      	cmp	r2, r3
 80038ba:	d203      	bcs.n	80038c4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80038bc:	4a2d      	ldr	r2, [pc, #180]	; (8003974 <xTaskIncrementTick+0x158>)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80038c2:	e02e      	b.n	8003922 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	3304      	adds	r3, #4
 80038c8:	4618      	mov	r0, r3
 80038ca:	f7ff f832 	bl	8002932 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80038ce:	68bb      	ldr	r3, [r7, #8]
 80038d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d004      	beq.n	80038e0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80038d6:	68bb      	ldr	r3, [r7, #8]
 80038d8:	3318      	adds	r3, #24
 80038da:	4618      	mov	r0, r3
 80038dc:	f7ff f829 	bl	8002932 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80038e0:	68bb      	ldr	r3, [r7, #8]
 80038e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038e4:	2201      	movs	r2, #1
 80038e6:	409a      	lsls	r2, r3
 80038e8:	4b23      	ldr	r3, [pc, #140]	; (8003978 <xTaskIncrementTick+0x15c>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4313      	orrs	r3, r2
 80038ee:	4a22      	ldr	r2, [pc, #136]	; (8003978 <xTaskIncrementTick+0x15c>)
 80038f0:	6013      	str	r3, [r2, #0]
 80038f2:	68bb      	ldr	r3, [r7, #8]
 80038f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038f6:	4613      	mov	r3, r2
 80038f8:	009b      	lsls	r3, r3, #2
 80038fa:	4413      	add	r3, r2
 80038fc:	009b      	lsls	r3, r3, #2
 80038fe:	4a1f      	ldr	r2, [pc, #124]	; (800397c <xTaskIncrementTick+0x160>)
 8003900:	441a      	add	r2, r3
 8003902:	68bb      	ldr	r3, [r7, #8]
 8003904:	3304      	adds	r3, #4
 8003906:	4619      	mov	r1, r3
 8003908:	4610      	mov	r0, r2
 800390a:	f7fe ffb5 	bl	8002878 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800390e:	68bb      	ldr	r3, [r7, #8]
 8003910:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003912:	4b1b      	ldr	r3, [pc, #108]	; (8003980 <xTaskIncrementTick+0x164>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003918:	429a      	cmp	r2, r3
 800391a:	d3b9      	bcc.n	8003890 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800391c:	2301      	movs	r3, #1
 800391e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003920:	e7b6      	b.n	8003890 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003922:	4b17      	ldr	r3, [pc, #92]	; (8003980 <xTaskIncrementTick+0x164>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003928:	4914      	ldr	r1, [pc, #80]	; (800397c <xTaskIncrementTick+0x160>)
 800392a:	4613      	mov	r3, r2
 800392c:	009b      	lsls	r3, r3, #2
 800392e:	4413      	add	r3, r2
 8003930:	009b      	lsls	r3, r3, #2
 8003932:	440b      	add	r3, r1
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	2b01      	cmp	r3, #1
 8003938:	d901      	bls.n	800393e <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800393a:	2301      	movs	r3, #1
 800393c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800393e:	4b11      	ldr	r3, [pc, #68]	; (8003984 <xTaskIncrementTick+0x168>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d007      	beq.n	8003956 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8003946:	2301      	movs	r3, #1
 8003948:	617b      	str	r3, [r7, #20]
 800394a:	e004      	b.n	8003956 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800394c:	4b0e      	ldr	r3, [pc, #56]	; (8003988 <xTaskIncrementTick+0x16c>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	3301      	adds	r3, #1
 8003952:	4a0d      	ldr	r2, [pc, #52]	; (8003988 <xTaskIncrementTick+0x16c>)
 8003954:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003956:	697b      	ldr	r3, [r7, #20]
}
 8003958:	4618      	mov	r0, r3
 800395a:	3718      	adds	r7, #24
 800395c:	46bd      	mov	sp, r7
 800395e:	bd80      	pop	{r7, pc}
 8003960:	200003ac 	.word	0x200003ac
 8003964:	20000388 	.word	0x20000388
 8003968:	2000033c 	.word	0x2000033c
 800396c:	20000340 	.word	0x20000340
 8003970:	2000039c 	.word	0x2000039c
 8003974:	200003a4 	.word	0x200003a4
 8003978:	2000038c 	.word	0x2000038c
 800397c:	20000288 	.word	0x20000288
 8003980:	20000284 	.word	0x20000284
 8003984:	20000398 	.word	0x20000398
 8003988:	20000394 	.word	0x20000394

0800398c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800398c:	b480      	push	{r7}
 800398e:	b087      	sub	sp, #28
 8003990:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003992:	4b27      	ldr	r3, [pc, #156]	; (8003a30 <vTaskSwitchContext+0xa4>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d003      	beq.n	80039a2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800399a:	4b26      	ldr	r3, [pc, #152]	; (8003a34 <vTaskSwitchContext+0xa8>)
 800399c:	2201      	movs	r2, #1
 800399e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80039a0:	e03f      	b.n	8003a22 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 80039a2:	4b24      	ldr	r3, [pc, #144]	; (8003a34 <vTaskSwitchContext+0xa8>)
 80039a4:	2200      	movs	r2, #0
 80039a6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80039a8:	4b23      	ldr	r3, [pc, #140]	; (8003a38 <vTaskSwitchContext+0xac>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	fab3 f383 	clz	r3, r3
 80039b4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80039b6:	7afb      	ldrb	r3, [r7, #11]
 80039b8:	f1c3 031f 	rsb	r3, r3, #31
 80039bc:	617b      	str	r3, [r7, #20]
 80039be:	491f      	ldr	r1, [pc, #124]	; (8003a3c <vTaskSwitchContext+0xb0>)
 80039c0:	697a      	ldr	r2, [r7, #20]
 80039c2:	4613      	mov	r3, r2
 80039c4:	009b      	lsls	r3, r3, #2
 80039c6:	4413      	add	r3, r2
 80039c8:	009b      	lsls	r3, r3, #2
 80039ca:	440b      	add	r3, r1
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d10a      	bne.n	80039e8 <vTaskSwitchContext+0x5c>
	__asm volatile
 80039d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039d6:	f383 8811 	msr	BASEPRI, r3
 80039da:	f3bf 8f6f 	isb	sy
 80039de:	f3bf 8f4f 	dsb	sy
 80039e2:	607b      	str	r3, [r7, #4]
}
 80039e4:	bf00      	nop
 80039e6:	e7fe      	b.n	80039e6 <vTaskSwitchContext+0x5a>
 80039e8:	697a      	ldr	r2, [r7, #20]
 80039ea:	4613      	mov	r3, r2
 80039ec:	009b      	lsls	r3, r3, #2
 80039ee:	4413      	add	r3, r2
 80039f0:	009b      	lsls	r3, r3, #2
 80039f2:	4a12      	ldr	r2, [pc, #72]	; (8003a3c <vTaskSwitchContext+0xb0>)
 80039f4:	4413      	add	r3, r2
 80039f6:	613b      	str	r3, [r7, #16]
 80039f8:	693b      	ldr	r3, [r7, #16]
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	685a      	ldr	r2, [r3, #4]
 80039fe:	693b      	ldr	r3, [r7, #16]
 8003a00:	605a      	str	r2, [r3, #4]
 8003a02:	693b      	ldr	r3, [r7, #16]
 8003a04:	685a      	ldr	r2, [r3, #4]
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	3308      	adds	r3, #8
 8003a0a:	429a      	cmp	r2, r3
 8003a0c:	d104      	bne.n	8003a18 <vTaskSwitchContext+0x8c>
 8003a0e:	693b      	ldr	r3, [r7, #16]
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	685a      	ldr	r2, [r3, #4]
 8003a14:	693b      	ldr	r3, [r7, #16]
 8003a16:	605a      	str	r2, [r3, #4]
 8003a18:	693b      	ldr	r3, [r7, #16]
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	68db      	ldr	r3, [r3, #12]
 8003a1e:	4a08      	ldr	r2, [pc, #32]	; (8003a40 <vTaskSwitchContext+0xb4>)
 8003a20:	6013      	str	r3, [r2, #0]
}
 8003a22:	bf00      	nop
 8003a24:	371c      	adds	r7, #28
 8003a26:	46bd      	mov	sp, r7
 8003a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2c:	4770      	bx	lr
 8003a2e:	bf00      	nop
 8003a30:	200003ac 	.word	0x200003ac
 8003a34:	20000398 	.word	0x20000398
 8003a38:	2000038c 	.word	0x2000038c
 8003a3c:	20000288 	.word	0x20000288
 8003a40:	20000284 	.word	0x20000284

08003a44 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b084      	sub	sp, #16
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
 8003a4c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d10a      	bne.n	8003a6a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003a54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a58:	f383 8811 	msr	BASEPRI, r3
 8003a5c:	f3bf 8f6f 	isb	sy
 8003a60:	f3bf 8f4f 	dsb	sy
 8003a64:	60fb      	str	r3, [r7, #12]
}
 8003a66:	bf00      	nop
 8003a68:	e7fe      	b.n	8003a68 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003a6a:	4b07      	ldr	r3, [pc, #28]	; (8003a88 <vTaskPlaceOnEventList+0x44>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	3318      	adds	r3, #24
 8003a70:	4619      	mov	r1, r3
 8003a72:	6878      	ldr	r0, [r7, #4]
 8003a74:	f7fe ff24 	bl	80028c0 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003a78:	2101      	movs	r1, #1
 8003a7a:	6838      	ldr	r0, [r7, #0]
 8003a7c:	f000 fb8e 	bl	800419c <prvAddCurrentTaskToDelayedList>
}
 8003a80:	bf00      	nop
 8003a82:	3710      	adds	r7, #16
 8003a84:	46bd      	mov	sp, r7
 8003a86:	bd80      	pop	{r7, pc}
 8003a88:	20000284 	.word	0x20000284

08003a8c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b086      	sub	sp, #24
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	68db      	ldr	r3, [r3, #12]
 8003a98:	68db      	ldr	r3, [r3, #12]
 8003a9a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003a9c:	693b      	ldr	r3, [r7, #16]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d10a      	bne.n	8003ab8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8003aa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003aa6:	f383 8811 	msr	BASEPRI, r3
 8003aaa:	f3bf 8f6f 	isb	sy
 8003aae:	f3bf 8f4f 	dsb	sy
 8003ab2:	60fb      	str	r3, [r7, #12]
}
 8003ab4:	bf00      	nop
 8003ab6:	e7fe      	b.n	8003ab6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003ab8:	693b      	ldr	r3, [r7, #16]
 8003aba:	3318      	adds	r3, #24
 8003abc:	4618      	mov	r0, r3
 8003abe:	f7fe ff38 	bl	8002932 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003ac2:	4b1d      	ldr	r3, [pc, #116]	; (8003b38 <xTaskRemoveFromEventList+0xac>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d11c      	bne.n	8003b04 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003aca:	693b      	ldr	r3, [r7, #16]
 8003acc:	3304      	adds	r3, #4
 8003ace:	4618      	mov	r0, r3
 8003ad0:	f7fe ff2f 	bl	8002932 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003ad4:	693b      	ldr	r3, [r7, #16]
 8003ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ad8:	2201      	movs	r2, #1
 8003ada:	409a      	lsls	r2, r3
 8003adc:	4b17      	ldr	r3, [pc, #92]	; (8003b3c <xTaskRemoveFromEventList+0xb0>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	4a16      	ldr	r2, [pc, #88]	; (8003b3c <xTaskRemoveFromEventList+0xb0>)
 8003ae4:	6013      	str	r3, [r2, #0]
 8003ae6:	693b      	ldr	r3, [r7, #16]
 8003ae8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003aea:	4613      	mov	r3, r2
 8003aec:	009b      	lsls	r3, r3, #2
 8003aee:	4413      	add	r3, r2
 8003af0:	009b      	lsls	r3, r3, #2
 8003af2:	4a13      	ldr	r2, [pc, #76]	; (8003b40 <xTaskRemoveFromEventList+0xb4>)
 8003af4:	441a      	add	r2, r3
 8003af6:	693b      	ldr	r3, [r7, #16]
 8003af8:	3304      	adds	r3, #4
 8003afa:	4619      	mov	r1, r3
 8003afc:	4610      	mov	r0, r2
 8003afe:	f7fe febb 	bl	8002878 <vListInsertEnd>
 8003b02:	e005      	b.n	8003b10 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003b04:	693b      	ldr	r3, [r7, #16]
 8003b06:	3318      	adds	r3, #24
 8003b08:	4619      	mov	r1, r3
 8003b0a:	480e      	ldr	r0, [pc, #56]	; (8003b44 <xTaskRemoveFromEventList+0xb8>)
 8003b0c:	f7fe feb4 	bl	8002878 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003b10:	693b      	ldr	r3, [r7, #16]
 8003b12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b14:	4b0c      	ldr	r3, [pc, #48]	; (8003b48 <xTaskRemoveFromEventList+0xbc>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b1a:	429a      	cmp	r2, r3
 8003b1c:	d905      	bls.n	8003b2a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003b1e:	2301      	movs	r3, #1
 8003b20:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003b22:	4b0a      	ldr	r3, [pc, #40]	; (8003b4c <xTaskRemoveFromEventList+0xc0>)
 8003b24:	2201      	movs	r2, #1
 8003b26:	601a      	str	r2, [r3, #0]
 8003b28:	e001      	b.n	8003b2e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003b2e:	697b      	ldr	r3, [r7, #20]
}
 8003b30:	4618      	mov	r0, r3
 8003b32:	3718      	adds	r7, #24
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bd80      	pop	{r7, pc}
 8003b38:	200003ac 	.word	0x200003ac
 8003b3c:	2000038c 	.word	0x2000038c
 8003b40:	20000288 	.word	0x20000288
 8003b44:	20000344 	.word	0x20000344
 8003b48:	20000284 	.word	0x20000284
 8003b4c:	20000398 	.word	0x20000398

08003b50 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003b50:	b480      	push	{r7}
 8003b52:	b083      	sub	sp, #12
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003b58:	4b06      	ldr	r3, [pc, #24]	; (8003b74 <vTaskInternalSetTimeOutState+0x24>)
 8003b5a:	681a      	ldr	r2, [r3, #0]
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003b60:	4b05      	ldr	r3, [pc, #20]	; (8003b78 <vTaskInternalSetTimeOutState+0x28>)
 8003b62:	681a      	ldr	r2, [r3, #0]
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	605a      	str	r2, [r3, #4]
}
 8003b68:	bf00      	nop
 8003b6a:	370c      	adds	r7, #12
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b72:	4770      	bx	lr
 8003b74:	2000039c 	.word	0x2000039c
 8003b78:	20000388 	.word	0x20000388

08003b7c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b088      	sub	sp, #32
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
 8003b84:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d10a      	bne.n	8003ba2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8003b8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b90:	f383 8811 	msr	BASEPRI, r3
 8003b94:	f3bf 8f6f 	isb	sy
 8003b98:	f3bf 8f4f 	dsb	sy
 8003b9c:	613b      	str	r3, [r7, #16]
}
 8003b9e:	bf00      	nop
 8003ba0:	e7fe      	b.n	8003ba0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d10a      	bne.n	8003bbe <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8003ba8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bac:	f383 8811 	msr	BASEPRI, r3
 8003bb0:	f3bf 8f6f 	isb	sy
 8003bb4:	f3bf 8f4f 	dsb	sy
 8003bb8:	60fb      	str	r3, [r7, #12]
}
 8003bba:	bf00      	nop
 8003bbc:	e7fe      	b.n	8003bbc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8003bbe:	f000 fc81 	bl	80044c4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003bc2:	4b1d      	ldr	r3, [pc, #116]	; (8003c38 <xTaskCheckForTimeOut+0xbc>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	69ba      	ldr	r2, [r7, #24]
 8003bce:	1ad3      	subs	r3, r2, r3
 8003bd0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bda:	d102      	bne.n	8003be2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003bdc:	2300      	movs	r3, #0
 8003bde:	61fb      	str	r3, [r7, #28]
 8003be0:	e023      	b.n	8003c2a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681a      	ldr	r2, [r3, #0]
 8003be6:	4b15      	ldr	r3, [pc, #84]	; (8003c3c <xTaskCheckForTimeOut+0xc0>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	429a      	cmp	r2, r3
 8003bec:	d007      	beq.n	8003bfe <xTaskCheckForTimeOut+0x82>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	69ba      	ldr	r2, [r7, #24]
 8003bf4:	429a      	cmp	r2, r3
 8003bf6:	d302      	bcc.n	8003bfe <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	61fb      	str	r3, [r7, #28]
 8003bfc:	e015      	b.n	8003c2a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	697a      	ldr	r2, [r7, #20]
 8003c04:	429a      	cmp	r2, r3
 8003c06:	d20b      	bcs.n	8003c20 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	681a      	ldr	r2, [r3, #0]
 8003c0c:	697b      	ldr	r3, [r7, #20]
 8003c0e:	1ad2      	subs	r2, r2, r3
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003c14:	6878      	ldr	r0, [r7, #4]
 8003c16:	f7ff ff9b 	bl	8003b50 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	61fb      	str	r3, [r7, #28]
 8003c1e:	e004      	b.n	8003c2a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	2200      	movs	r2, #0
 8003c24:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003c26:	2301      	movs	r3, #1
 8003c28:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003c2a:	f000 fc7b 	bl	8004524 <vPortExitCritical>

	return xReturn;
 8003c2e:	69fb      	ldr	r3, [r7, #28]
}
 8003c30:	4618      	mov	r0, r3
 8003c32:	3720      	adds	r7, #32
 8003c34:	46bd      	mov	sp, r7
 8003c36:	bd80      	pop	{r7, pc}
 8003c38:	20000388 	.word	0x20000388
 8003c3c:	2000039c 	.word	0x2000039c

08003c40 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003c40:	b480      	push	{r7}
 8003c42:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003c44:	4b03      	ldr	r3, [pc, #12]	; (8003c54 <vTaskMissedYield+0x14>)
 8003c46:	2201      	movs	r2, #1
 8003c48:	601a      	str	r2, [r3, #0]
}
 8003c4a:	bf00      	nop
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c52:	4770      	bx	lr
 8003c54:	20000398 	.word	0x20000398

08003c58 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b082      	sub	sp, #8
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003c60:	f000 f852 	bl	8003d08 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003c64:	4b06      	ldr	r3, [pc, #24]	; (8003c80 <prvIdleTask+0x28>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	2b01      	cmp	r3, #1
 8003c6a:	d9f9      	bls.n	8003c60 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003c6c:	4b05      	ldr	r3, [pc, #20]	; (8003c84 <prvIdleTask+0x2c>)
 8003c6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c72:	601a      	str	r2, [r3, #0]
 8003c74:	f3bf 8f4f 	dsb	sy
 8003c78:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003c7c:	e7f0      	b.n	8003c60 <prvIdleTask+0x8>
 8003c7e:	bf00      	nop
 8003c80:	20000288 	.word	0x20000288
 8003c84:	e000ed04 	.word	0xe000ed04

08003c88 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b082      	sub	sp, #8
 8003c8c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003c8e:	2300      	movs	r3, #0
 8003c90:	607b      	str	r3, [r7, #4]
 8003c92:	e00c      	b.n	8003cae <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003c94:	687a      	ldr	r2, [r7, #4]
 8003c96:	4613      	mov	r3, r2
 8003c98:	009b      	lsls	r3, r3, #2
 8003c9a:	4413      	add	r3, r2
 8003c9c:	009b      	lsls	r3, r3, #2
 8003c9e:	4a12      	ldr	r2, [pc, #72]	; (8003ce8 <prvInitialiseTaskLists+0x60>)
 8003ca0:	4413      	add	r3, r2
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	f7fe fdbb 	bl	800281e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	3301      	adds	r3, #1
 8003cac:	607b      	str	r3, [r7, #4]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2b06      	cmp	r3, #6
 8003cb2:	d9ef      	bls.n	8003c94 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003cb4:	480d      	ldr	r0, [pc, #52]	; (8003cec <prvInitialiseTaskLists+0x64>)
 8003cb6:	f7fe fdb2 	bl	800281e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003cba:	480d      	ldr	r0, [pc, #52]	; (8003cf0 <prvInitialiseTaskLists+0x68>)
 8003cbc:	f7fe fdaf 	bl	800281e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003cc0:	480c      	ldr	r0, [pc, #48]	; (8003cf4 <prvInitialiseTaskLists+0x6c>)
 8003cc2:	f7fe fdac 	bl	800281e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003cc6:	480c      	ldr	r0, [pc, #48]	; (8003cf8 <prvInitialiseTaskLists+0x70>)
 8003cc8:	f7fe fda9 	bl	800281e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003ccc:	480b      	ldr	r0, [pc, #44]	; (8003cfc <prvInitialiseTaskLists+0x74>)
 8003cce:	f7fe fda6 	bl	800281e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003cd2:	4b0b      	ldr	r3, [pc, #44]	; (8003d00 <prvInitialiseTaskLists+0x78>)
 8003cd4:	4a05      	ldr	r2, [pc, #20]	; (8003cec <prvInitialiseTaskLists+0x64>)
 8003cd6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003cd8:	4b0a      	ldr	r3, [pc, #40]	; (8003d04 <prvInitialiseTaskLists+0x7c>)
 8003cda:	4a05      	ldr	r2, [pc, #20]	; (8003cf0 <prvInitialiseTaskLists+0x68>)
 8003cdc:	601a      	str	r2, [r3, #0]
}
 8003cde:	bf00      	nop
 8003ce0:	3708      	adds	r7, #8
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	bd80      	pop	{r7, pc}
 8003ce6:	bf00      	nop
 8003ce8:	20000288 	.word	0x20000288
 8003cec:	20000314 	.word	0x20000314
 8003cf0:	20000328 	.word	0x20000328
 8003cf4:	20000344 	.word	0x20000344
 8003cf8:	20000358 	.word	0x20000358
 8003cfc:	20000370 	.word	0x20000370
 8003d00:	2000033c 	.word	0x2000033c
 8003d04:	20000340 	.word	0x20000340

08003d08 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b082      	sub	sp, #8
 8003d0c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003d0e:	e019      	b.n	8003d44 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003d10:	f000 fbd8 	bl	80044c4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003d14:	4b10      	ldr	r3, [pc, #64]	; (8003d58 <prvCheckTasksWaitingTermination+0x50>)
 8003d16:	68db      	ldr	r3, [r3, #12]
 8003d18:	68db      	ldr	r3, [r3, #12]
 8003d1a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	3304      	adds	r3, #4
 8003d20:	4618      	mov	r0, r3
 8003d22:	f7fe fe06 	bl	8002932 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003d26:	4b0d      	ldr	r3, [pc, #52]	; (8003d5c <prvCheckTasksWaitingTermination+0x54>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	3b01      	subs	r3, #1
 8003d2c:	4a0b      	ldr	r2, [pc, #44]	; (8003d5c <prvCheckTasksWaitingTermination+0x54>)
 8003d2e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003d30:	4b0b      	ldr	r3, [pc, #44]	; (8003d60 <prvCheckTasksWaitingTermination+0x58>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	3b01      	subs	r3, #1
 8003d36:	4a0a      	ldr	r2, [pc, #40]	; (8003d60 <prvCheckTasksWaitingTermination+0x58>)
 8003d38:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003d3a:	f000 fbf3 	bl	8004524 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003d3e:	6878      	ldr	r0, [r7, #4]
 8003d40:	f000 f810 	bl	8003d64 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003d44:	4b06      	ldr	r3, [pc, #24]	; (8003d60 <prvCheckTasksWaitingTermination+0x58>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d1e1      	bne.n	8003d10 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003d4c:	bf00      	nop
 8003d4e:	bf00      	nop
 8003d50:	3708      	adds	r7, #8
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bd80      	pop	{r7, pc}
 8003d56:	bf00      	nop
 8003d58:	20000358 	.word	0x20000358
 8003d5c:	20000384 	.word	0x20000384
 8003d60:	2000036c 	.word	0x2000036c

08003d64 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b084      	sub	sp, #16
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d108      	bne.n	8003d88 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	f000 fd50 	bl	8004820 <vPortFree>
				vPortFree( pxTCB );
 8003d80:	6878      	ldr	r0, [r7, #4]
 8003d82:	f000 fd4d 	bl	8004820 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003d86:	e018      	b.n	8003dba <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003d8e:	2b01      	cmp	r3, #1
 8003d90:	d103      	bne.n	8003d9a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8003d92:	6878      	ldr	r0, [r7, #4]
 8003d94:	f000 fd44 	bl	8004820 <vPortFree>
	}
 8003d98:	e00f      	b.n	8003dba <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003da0:	2b02      	cmp	r3, #2
 8003da2:	d00a      	beq.n	8003dba <prvDeleteTCB+0x56>
	__asm volatile
 8003da4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003da8:	f383 8811 	msr	BASEPRI, r3
 8003dac:	f3bf 8f6f 	isb	sy
 8003db0:	f3bf 8f4f 	dsb	sy
 8003db4:	60fb      	str	r3, [r7, #12]
}
 8003db6:	bf00      	nop
 8003db8:	e7fe      	b.n	8003db8 <prvDeleteTCB+0x54>
	}
 8003dba:	bf00      	nop
 8003dbc:	3710      	adds	r7, #16
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bd80      	pop	{r7, pc}
	...

08003dc4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003dc4:	b480      	push	{r7}
 8003dc6:	b083      	sub	sp, #12
 8003dc8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003dca:	4b0c      	ldr	r3, [pc, #48]	; (8003dfc <prvResetNextTaskUnblockTime+0x38>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d104      	bne.n	8003dde <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003dd4:	4b0a      	ldr	r3, [pc, #40]	; (8003e00 <prvResetNextTaskUnblockTime+0x3c>)
 8003dd6:	f04f 32ff 	mov.w	r2, #4294967295
 8003dda:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003ddc:	e008      	b.n	8003df0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003dde:	4b07      	ldr	r3, [pc, #28]	; (8003dfc <prvResetNextTaskUnblockTime+0x38>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	68db      	ldr	r3, [r3, #12]
 8003de4:	68db      	ldr	r3, [r3, #12]
 8003de6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	4a04      	ldr	r2, [pc, #16]	; (8003e00 <prvResetNextTaskUnblockTime+0x3c>)
 8003dee:	6013      	str	r3, [r2, #0]
}
 8003df0:	bf00      	nop
 8003df2:	370c      	adds	r7, #12
 8003df4:	46bd      	mov	sp, r7
 8003df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfa:	4770      	bx	lr
 8003dfc:	2000033c 	.word	0x2000033c
 8003e00:	200003a4 	.word	0x200003a4

08003e04 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8003e04:	b480      	push	{r7}
 8003e06:	b083      	sub	sp, #12
 8003e08:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8003e0a:	4b05      	ldr	r3, [pc, #20]	; (8003e20 <xTaskGetCurrentTaskHandle+0x1c>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	607b      	str	r3, [r7, #4]

		return xReturn;
 8003e10:	687b      	ldr	r3, [r7, #4]
	}
 8003e12:	4618      	mov	r0, r3
 8003e14:	370c      	adds	r7, #12
 8003e16:	46bd      	mov	sp, r7
 8003e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1c:	4770      	bx	lr
 8003e1e:	bf00      	nop
 8003e20:	20000284 	.word	0x20000284

08003e24 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003e24:	b480      	push	{r7}
 8003e26:	b083      	sub	sp, #12
 8003e28:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003e2a:	4b0b      	ldr	r3, [pc, #44]	; (8003e58 <xTaskGetSchedulerState+0x34>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d102      	bne.n	8003e38 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003e32:	2301      	movs	r3, #1
 8003e34:	607b      	str	r3, [r7, #4]
 8003e36:	e008      	b.n	8003e4a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003e38:	4b08      	ldr	r3, [pc, #32]	; (8003e5c <xTaskGetSchedulerState+0x38>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d102      	bne.n	8003e46 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003e40:	2302      	movs	r3, #2
 8003e42:	607b      	str	r3, [r7, #4]
 8003e44:	e001      	b.n	8003e4a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003e46:	2300      	movs	r3, #0
 8003e48:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003e4a:	687b      	ldr	r3, [r7, #4]
	}
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	370c      	adds	r7, #12
 8003e50:	46bd      	mov	sp, r7
 8003e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e56:	4770      	bx	lr
 8003e58:	20000390 	.word	0x20000390
 8003e5c:	200003ac 	.word	0x200003ac

08003e60 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b084      	sub	sp, #16
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d05e      	beq.n	8003f34 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8003e76:	68bb      	ldr	r3, [r7, #8]
 8003e78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e7a:	4b31      	ldr	r3, [pc, #196]	; (8003f40 <xTaskPriorityInherit+0xe0>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e80:	429a      	cmp	r2, r3
 8003e82:	d24e      	bcs.n	8003f22 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	699b      	ldr	r3, [r3, #24]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	db06      	blt.n	8003e9a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e8c:	4b2c      	ldr	r3, [pc, #176]	; (8003f40 <xTaskPriorityInherit+0xe0>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e92:	f1c3 0207 	rsb	r2, r3, #7
 8003e96:	68bb      	ldr	r3, [r7, #8]
 8003e98:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8003e9a:	68bb      	ldr	r3, [r7, #8]
 8003e9c:	6959      	ldr	r1, [r3, #20]
 8003e9e:	68bb      	ldr	r3, [r7, #8]
 8003ea0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ea2:	4613      	mov	r3, r2
 8003ea4:	009b      	lsls	r3, r3, #2
 8003ea6:	4413      	add	r3, r2
 8003ea8:	009b      	lsls	r3, r3, #2
 8003eaa:	4a26      	ldr	r2, [pc, #152]	; (8003f44 <xTaskPriorityInherit+0xe4>)
 8003eac:	4413      	add	r3, r2
 8003eae:	4299      	cmp	r1, r3
 8003eb0:	d12f      	bne.n	8003f12 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003eb2:	68bb      	ldr	r3, [r7, #8]
 8003eb4:	3304      	adds	r3, #4
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	f7fe fd3b 	bl	8002932 <uxListRemove>
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d10a      	bne.n	8003ed8 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8003ec2:	68bb      	ldr	r3, [r7, #8]
 8003ec4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ec6:	2201      	movs	r2, #1
 8003ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8003ecc:	43da      	mvns	r2, r3
 8003ece:	4b1e      	ldr	r3, [pc, #120]	; (8003f48 <xTaskPriorityInherit+0xe8>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4013      	ands	r3, r2
 8003ed4:	4a1c      	ldr	r2, [pc, #112]	; (8003f48 <xTaskPriorityInherit+0xe8>)
 8003ed6:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003ed8:	4b19      	ldr	r3, [pc, #100]	; (8003f40 <xTaskPriorityInherit+0xe0>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ede:	68bb      	ldr	r3, [r7, #8]
 8003ee0:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8003ee2:	68bb      	ldr	r3, [r7, #8]
 8003ee4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ee6:	2201      	movs	r2, #1
 8003ee8:	409a      	lsls	r2, r3
 8003eea:	4b17      	ldr	r3, [pc, #92]	; (8003f48 <xTaskPriorityInherit+0xe8>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	4a15      	ldr	r2, [pc, #84]	; (8003f48 <xTaskPriorityInherit+0xe8>)
 8003ef2:	6013      	str	r3, [r2, #0]
 8003ef4:	68bb      	ldr	r3, [r7, #8]
 8003ef6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ef8:	4613      	mov	r3, r2
 8003efa:	009b      	lsls	r3, r3, #2
 8003efc:	4413      	add	r3, r2
 8003efe:	009b      	lsls	r3, r3, #2
 8003f00:	4a10      	ldr	r2, [pc, #64]	; (8003f44 <xTaskPriorityInherit+0xe4>)
 8003f02:	441a      	add	r2, r3
 8003f04:	68bb      	ldr	r3, [r7, #8]
 8003f06:	3304      	adds	r3, #4
 8003f08:	4619      	mov	r1, r3
 8003f0a:	4610      	mov	r0, r2
 8003f0c:	f7fe fcb4 	bl	8002878 <vListInsertEnd>
 8003f10:	e004      	b.n	8003f1c <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003f12:	4b0b      	ldr	r3, [pc, #44]	; (8003f40 <xTaskPriorityInherit+0xe0>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f18:	68bb      	ldr	r3, [r7, #8]
 8003f1a:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	60fb      	str	r3, [r7, #12]
 8003f20:	e008      	b.n	8003f34 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8003f22:	68bb      	ldr	r3, [r7, #8]
 8003f24:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f26:	4b06      	ldr	r3, [pc, #24]	; (8003f40 <xTaskPriorityInherit+0xe0>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f2c:	429a      	cmp	r2, r3
 8003f2e:	d201      	bcs.n	8003f34 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8003f30:	2301      	movs	r3, #1
 8003f32:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003f34:	68fb      	ldr	r3, [r7, #12]
	}
 8003f36:	4618      	mov	r0, r3
 8003f38:	3710      	adds	r7, #16
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bd80      	pop	{r7, pc}
 8003f3e:	bf00      	nop
 8003f40:	20000284 	.word	0x20000284
 8003f44:	20000288 	.word	0x20000288
 8003f48:	2000038c 	.word	0x2000038c

08003f4c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b086      	sub	sp, #24
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003f58:	2300      	movs	r3, #0
 8003f5a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d06e      	beq.n	8004040 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003f62:	4b3a      	ldr	r3, [pc, #232]	; (800404c <xTaskPriorityDisinherit+0x100>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	693a      	ldr	r2, [r7, #16]
 8003f68:	429a      	cmp	r2, r3
 8003f6a:	d00a      	beq.n	8003f82 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8003f6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f70:	f383 8811 	msr	BASEPRI, r3
 8003f74:	f3bf 8f6f 	isb	sy
 8003f78:	f3bf 8f4f 	dsb	sy
 8003f7c:	60fb      	str	r3, [r7, #12]
}
 8003f7e:	bf00      	nop
 8003f80:	e7fe      	b.n	8003f80 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003f82:	693b      	ldr	r3, [r7, #16]
 8003f84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d10a      	bne.n	8003fa0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8003f8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f8e:	f383 8811 	msr	BASEPRI, r3
 8003f92:	f3bf 8f6f 	isb	sy
 8003f96:	f3bf 8f4f 	dsb	sy
 8003f9a:	60bb      	str	r3, [r7, #8]
}
 8003f9c:	bf00      	nop
 8003f9e:	e7fe      	b.n	8003f9e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8003fa0:	693b      	ldr	r3, [r7, #16]
 8003fa2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fa4:	1e5a      	subs	r2, r3, #1
 8003fa6:	693b      	ldr	r3, [r7, #16]
 8003fa8:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003faa:	693b      	ldr	r3, [r7, #16]
 8003fac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fae:	693b      	ldr	r3, [r7, #16]
 8003fb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fb2:	429a      	cmp	r2, r3
 8003fb4:	d044      	beq.n	8004040 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003fb6:	693b      	ldr	r3, [r7, #16]
 8003fb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d140      	bne.n	8004040 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003fbe:	693b      	ldr	r3, [r7, #16]
 8003fc0:	3304      	adds	r3, #4
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	f7fe fcb5 	bl	8002932 <uxListRemove>
 8003fc8:	4603      	mov	r3, r0
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d115      	bne.n	8003ffa <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fd2:	491f      	ldr	r1, [pc, #124]	; (8004050 <xTaskPriorityDisinherit+0x104>)
 8003fd4:	4613      	mov	r3, r2
 8003fd6:	009b      	lsls	r3, r3, #2
 8003fd8:	4413      	add	r3, r2
 8003fda:	009b      	lsls	r3, r3, #2
 8003fdc:	440b      	add	r3, r1
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d10a      	bne.n	8003ffa <xTaskPriorityDisinherit+0xae>
 8003fe4:	693b      	ldr	r3, [r7, #16]
 8003fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fe8:	2201      	movs	r2, #1
 8003fea:	fa02 f303 	lsl.w	r3, r2, r3
 8003fee:	43da      	mvns	r2, r3
 8003ff0:	4b18      	ldr	r3, [pc, #96]	; (8004054 <xTaskPriorityDisinherit+0x108>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4013      	ands	r3, r2
 8003ff6:	4a17      	ldr	r2, [pc, #92]	; (8004054 <xTaskPriorityDisinherit+0x108>)
 8003ff8:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003ffa:	693b      	ldr	r3, [r7, #16]
 8003ffc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003ffe:	693b      	ldr	r3, [r7, #16]
 8004000:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004002:	693b      	ldr	r3, [r7, #16]
 8004004:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004006:	f1c3 0207 	rsb	r2, r3, #7
 800400a:	693b      	ldr	r3, [r7, #16]
 800400c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800400e:	693b      	ldr	r3, [r7, #16]
 8004010:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004012:	2201      	movs	r2, #1
 8004014:	409a      	lsls	r2, r3
 8004016:	4b0f      	ldr	r3, [pc, #60]	; (8004054 <xTaskPriorityDisinherit+0x108>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4313      	orrs	r3, r2
 800401c:	4a0d      	ldr	r2, [pc, #52]	; (8004054 <xTaskPriorityDisinherit+0x108>)
 800401e:	6013      	str	r3, [r2, #0]
 8004020:	693b      	ldr	r3, [r7, #16]
 8004022:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004024:	4613      	mov	r3, r2
 8004026:	009b      	lsls	r3, r3, #2
 8004028:	4413      	add	r3, r2
 800402a:	009b      	lsls	r3, r3, #2
 800402c:	4a08      	ldr	r2, [pc, #32]	; (8004050 <xTaskPriorityDisinherit+0x104>)
 800402e:	441a      	add	r2, r3
 8004030:	693b      	ldr	r3, [r7, #16]
 8004032:	3304      	adds	r3, #4
 8004034:	4619      	mov	r1, r3
 8004036:	4610      	mov	r0, r2
 8004038:	f7fe fc1e 	bl	8002878 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800403c:	2301      	movs	r3, #1
 800403e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004040:	697b      	ldr	r3, [r7, #20]
	}
 8004042:	4618      	mov	r0, r3
 8004044:	3718      	adds	r7, #24
 8004046:	46bd      	mov	sp, r7
 8004048:	bd80      	pop	{r7, pc}
 800404a:	bf00      	nop
 800404c:	20000284 	.word	0x20000284
 8004050:	20000288 	.word	0x20000288
 8004054:	2000038c 	.word	0x2000038c

08004058 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8004058:	b580      	push	{r7, lr}
 800405a:	b088      	sub	sp, #32
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
 8004060:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8004066:	2301      	movs	r3, #1
 8004068:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d077      	beq.n	8004160 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8004070:	69bb      	ldr	r3, [r7, #24]
 8004072:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004074:	2b00      	cmp	r3, #0
 8004076:	d10a      	bne.n	800408e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8004078:	f04f 0350 	mov.w	r3, #80	; 0x50
 800407c:	f383 8811 	msr	BASEPRI, r3
 8004080:	f3bf 8f6f 	isb	sy
 8004084:	f3bf 8f4f 	dsb	sy
 8004088:	60fb      	str	r3, [r7, #12]
}
 800408a:	bf00      	nop
 800408c:	e7fe      	b.n	800408c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800408e:	69bb      	ldr	r3, [r7, #24]
 8004090:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004092:	683a      	ldr	r2, [r7, #0]
 8004094:	429a      	cmp	r2, r3
 8004096:	d902      	bls.n	800409e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	61fb      	str	r3, [r7, #28]
 800409c:	e002      	b.n	80040a4 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800409e:	69bb      	ldr	r3, [r7, #24]
 80040a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040a2:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80040a4:	69bb      	ldr	r3, [r7, #24]
 80040a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040a8:	69fa      	ldr	r2, [r7, #28]
 80040aa:	429a      	cmp	r2, r3
 80040ac:	d058      	beq.n	8004160 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80040ae:	69bb      	ldr	r3, [r7, #24]
 80040b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040b2:	697a      	ldr	r2, [r7, #20]
 80040b4:	429a      	cmp	r2, r3
 80040b6:	d153      	bne.n	8004160 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80040b8:	4b2b      	ldr	r3, [pc, #172]	; (8004168 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	69ba      	ldr	r2, [r7, #24]
 80040be:	429a      	cmp	r2, r3
 80040c0:	d10a      	bne.n	80040d8 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80040c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040c6:	f383 8811 	msr	BASEPRI, r3
 80040ca:	f3bf 8f6f 	isb	sy
 80040ce:	f3bf 8f4f 	dsb	sy
 80040d2:	60bb      	str	r3, [r7, #8]
}
 80040d4:	bf00      	nop
 80040d6:	e7fe      	b.n	80040d6 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80040d8:	69bb      	ldr	r3, [r7, #24]
 80040da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040dc:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80040de:	69bb      	ldr	r3, [r7, #24]
 80040e0:	69fa      	ldr	r2, [r7, #28]
 80040e2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80040e4:	69bb      	ldr	r3, [r7, #24]
 80040e6:	699b      	ldr	r3, [r3, #24]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	db04      	blt.n	80040f6 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80040ec:	69fb      	ldr	r3, [r7, #28]
 80040ee:	f1c3 0207 	rsb	r2, r3, #7
 80040f2:	69bb      	ldr	r3, [r7, #24]
 80040f4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80040f6:	69bb      	ldr	r3, [r7, #24]
 80040f8:	6959      	ldr	r1, [r3, #20]
 80040fa:	693a      	ldr	r2, [r7, #16]
 80040fc:	4613      	mov	r3, r2
 80040fe:	009b      	lsls	r3, r3, #2
 8004100:	4413      	add	r3, r2
 8004102:	009b      	lsls	r3, r3, #2
 8004104:	4a19      	ldr	r2, [pc, #100]	; (800416c <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8004106:	4413      	add	r3, r2
 8004108:	4299      	cmp	r1, r3
 800410a:	d129      	bne.n	8004160 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800410c:	69bb      	ldr	r3, [r7, #24]
 800410e:	3304      	adds	r3, #4
 8004110:	4618      	mov	r0, r3
 8004112:	f7fe fc0e 	bl	8002932 <uxListRemove>
 8004116:	4603      	mov	r3, r0
 8004118:	2b00      	cmp	r3, #0
 800411a:	d10a      	bne.n	8004132 <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800411c:	69bb      	ldr	r3, [r7, #24]
 800411e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004120:	2201      	movs	r2, #1
 8004122:	fa02 f303 	lsl.w	r3, r2, r3
 8004126:	43da      	mvns	r2, r3
 8004128:	4b11      	ldr	r3, [pc, #68]	; (8004170 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4013      	ands	r3, r2
 800412e:	4a10      	ldr	r2, [pc, #64]	; (8004170 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8004130:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8004132:	69bb      	ldr	r3, [r7, #24]
 8004134:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004136:	2201      	movs	r2, #1
 8004138:	409a      	lsls	r2, r3
 800413a:	4b0d      	ldr	r3, [pc, #52]	; (8004170 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4313      	orrs	r3, r2
 8004140:	4a0b      	ldr	r2, [pc, #44]	; (8004170 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8004142:	6013      	str	r3, [r2, #0]
 8004144:	69bb      	ldr	r3, [r7, #24]
 8004146:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004148:	4613      	mov	r3, r2
 800414a:	009b      	lsls	r3, r3, #2
 800414c:	4413      	add	r3, r2
 800414e:	009b      	lsls	r3, r3, #2
 8004150:	4a06      	ldr	r2, [pc, #24]	; (800416c <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8004152:	441a      	add	r2, r3
 8004154:	69bb      	ldr	r3, [r7, #24]
 8004156:	3304      	adds	r3, #4
 8004158:	4619      	mov	r1, r3
 800415a:	4610      	mov	r0, r2
 800415c:	f7fe fb8c 	bl	8002878 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004160:	bf00      	nop
 8004162:	3720      	adds	r7, #32
 8004164:	46bd      	mov	sp, r7
 8004166:	bd80      	pop	{r7, pc}
 8004168:	20000284 	.word	0x20000284
 800416c:	20000288 	.word	0x20000288
 8004170:	2000038c 	.word	0x2000038c

08004174 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8004174:	b480      	push	{r7}
 8004176:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8004178:	4b07      	ldr	r3, [pc, #28]	; (8004198 <pvTaskIncrementMutexHeldCount+0x24>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d004      	beq.n	800418a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8004180:	4b05      	ldr	r3, [pc, #20]	; (8004198 <pvTaskIncrementMutexHeldCount+0x24>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004186:	3201      	adds	r2, #1
 8004188:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800418a:	4b03      	ldr	r3, [pc, #12]	; (8004198 <pvTaskIncrementMutexHeldCount+0x24>)
 800418c:	681b      	ldr	r3, [r3, #0]
	}
 800418e:	4618      	mov	r0, r3
 8004190:	46bd      	mov	sp, r7
 8004192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004196:	4770      	bx	lr
 8004198:	20000284 	.word	0x20000284

0800419c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b084      	sub	sp, #16
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
 80041a4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80041a6:	4b29      	ldr	r3, [pc, #164]	; (800424c <prvAddCurrentTaskToDelayedList+0xb0>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80041ac:	4b28      	ldr	r3, [pc, #160]	; (8004250 <prvAddCurrentTaskToDelayedList+0xb4>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	3304      	adds	r3, #4
 80041b2:	4618      	mov	r0, r3
 80041b4:	f7fe fbbd 	bl	8002932 <uxListRemove>
 80041b8:	4603      	mov	r3, r0
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d10b      	bne.n	80041d6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80041be:	4b24      	ldr	r3, [pc, #144]	; (8004250 <prvAddCurrentTaskToDelayedList+0xb4>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041c4:	2201      	movs	r2, #1
 80041c6:	fa02 f303 	lsl.w	r3, r2, r3
 80041ca:	43da      	mvns	r2, r3
 80041cc:	4b21      	ldr	r3, [pc, #132]	; (8004254 <prvAddCurrentTaskToDelayedList+0xb8>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4013      	ands	r3, r2
 80041d2:	4a20      	ldr	r2, [pc, #128]	; (8004254 <prvAddCurrentTaskToDelayedList+0xb8>)
 80041d4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041dc:	d10a      	bne.n	80041f4 <prvAddCurrentTaskToDelayedList+0x58>
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d007      	beq.n	80041f4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80041e4:	4b1a      	ldr	r3, [pc, #104]	; (8004250 <prvAddCurrentTaskToDelayedList+0xb4>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	3304      	adds	r3, #4
 80041ea:	4619      	mov	r1, r3
 80041ec:	481a      	ldr	r0, [pc, #104]	; (8004258 <prvAddCurrentTaskToDelayedList+0xbc>)
 80041ee:	f7fe fb43 	bl	8002878 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80041f2:	e026      	b.n	8004242 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80041f4:	68fa      	ldr	r2, [r7, #12]
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	4413      	add	r3, r2
 80041fa:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80041fc:	4b14      	ldr	r3, [pc, #80]	; (8004250 <prvAddCurrentTaskToDelayedList+0xb4>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	68ba      	ldr	r2, [r7, #8]
 8004202:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004204:	68ba      	ldr	r2, [r7, #8]
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	429a      	cmp	r2, r3
 800420a:	d209      	bcs.n	8004220 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800420c:	4b13      	ldr	r3, [pc, #76]	; (800425c <prvAddCurrentTaskToDelayedList+0xc0>)
 800420e:	681a      	ldr	r2, [r3, #0]
 8004210:	4b0f      	ldr	r3, [pc, #60]	; (8004250 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	3304      	adds	r3, #4
 8004216:	4619      	mov	r1, r3
 8004218:	4610      	mov	r0, r2
 800421a:	f7fe fb51 	bl	80028c0 <vListInsert>
}
 800421e:	e010      	b.n	8004242 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004220:	4b0f      	ldr	r3, [pc, #60]	; (8004260 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004222:	681a      	ldr	r2, [r3, #0]
 8004224:	4b0a      	ldr	r3, [pc, #40]	; (8004250 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	3304      	adds	r3, #4
 800422a:	4619      	mov	r1, r3
 800422c:	4610      	mov	r0, r2
 800422e:	f7fe fb47 	bl	80028c0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004232:	4b0c      	ldr	r3, [pc, #48]	; (8004264 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	68ba      	ldr	r2, [r7, #8]
 8004238:	429a      	cmp	r2, r3
 800423a:	d202      	bcs.n	8004242 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800423c:	4a09      	ldr	r2, [pc, #36]	; (8004264 <prvAddCurrentTaskToDelayedList+0xc8>)
 800423e:	68bb      	ldr	r3, [r7, #8]
 8004240:	6013      	str	r3, [r2, #0]
}
 8004242:	bf00      	nop
 8004244:	3710      	adds	r7, #16
 8004246:	46bd      	mov	sp, r7
 8004248:	bd80      	pop	{r7, pc}
 800424a:	bf00      	nop
 800424c:	20000388 	.word	0x20000388
 8004250:	20000284 	.word	0x20000284
 8004254:	2000038c 	.word	0x2000038c
 8004258:	20000370 	.word	0x20000370
 800425c:	20000340 	.word	0x20000340
 8004260:	2000033c 	.word	0x2000033c
 8004264:	200003a4 	.word	0x200003a4

08004268 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004268:	b480      	push	{r7}
 800426a:	b085      	sub	sp, #20
 800426c:	af00      	add	r7, sp, #0
 800426e:	60f8      	str	r0, [r7, #12]
 8004270:	60b9      	str	r1, [r7, #8]
 8004272:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	3b04      	subs	r3, #4
 8004278:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004280:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	3b04      	subs	r3, #4
 8004286:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004288:	68bb      	ldr	r3, [r7, #8]
 800428a:	f023 0201 	bic.w	r2, r3, #1
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	3b04      	subs	r3, #4
 8004296:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004298:	4a0c      	ldr	r2, [pc, #48]	; (80042cc <pxPortInitialiseStack+0x64>)
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	3b14      	subs	r3, #20
 80042a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80042a4:	687a      	ldr	r2, [r7, #4]
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	3b04      	subs	r3, #4
 80042ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	f06f 0202 	mvn.w	r2, #2
 80042b6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	3b20      	subs	r3, #32
 80042bc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80042be:	68fb      	ldr	r3, [r7, #12]
}
 80042c0:	4618      	mov	r0, r3
 80042c2:	3714      	adds	r7, #20
 80042c4:	46bd      	mov	sp, r7
 80042c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ca:	4770      	bx	lr
 80042cc:	080042d1 	.word	0x080042d1

080042d0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80042d0:	b480      	push	{r7}
 80042d2:	b085      	sub	sp, #20
 80042d4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80042d6:	2300      	movs	r3, #0
 80042d8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80042da:	4b12      	ldr	r3, [pc, #72]	; (8004324 <prvTaskExitError+0x54>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042e2:	d00a      	beq.n	80042fa <prvTaskExitError+0x2a>
	__asm volatile
 80042e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042e8:	f383 8811 	msr	BASEPRI, r3
 80042ec:	f3bf 8f6f 	isb	sy
 80042f0:	f3bf 8f4f 	dsb	sy
 80042f4:	60fb      	str	r3, [r7, #12]
}
 80042f6:	bf00      	nop
 80042f8:	e7fe      	b.n	80042f8 <prvTaskExitError+0x28>
	__asm volatile
 80042fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042fe:	f383 8811 	msr	BASEPRI, r3
 8004302:	f3bf 8f6f 	isb	sy
 8004306:	f3bf 8f4f 	dsb	sy
 800430a:	60bb      	str	r3, [r7, #8]
}
 800430c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800430e:	bf00      	nop
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d0fc      	beq.n	8004310 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004316:	bf00      	nop
 8004318:	bf00      	nop
 800431a:	3714      	adds	r7, #20
 800431c:	46bd      	mov	sp, r7
 800431e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004322:	4770      	bx	lr
 8004324:	2000000c 	.word	0x2000000c
	...

08004330 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004330:	4b07      	ldr	r3, [pc, #28]	; (8004350 <pxCurrentTCBConst2>)
 8004332:	6819      	ldr	r1, [r3, #0]
 8004334:	6808      	ldr	r0, [r1, #0]
 8004336:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800433a:	f380 8809 	msr	PSP, r0
 800433e:	f3bf 8f6f 	isb	sy
 8004342:	f04f 0000 	mov.w	r0, #0
 8004346:	f380 8811 	msr	BASEPRI, r0
 800434a:	4770      	bx	lr
 800434c:	f3af 8000 	nop.w

08004350 <pxCurrentTCBConst2>:
 8004350:	20000284 	.word	0x20000284
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004354:	bf00      	nop
 8004356:	bf00      	nop

08004358 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004358:	4808      	ldr	r0, [pc, #32]	; (800437c <prvPortStartFirstTask+0x24>)
 800435a:	6800      	ldr	r0, [r0, #0]
 800435c:	6800      	ldr	r0, [r0, #0]
 800435e:	f380 8808 	msr	MSP, r0
 8004362:	f04f 0000 	mov.w	r0, #0
 8004366:	f380 8814 	msr	CONTROL, r0
 800436a:	b662      	cpsie	i
 800436c:	b661      	cpsie	f
 800436e:	f3bf 8f4f 	dsb	sy
 8004372:	f3bf 8f6f 	isb	sy
 8004376:	df00      	svc	0
 8004378:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800437a:	bf00      	nop
 800437c:	e000ed08 	.word	0xe000ed08

08004380 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b086      	sub	sp, #24
 8004384:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004386:	4b46      	ldr	r3, [pc, #280]	; (80044a0 <xPortStartScheduler+0x120>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4a46      	ldr	r2, [pc, #280]	; (80044a4 <xPortStartScheduler+0x124>)
 800438c:	4293      	cmp	r3, r2
 800438e:	d10a      	bne.n	80043a6 <xPortStartScheduler+0x26>
	__asm volatile
 8004390:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004394:	f383 8811 	msr	BASEPRI, r3
 8004398:	f3bf 8f6f 	isb	sy
 800439c:	f3bf 8f4f 	dsb	sy
 80043a0:	613b      	str	r3, [r7, #16]
}
 80043a2:	bf00      	nop
 80043a4:	e7fe      	b.n	80043a4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80043a6:	4b3e      	ldr	r3, [pc, #248]	; (80044a0 <xPortStartScheduler+0x120>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4a3f      	ldr	r2, [pc, #252]	; (80044a8 <xPortStartScheduler+0x128>)
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d10a      	bne.n	80043c6 <xPortStartScheduler+0x46>
	__asm volatile
 80043b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043b4:	f383 8811 	msr	BASEPRI, r3
 80043b8:	f3bf 8f6f 	isb	sy
 80043bc:	f3bf 8f4f 	dsb	sy
 80043c0:	60fb      	str	r3, [r7, #12]
}
 80043c2:	bf00      	nop
 80043c4:	e7fe      	b.n	80043c4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80043c6:	4b39      	ldr	r3, [pc, #228]	; (80044ac <xPortStartScheduler+0x12c>)
 80043c8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80043ca:	697b      	ldr	r3, [r7, #20]
 80043cc:	781b      	ldrb	r3, [r3, #0]
 80043ce:	b2db      	uxtb	r3, r3
 80043d0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80043d2:	697b      	ldr	r3, [r7, #20]
 80043d4:	22ff      	movs	r2, #255	; 0xff
 80043d6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80043d8:	697b      	ldr	r3, [r7, #20]
 80043da:	781b      	ldrb	r3, [r3, #0]
 80043dc:	b2db      	uxtb	r3, r3
 80043de:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80043e0:	78fb      	ldrb	r3, [r7, #3]
 80043e2:	b2db      	uxtb	r3, r3
 80043e4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80043e8:	b2da      	uxtb	r2, r3
 80043ea:	4b31      	ldr	r3, [pc, #196]	; (80044b0 <xPortStartScheduler+0x130>)
 80043ec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80043ee:	4b31      	ldr	r3, [pc, #196]	; (80044b4 <xPortStartScheduler+0x134>)
 80043f0:	2207      	movs	r2, #7
 80043f2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80043f4:	e009      	b.n	800440a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80043f6:	4b2f      	ldr	r3, [pc, #188]	; (80044b4 <xPortStartScheduler+0x134>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	3b01      	subs	r3, #1
 80043fc:	4a2d      	ldr	r2, [pc, #180]	; (80044b4 <xPortStartScheduler+0x134>)
 80043fe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004400:	78fb      	ldrb	r3, [r7, #3]
 8004402:	b2db      	uxtb	r3, r3
 8004404:	005b      	lsls	r3, r3, #1
 8004406:	b2db      	uxtb	r3, r3
 8004408:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800440a:	78fb      	ldrb	r3, [r7, #3]
 800440c:	b2db      	uxtb	r3, r3
 800440e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004412:	2b80      	cmp	r3, #128	; 0x80
 8004414:	d0ef      	beq.n	80043f6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004416:	4b27      	ldr	r3, [pc, #156]	; (80044b4 <xPortStartScheduler+0x134>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f1c3 0307 	rsb	r3, r3, #7
 800441e:	2b04      	cmp	r3, #4
 8004420:	d00a      	beq.n	8004438 <xPortStartScheduler+0xb8>
	__asm volatile
 8004422:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004426:	f383 8811 	msr	BASEPRI, r3
 800442a:	f3bf 8f6f 	isb	sy
 800442e:	f3bf 8f4f 	dsb	sy
 8004432:	60bb      	str	r3, [r7, #8]
}
 8004434:	bf00      	nop
 8004436:	e7fe      	b.n	8004436 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004438:	4b1e      	ldr	r3, [pc, #120]	; (80044b4 <xPortStartScheduler+0x134>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	021b      	lsls	r3, r3, #8
 800443e:	4a1d      	ldr	r2, [pc, #116]	; (80044b4 <xPortStartScheduler+0x134>)
 8004440:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004442:	4b1c      	ldr	r3, [pc, #112]	; (80044b4 <xPortStartScheduler+0x134>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800444a:	4a1a      	ldr	r2, [pc, #104]	; (80044b4 <xPortStartScheduler+0x134>)
 800444c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	b2da      	uxtb	r2, r3
 8004452:	697b      	ldr	r3, [r7, #20]
 8004454:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004456:	4b18      	ldr	r3, [pc, #96]	; (80044b8 <xPortStartScheduler+0x138>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4a17      	ldr	r2, [pc, #92]	; (80044b8 <xPortStartScheduler+0x138>)
 800445c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004460:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004462:	4b15      	ldr	r3, [pc, #84]	; (80044b8 <xPortStartScheduler+0x138>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4a14      	ldr	r2, [pc, #80]	; (80044b8 <xPortStartScheduler+0x138>)
 8004468:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800446c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800446e:	f000 f8dd 	bl	800462c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004472:	4b12      	ldr	r3, [pc, #72]	; (80044bc <xPortStartScheduler+0x13c>)
 8004474:	2200      	movs	r2, #0
 8004476:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004478:	f000 f8fc 	bl	8004674 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800447c:	4b10      	ldr	r3, [pc, #64]	; (80044c0 <xPortStartScheduler+0x140>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4a0f      	ldr	r2, [pc, #60]	; (80044c0 <xPortStartScheduler+0x140>)
 8004482:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004486:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004488:	f7ff ff66 	bl	8004358 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800448c:	f7ff fa7e 	bl	800398c <vTaskSwitchContext>
	prvTaskExitError();
 8004490:	f7ff ff1e 	bl	80042d0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004494:	2300      	movs	r3, #0
}
 8004496:	4618      	mov	r0, r3
 8004498:	3718      	adds	r7, #24
 800449a:	46bd      	mov	sp, r7
 800449c:	bd80      	pop	{r7, pc}
 800449e:	bf00      	nop
 80044a0:	e000ed00 	.word	0xe000ed00
 80044a4:	410fc271 	.word	0x410fc271
 80044a8:	410fc270 	.word	0x410fc270
 80044ac:	e000e400 	.word	0xe000e400
 80044b0:	200003b0 	.word	0x200003b0
 80044b4:	200003b4 	.word	0x200003b4
 80044b8:	e000ed20 	.word	0xe000ed20
 80044bc:	2000000c 	.word	0x2000000c
 80044c0:	e000ef34 	.word	0xe000ef34

080044c4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80044c4:	b480      	push	{r7}
 80044c6:	b083      	sub	sp, #12
 80044c8:	af00      	add	r7, sp, #0
	__asm volatile
 80044ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044ce:	f383 8811 	msr	BASEPRI, r3
 80044d2:	f3bf 8f6f 	isb	sy
 80044d6:	f3bf 8f4f 	dsb	sy
 80044da:	607b      	str	r3, [r7, #4]
}
 80044dc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80044de:	4b0f      	ldr	r3, [pc, #60]	; (800451c <vPortEnterCritical+0x58>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	3301      	adds	r3, #1
 80044e4:	4a0d      	ldr	r2, [pc, #52]	; (800451c <vPortEnterCritical+0x58>)
 80044e6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80044e8:	4b0c      	ldr	r3, [pc, #48]	; (800451c <vPortEnterCritical+0x58>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	2b01      	cmp	r3, #1
 80044ee:	d10f      	bne.n	8004510 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80044f0:	4b0b      	ldr	r3, [pc, #44]	; (8004520 <vPortEnterCritical+0x5c>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	b2db      	uxtb	r3, r3
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d00a      	beq.n	8004510 <vPortEnterCritical+0x4c>
	__asm volatile
 80044fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044fe:	f383 8811 	msr	BASEPRI, r3
 8004502:	f3bf 8f6f 	isb	sy
 8004506:	f3bf 8f4f 	dsb	sy
 800450a:	603b      	str	r3, [r7, #0]
}
 800450c:	bf00      	nop
 800450e:	e7fe      	b.n	800450e <vPortEnterCritical+0x4a>
	}
}
 8004510:	bf00      	nop
 8004512:	370c      	adds	r7, #12
 8004514:	46bd      	mov	sp, r7
 8004516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451a:	4770      	bx	lr
 800451c:	2000000c 	.word	0x2000000c
 8004520:	e000ed04 	.word	0xe000ed04

08004524 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004524:	b480      	push	{r7}
 8004526:	b083      	sub	sp, #12
 8004528:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800452a:	4b12      	ldr	r3, [pc, #72]	; (8004574 <vPortExitCritical+0x50>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d10a      	bne.n	8004548 <vPortExitCritical+0x24>
	__asm volatile
 8004532:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004536:	f383 8811 	msr	BASEPRI, r3
 800453a:	f3bf 8f6f 	isb	sy
 800453e:	f3bf 8f4f 	dsb	sy
 8004542:	607b      	str	r3, [r7, #4]
}
 8004544:	bf00      	nop
 8004546:	e7fe      	b.n	8004546 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004548:	4b0a      	ldr	r3, [pc, #40]	; (8004574 <vPortExitCritical+0x50>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	3b01      	subs	r3, #1
 800454e:	4a09      	ldr	r2, [pc, #36]	; (8004574 <vPortExitCritical+0x50>)
 8004550:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004552:	4b08      	ldr	r3, [pc, #32]	; (8004574 <vPortExitCritical+0x50>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d105      	bne.n	8004566 <vPortExitCritical+0x42>
 800455a:	2300      	movs	r3, #0
 800455c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004564:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004566:	bf00      	nop
 8004568:	370c      	adds	r7, #12
 800456a:	46bd      	mov	sp, r7
 800456c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004570:	4770      	bx	lr
 8004572:	bf00      	nop
 8004574:	2000000c 	.word	0x2000000c
	...

08004580 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004580:	f3ef 8009 	mrs	r0, PSP
 8004584:	f3bf 8f6f 	isb	sy
 8004588:	4b15      	ldr	r3, [pc, #84]	; (80045e0 <pxCurrentTCBConst>)
 800458a:	681a      	ldr	r2, [r3, #0]
 800458c:	f01e 0f10 	tst.w	lr, #16
 8004590:	bf08      	it	eq
 8004592:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004596:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800459a:	6010      	str	r0, [r2, #0]
 800459c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80045a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80045a4:	f380 8811 	msr	BASEPRI, r0
 80045a8:	f3bf 8f4f 	dsb	sy
 80045ac:	f3bf 8f6f 	isb	sy
 80045b0:	f7ff f9ec 	bl	800398c <vTaskSwitchContext>
 80045b4:	f04f 0000 	mov.w	r0, #0
 80045b8:	f380 8811 	msr	BASEPRI, r0
 80045bc:	bc09      	pop	{r0, r3}
 80045be:	6819      	ldr	r1, [r3, #0]
 80045c0:	6808      	ldr	r0, [r1, #0]
 80045c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045c6:	f01e 0f10 	tst.w	lr, #16
 80045ca:	bf08      	it	eq
 80045cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80045d0:	f380 8809 	msr	PSP, r0
 80045d4:	f3bf 8f6f 	isb	sy
 80045d8:	4770      	bx	lr
 80045da:	bf00      	nop
 80045dc:	f3af 8000 	nop.w

080045e0 <pxCurrentTCBConst>:
 80045e0:	20000284 	.word	0x20000284
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80045e4:	bf00      	nop
 80045e6:	bf00      	nop

080045e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b082      	sub	sp, #8
 80045ec:	af00      	add	r7, sp, #0
	__asm volatile
 80045ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045f2:	f383 8811 	msr	BASEPRI, r3
 80045f6:	f3bf 8f6f 	isb	sy
 80045fa:	f3bf 8f4f 	dsb	sy
 80045fe:	607b      	str	r3, [r7, #4]
}
 8004600:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004602:	f7ff f90b 	bl	800381c <xTaskIncrementTick>
 8004606:	4603      	mov	r3, r0
 8004608:	2b00      	cmp	r3, #0
 800460a:	d003      	beq.n	8004614 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800460c:	4b06      	ldr	r3, [pc, #24]	; (8004628 <SysTick_Handler+0x40>)
 800460e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004612:	601a      	str	r2, [r3, #0]
 8004614:	2300      	movs	r3, #0
 8004616:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	f383 8811 	msr	BASEPRI, r3
}
 800461e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004620:	bf00      	nop
 8004622:	3708      	adds	r7, #8
 8004624:	46bd      	mov	sp, r7
 8004626:	bd80      	pop	{r7, pc}
 8004628:	e000ed04 	.word	0xe000ed04

0800462c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800462c:	b480      	push	{r7}
 800462e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004630:	4b0b      	ldr	r3, [pc, #44]	; (8004660 <vPortSetupTimerInterrupt+0x34>)
 8004632:	2200      	movs	r2, #0
 8004634:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004636:	4b0b      	ldr	r3, [pc, #44]	; (8004664 <vPortSetupTimerInterrupt+0x38>)
 8004638:	2200      	movs	r2, #0
 800463a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800463c:	4b0a      	ldr	r3, [pc, #40]	; (8004668 <vPortSetupTimerInterrupt+0x3c>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4a0a      	ldr	r2, [pc, #40]	; (800466c <vPortSetupTimerInterrupt+0x40>)
 8004642:	fba2 2303 	umull	r2, r3, r2, r3
 8004646:	099b      	lsrs	r3, r3, #6
 8004648:	4a09      	ldr	r2, [pc, #36]	; (8004670 <vPortSetupTimerInterrupt+0x44>)
 800464a:	3b01      	subs	r3, #1
 800464c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800464e:	4b04      	ldr	r3, [pc, #16]	; (8004660 <vPortSetupTimerInterrupt+0x34>)
 8004650:	2207      	movs	r2, #7
 8004652:	601a      	str	r2, [r3, #0]
}
 8004654:	bf00      	nop
 8004656:	46bd      	mov	sp, r7
 8004658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465c:	4770      	bx	lr
 800465e:	bf00      	nop
 8004660:	e000e010 	.word	0xe000e010
 8004664:	e000e018 	.word	0xe000e018
 8004668:	20000000 	.word	0x20000000
 800466c:	10624dd3 	.word	0x10624dd3
 8004670:	e000e014 	.word	0xe000e014

08004674 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004674:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004684 <vPortEnableVFP+0x10>
 8004678:	6801      	ldr	r1, [r0, #0]
 800467a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800467e:	6001      	str	r1, [r0, #0]
 8004680:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004682:	bf00      	nop
 8004684:	e000ed88 	.word	0xe000ed88

08004688 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b08a      	sub	sp, #40	; 0x28
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004690:	2300      	movs	r3, #0
 8004692:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004694:	f7ff f818 	bl	80036c8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004698:	4b5b      	ldr	r3, [pc, #364]	; (8004808 <pvPortMalloc+0x180>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d101      	bne.n	80046a4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80046a0:	f000 f920 	bl	80048e4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80046a4:	4b59      	ldr	r3, [pc, #356]	; (800480c <pvPortMalloc+0x184>)
 80046a6:	681a      	ldr	r2, [r3, #0]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	4013      	ands	r3, r2
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	f040 8093 	bne.w	80047d8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d01d      	beq.n	80046f4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80046b8:	2208      	movs	r2, #8
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	4413      	add	r3, r2
 80046be:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	f003 0307 	and.w	r3, r3, #7
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d014      	beq.n	80046f4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	f023 0307 	bic.w	r3, r3, #7
 80046d0:	3308      	adds	r3, #8
 80046d2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	f003 0307 	and.w	r3, r3, #7
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d00a      	beq.n	80046f4 <pvPortMalloc+0x6c>
	__asm volatile
 80046de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046e2:	f383 8811 	msr	BASEPRI, r3
 80046e6:	f3bf 8f6f 	isb	sy
 80046ea:	f3bf 8f4f 	dsb	sy
 80046ee:	617b      	str	r3, [r7, #20]
}
 80046f0:	bf00      	nop
 80046f2:	e7fe      	b.n	80046f2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d06e      	beq.n	80047d8 <pvPortMalloc+0x150>
 80046fa:	4b45      	ldr	r3, [pc, #276]	; (8004810 <pvPortMalloc+0x188>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	687a      	ldr	r2, [r7, #4]
 8004700:	429a      	cmp	r2, r3
 8004702:	d869      	bhi.n	80047d8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004704:	4b43      	ldr	r3, [pc, #268]	; (8004814 <pvPortMalloc+0x18c>)
 8004706:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004708:	4b42      	ldr	r3, [pc, #264]	; (8004814 <pvPortMalloc+0x18c>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800470e:	e004      	b.n	800471a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004712:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800471a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800471c:	685b      	ldr	r3, [r3, #4]
 800471e:	687a      	ldr	r2, [r7, #4]
 8004720:	429a      	cmp	r2, r3
 8004722:	d903      	bls.n	800472c <pvPortMalloc+0xa4>
 8004724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d1f1      	bne.n	8004710 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800472c:	4b36      	ldr	r3, [pc, #216]	; (8004808 <pvPortMalloc+0x180>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004732:	429a      	cmp	r2, r3
 8004734:	d050      	beq.n	80047d8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004736:	6a3b      	ldr	r3, [r7, #32]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	2208      	movs	r2, #8
 800473c:	4413      	add	r3, r2
 800473e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004742:	681a      	ldr	r2, [r3, #0]
 8004744:	6a3b      	ldr	r3, [r7, #32]
 8004746:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800474a:	685a      	ldr	r2, [r3, #4]
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	1ad2      	subs	r2, r2, r3
 8004750:	2308      	movs	r3, #8
 8004752:	005b      	lsls	r3, r3, #1
 8004754:	429a      	cmp	r2, r3
 8004756:	d91f      	bls.n	8004798 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004758:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	4413      	add	r3, r2
 800475e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004760:	69bb      	ldr	r3, [r7, #24]
 8004762:	f003 0307 	and.w	r3, r3, #7
 8004766:	2b00      	cmp	r3, #0
 8004768:	d00a      	beq.n	8004780 <pvPortMalloc+0xf8>
	__asm volatile
 800476a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800476e:	f383 8811 	msr	BASEPRI, r3
 8004772:	f3bf 8f6f 	isb	sy
 8004776:	f3bf 8f4f 	dsb	sy
 800477a:	613b      	str	r3, [r7, #16]
}
 800477c:	bf00      	nop
 800477e:	e7fe      	b.n	800477e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004782:	685a      	ldr	r2, [r3, #4]
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	1ad2      	subs	r2, r2, r3
 8004788:	69bb      	ldr	r3, [r7, #24]
 800478a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800478c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800478e:	687a      	ldr	r2, [r7, #4]
 8004790:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004792:	69b8      	ldr	r0, [r7, #24]
 8004794:	f000 f908 	bl	80049a8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004798:	4b1d      	ldr	r3, [pc, #116]	; (8004810 <pvPortMalloc+0x188>)
 800479a:	681a      	ldr	r2, [r3, #0]
 800479c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	1ad3      	subs	r3, r2, r3
 80047a2:	4a1b      	ldr	r2, [pc, #108]	; (8004810 <pvPortMalloc+0x188>)
 80047a4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80047a6:	4b1a      	ldr	r3, [pc, #104]	; (8004810 <pvPortMalloc+0x188>)
 80047a8:	681a      	ldr	r2, [r3, #0]
 80047aa:	4b1b      	ldr	r3, [pc, #108]	; (8004818 <pvPortMalloc+0x190>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	429a      	cmp	r2, r3
 80047b0:	d203      	bcs.n	80047ba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80047b2:	4b17      	ldr	r3, [pc, #92]	; (8004810 <pvPortMalloc+0x188>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4a18      	ldr	r2, [pc, #96]	; (8004818 <pvPortMalloc+0x190>)
 80047b8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80047ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047bc:	685a      	ldr	r2, [r3, #4]
 80047be:	4b13      	ldr	r3, [pc, #76]	; (800480c <pvPortMalloc+0x184>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	431a      	orrs	r2, r3
 80047c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047c6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80047c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ca:	2200      	movs	r2, #0
 80047cc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80047ce:	4b13      	ldr	r3, [pc, #76]	; (800481c <pvPortMalloc+0x194>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	3301      	adds	r3, #1
 80047d4:	4a11      	ldr	r2, [pc, #68]	; (800481c <pvPortMalloc+0x194>)
 80047d6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80047d8:	f7fe ff84 	bl	80036e4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80047dc:	69fb      	ldr	r3, [r7, #28]
 80047de:	f003 0307 	and.w	r3, r3, #7
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d00a      	beq.n	80047fc <pvPortMalloc+0x174>
	__asm volatile
 80047e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047ea:	f383 8811 	msr	BASEPRI, r3
 80047ee:	f3bf 8f6f 	isb	sy
 80047f2:	f3bf 8f4f 	dsb	sy
 80047f6:	60fb      	str	r3, [r7, #12]
}
 80047f8:	bf00      	nop
 80047fa:	e7fe      	b.n	80047fa <pvPortMalloc+0x172>
	return pvReturn;
 80047fc:	69fb      	ldr	r3, [r7, #28]
}
 80047fe:	4618      	mov	r0, r3
 8004800:	3728      	adds	r7, #40	; 0x28
 8004802:	46bd      	mov	sp, r7
 8004804:	bd80      	pop	{r7, pc}
 8004806:	bf00      	nop
 8004808:	20003fc0 	.word	0x20003fc0
 800480c:	20003fd4 	.word	0x20003fd4
 8004810:	20003fc4 	.word	0x20003fc4
 8004814:	20003fb8 	.word	0x20003fb8
 8004818:	20003fc8 	.word	0x20003fc8
 800481c:	20003fcc 	.word	0x20003fcc

08004820 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b086      	sub	sp, #24
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d04d      	beq.n	80048ce <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004832:	2308      	movs	r3, #8
 8004834:	425b      	negs	r3, r3
 8004836:	697a      	ldr	r2, [r7, #20]
 8004838:	4413      	add	r3, r2
 800483a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800483c:	697b      	ldr	r3, [r7, #20]
 800483e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004840:	693b      	ldr	r3, [r7, #16]
 8004842:	685a      	ldr	r2, [r3, #4]
 8004844:	4b24      	ldr	r3, [pc, #144]	; (80048d8 <vPortFree+0xb8>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4013      	ands	r3, r2
 800484a:	2b00      	cmp	r3, #0
 800484c:	d10a      	bne.n	8004864 <vPortFree+0x44>
	__asm volatile
 800484e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004852:	f383 8811 	msr	BASEPRI, r3
 8004856:	f3bf 8f6f 	isb	sy
 800485a:	f3bf 8f4f 	dsb	sy
 800485e:	60fb      	str	r3, [r7, #12]
}
 8004860:	bf00      	nop
 8004862:	e7fe      	b.n	8004862 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004864:	693b      	ldr	r3, [r7, #16]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d00a      	beq.n	8004882 <vPortFree+0x62>
	__asm volatile
 800486c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004870:	f383 8811 	msr	BASEPRI, r3
 8004874:	f3bf 8f6f 	isb	sy
 8004878:	f3bf 8f4f 	dsb	sy
 800487c:	60bb      	str	r3, [r7, #8]
}
 800487e:	bf00      	nop
 8004880:	e7fe      	b.n	8004880 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004882:	693b      	ldr	r3, [r7, #16]
 8004884:	685a      	ldr	r2, [r3, #4]
 8004886:	4b14      	ldr	r3, [pc, #80]	; (80048d8 <vPortFree+0xb8>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	4013      	ands	r3, r2
 800488c:	2b00      	cmp	r3, #0
 800488e:	d01e      	beq.n	80048ce <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004890:	693b      	ldr	r3, [r7, #16]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d11a      	bne.n	80048ce <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004898:	693b      	ldr	r3, [r7, #16]
 800489a:	685a      	ldr	r2, [r3, #4]
 800489c:	4b0e      	ldr	r3, [pc, #56]	; (80048d8 <vPortFree+0xb8>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	43db      	mvns	r3, r3
 80048a2:	401a      	ands	r2, r3
 80048a4:	693b      	ldr	r3, [r7, #16]
 80048a6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80048a8:	f7fe ff0e 	bl	80036c8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80048ac:	693b      	ldr	r3, [r7, #16]
 80048ae:	685a      	ldr	r2, [r3, #4]
 80048b0:	4b0a      	ldr	r3, [pc, #40]	; (80048dc <vPortFree+0xbc>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4413      	add	r3, r2
 80048b6:	4a09      	ldr	r2, [pc, #36]	; (80048dc <vPortFree+0xbc>)
 80048b8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80048ba:	6938      	ldr	r0, [r7, #16]
 80048bc:	f000 f874 	bl	80049a8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80048c0:	4b07      	ldr	r3, [pc, #28]	; (80048e0 <vPortFree+0xc0>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	3301      	adds	r3, #1
 80048c6:	4a06      	ldr	r2, [pc, #24]	; (80048e0 <vPortFree+0xc0>)
 80048c8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80048ca:	f7fe ff0b 	bl	80036e4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80048ce:	bf00      	nop
 80048d0:	3718      	adds	r7, #24
 80048d2:	46bd      	mov	sp, r7
 80048d4:	bd80      	pop	{r7, pc}
 80048d6:	bf00      	nop
 80048d8:	20003fd4 	.word	0x20003fd4
 80048dc:	20003fc4 	.word	0x20003fc4
 80048e0:	20003fd0 	.word	0x20003fd0

080048e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80048e4:	b480      	push	{r7}
 80048e6:	b085      	sub	sp, #20
 80048e8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80048ea:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80048ee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80048f0:	4b27      	ldr	r3, [pc, #156]	; (8004990 <prvHeapInit+0xac>)
 80048f2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	f003 0307 	and.w	r3, r3, #7
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d00c      	beq.n	8004918 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	3307      	adds	r3, #7
 8004902:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	f023 0307 	bic.w	r3, r3, #7
 800490a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800490c:	68ba      	ldr	r2, [r7, #8]
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	1ad3      	subs	r3, r2, r3
 8004912:	4a1f      	ldr	r2, [pc, #124]	; (8004990 <prvHeapInit+0xac>)
 8004914:	4413      	add	r3, r2
 8004916:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800491c:	4a1d      	ldr	r2, [pc, #116]	; (8004994 <prvHeapInit+0xb0>)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004922:	4b1c      	ldr	r3, [pc, #112]	; (8004994 <prvHeapInit+0xb0>)
 8004924:	2200      	movs	r2, #0
 8004926:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	68ba      	ldr	r2, [r7, #8]
 800492c:	4413      	add	r3, r2
 800492e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004930:	2208      	movs	r2, #8
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	1a9b      	subs	r3, r3, r2
 8004936:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	f023 0307 	bic.w	r3, r3, #7
 800493e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	4a15      	ldr	r2, [pc, #84]	; (8004998 <prvHeapInit+0xb4>)
 8004944:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004946:	4b14      	ldr	r3, [pc, #80]	; (8004998 <prvHeapInit+0xb4>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	2200      	movs	r2, #0
 800494c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800494e:	4b12      	ldr	r3, [pc, #72]	; (8004998 <prvHeapInit+0xb4>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	2200      	movs	r2, #0
 8004954:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	68fa      	ldr	r2, [r7, #12]
 800495e:	1ad2      	subs	r2, r2, r3
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004964:	4b0c      	ldr	r3, [pc, #48]	; (8004998 <prvHeapInit+0xb4>)
 8004966:	681a      	ldr	r2, [r3, #0]
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	685b      	ldr	r3, [r3, #4]
 8004970:	4a0a      	ldr	r2, [pc, #40]	; (800499c <prvHeapInit+0xb8>)
 8004972:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	685b      	ldr	r3, [r3, #4]
 8004978:	4a09      	ldr	r2, [pc, #36]	; (80049a0 <prvHeapInit+0xbc>)
 800497a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800497c:	4b09      	ldr	r3, [pc, #36]	; (80049a4 <prvHeapInit+0xc0>)
 800497e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004982:	601a      	str	r2, [r3, #0]
}
 8004984:	bf00      	nop
 8004986:	3714      	adds	r7, #20
 8004988:	46bd      	mov	sp, r7
 800498a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498e:	4770      	bx	lr
 8004990:	200003b8 	.word	0x200003b8
 8004994:	20003fb8 	.word	0x20003fb8
 8004998:	20003fc0 	.word	0x20003fc0
 800499c:	20003fc8 	.word	0x20003fc8
 80049a0:	20003fc4 	.word	0x20003fc4
 80049a4:	20003fd4 	.word	0x20003fd4

080049a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80049a8:	b480      	push	{r7}
 80049aa:	b085      	sub	sp, #20
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80049b0:	4b28      	ldr	r3, [pc, #160]	; (8004a54 <prvInsertBlockIntoFreeList+0xac>)
 80049b2:	60fb      	str	r3, [r7, #12]
 80049b4:	e002      	b.n	80049bc <prvInsertBlockIntoFreeList+0x14>
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	60fb      	str	r3, [r7, #12]
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	687a      	ldr	r2, [r7, #4]
 80049c2:	429a      	cmp	r2, r3
 80049c4:	d8f7      	bhi.n	80049b6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	68ba      	ldr	r2, [r7, #8]
 80049d0:	4413      	add	r3, r2
 80049d2:	687a      	ldr	r2, [r7, #4]
 80049d4:	429a      	cmp	r2, r3
 80049d6:	d108      	bne.n	80049ea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	685a      	ldr	r2, [r3, #4]
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	685b      	ldr	r3, [r3, #4]
 80049e0:	441a      	add	r2, r3
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	685b      	ldr	r3, [r3, #4]
 80049f2:	68ba      	ldr	r2, [r7, #8]
 80049f4:	441a      	add	r2, r3
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	429a      	cmp	r2, r3
 80049fc:	d118      	bne.n	8004a30 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681a      	ldr	r2, [r3, #0]
 8004a02:	4b15      	ldr	r3, [pc, #84]	; (8004a58 <prvInsertBlockIntoFreeList+0xb0>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	429a      	cmp	r2, r3
 8004a08:	d00d      	beq.n	8004a26 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	685a      	ldr	r2, [r3, #4]
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	685b      	ldr	r3, [r3, #4]
 8004a14:	441a      	add	r2, r3
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	681a      	ldr	r2, [r3, #0]
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	601a      	str	r2, [r3, #0]
 8004a24:	e008      	b.n	8004a38 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004a26:	4b0c      	ldr	r3, [pc, #48]	; (8004a58 <prvInsertBlockIntoFreeList+0xb0>)
 8004a28:	681a      	ldr	r2, [r3, #0]
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	601a      	str	r2, [r3, #0]
 8004a2e:	e003      	b.n	8004a38 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681a      	ldr	r2, [r3, #0]
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004a38:	68fa      	ldr	r2, [r7, #12]
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	429a      	cmp	r2, r3
 8004a3e:	d002      	beq.n	8004a46 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	687a      	ldr	r2, [r7, #4]
 8004a44:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004a46:	bf00      	nop
 8004a48:	3714      	adds	r7, #20
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a50:	4770      	bx	lr
 8004a52:	bf00      	nop
 8004a54:	20003fb8 	.word	0x20003fb8
 8004a58:	20003fc0 	.word	0x20003fc0

08004a5c <__libc_init_array>:
 8004a5c:	b570      	push	{r4, r5, r6, lr}
 8004a5e:	4d0d      	ldr	r5, [pc, #52]	; (8004a94 <__libc_init_array+0x38>)
 8004a60:	4c0d      	ldr	r4, [pc, #52]	; (8004a98 <__libc_init_array+0x3c>)
 8004a62:	1b64      	subs	r4, r4, r5
 8004a64:	10a4      	asrs	r4, r4, #2
 8004a66:	2600      	movs	r6, #0
 8004a68:	42a6      	cmp	r6, r4
 8004a6a:	d109      	bne.n	8004a80 <__libc_init_array+0x24>
 8004a6c:	4d0b      	ldr	r5, [pc, #44]	; (8004a9c <__libc_init_array+0x40>)
 8004a6e:	4c0c      	ldr	r4, [pc, #48]	; (8004aa0 <__libc_init_array+0x44>)
 8004a70:	f000 f82e 	bl	8004ad0 <_init>
 8004a74:	1b64      	subs	r4, r4, r5
 8004a76:	10a4      	asrs	r4, r4, #2
 8004a78:	2600      	movs	r6, #0
 8004a7a:	42a6      	cmp	r6, r4
 8004a7c:	d105      	bne.n	8004a8a <__libc_init_array+0x2e>
 8004a7e:	bd70      	pop	{r4, r5, r6, pc}
 8004a80:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a84:	4798      	blx	r3
 8004a86:	3601      	adds	r6, #1
 8004a88:	e7ee      	b.n	8004a68 <__libc_init_array+0xc>
 8004a8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a8e:	4798      	blx	r3
 8004a90:	3601      	adds	r6, #1
 8004a92:	e7f2      	b.n	8004a7a <__libc_init_array+0x1e>
 8004a94:	08004c10 	.word	0x08004c10
 8004a98:	08004c10 	.word	0x08004c10
 8004a9c:	08004c10 	.word	0x08004c10
 8004aa0:	08004c14 	.word	0x08004c14

08004aa4 <memcpy>:
 8004aa4:	440a      	add	r2, r1
 8004aa6:	4291      	cmp	r1, r2
 8004aa8:	f100 33ff 	add.w	r3, r0, #4294967295
 8004aac:	d100      	bne.n	8004ab0 <memcpy+0xc>
 8004aae:	4770      	bx	lr
 8004ab0:	b510      	push	{r4, lr}
 8004ab2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004ab6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004aba:	4291      	cmp	r1, r2
 8004abc:	d1f9      	bne.n	8004ab2 <memcpy+0xe>
 8004abe:	bd10      	pop	{r4, pc}

08004ac0 <memset>:
 8004ac0:	4402      	add	r2, r0
 8004ac2:	4603      	mov	r3, r0
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	d100      	bne.n	8004aca <memset+0xa>
 8004ac8:	4770      	bx	lr
 8004aca:	f803 1b01 	strb.w	r1, [r3], #1
 8004ace:	e7f9      	b.n	8004ac4 <memset+0x4>

08004ad0 <_init>:
 8004ad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ad2:	bf00      	nop
 8004ad4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ad6:	bc08      	pop	{r3}
 8004ad8:	469e      	mov	lr, r3
 8004ada:	4770      	bx	lr

08004adc <_fini>:
 8004adc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ade:	bf00      	nop
 8004ae0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ae2:	bc08      	pop	{r3}
 8004ae4:	469e      	mov	lr, r3
 8004ae6:	4770      	bx	lr
